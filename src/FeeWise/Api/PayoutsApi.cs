/*
 * FeeWise Partner API
 *
 * API for partners
 *
 * The version of the OpenAPI document: 0.0.122
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FeeWise.Client;
using FeeWise.Model;

namespace FeeWise.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayoutsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get payouts for the channel partner
        /// </summary>
        /// <remarks>
        /// Get list of payouts for the channel partner since the provided timestamp.  If not supplied, payouts for the last 24 hours are returned. The channel partner is derived from the PartnerAuth security context 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Return payouts since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payouts</returns>
        Payouts GetChannelPartnerPayouts(DateTime? since = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Get payouts for the channel partner
        /// </summary>
        /// <remarks>
        /// Get list of payouts for the channel partner since the provided timestamp.  If not supplied, payouts for the last 24 hours are returned. The channel partner is derived from the PartnerAuth security context 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Return payouts since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payouts</returns>
        ApiResponse<Payouts> GetChannelPartnerPayoutsWithHttpInfo(DateTime? since = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Get payouts for the specified firm
        /// </summary>
        /// <remarks>
        /// DEPRECATED - Use /api/v3/partner/firms/&lt;firm_id&gt;/payouts endpoint instead  Get list of payouts for the specified firm.  If the since parameter is not supplied, payouts for the last 24 hours are returned. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">ID of the firm whose payouts are to be retrieved </param>
        /// <param name="since">Return payouts, for the given channel partner / firm, sent since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payouts</returns>
        [Obsolete]
        Payouts GetFirmPayouts(Guid firmId, DateTime? since = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Get payouts for the specified firm
        /// </summary>
        /// <remarks>
        /// DEPRECATED - Use /api/v3/partner/firms/&lt;firm_id&gt;/payouts endpoint instead  Get list of payouts for the specified firm.  If the since parameter is not supplied, payouts for the last 24 hours are returned. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">ID of the firm whose payouts are to be retrieved </param>
        /// <param name="since">Return payouts, for the given channel partner / firm, sent since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payouts</returns>
        [Obsolete]
        ApiResponse<Payouts> GetFirmPayoutsWithHttpInfo(Guid firmId, DateTime? since = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for payouts for a channel partner..         Filters supplied in the query params must *all* be met. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="from">Return payouts since this timestamp. If not supplied, \&quot;from\&quot; defaults to the last 7 days\&quot;.  (optional)</param>
        /// <param name="to">Return payouts created before timestamp. If not supplied, \&quot;to\&quot; defaults to now.  (optional)</param>
        /// <param name="page">Pagination - Page number to return  (optional, default to 1)</param>
        /// <param name="pageSize">Pagination - payouts per page  (optional, default to 20)</param>
        /// <param name="sortBy">Field to sort by, from the payout model (optional, default to date)</param>
        /// <param name="order">Sorting order (asc or desc). Default is desc  (optional, default to desc)</param>
        /// <param name="statusFilter">Filter by status nb: Example usage, comma separated, in query... /payouts?status_filter&#x3D;Paid,Initialised  (optional)</param>
        /// <param name="accountIdFilter">Filter by account id nb: Example usage, comma separated, in query... /payouts?account_id&#x3D;57d43c4e-f18d-40ae-9511-2aeafbf68def,b7dc7851-5cc4-41d5-8174-f00ad916f76b  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PayoutsResponse</returns>
        PayoutsResponse GetPayoutsForFirm(Guid firmId, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortBy = default(string), string order = default(string), List<string> statusFilter = default(List<string>), List<Guid> accountIdFilter = default(List<Guid>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for payouts for a channel partner..         Filters supplied in the query params must *all* be met. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="from">Return payouts since this timestamp. If not supplied, \&quot;from\&quot; defaults to the last 7 days\&quot;.  (optional)</param>
        /// <param name="to">Return payouts created before timestamp. If not supplied, \&quot;to\&quot; defaults to now.  (optional)</param>
        /// <param name="page">Pagination - Page number to return  (optional, default to 1)</param>
        /// <param name="pageSize">Pagination - payouts per page  (optional, default to 20)</param>
        /// <param name="sortBy">Field to sort by, from the payout model (optional, default to date)</param>
        /// <param name="order">Sorting order (asc or desc). Default is desc  (optional, default to desc)</param>
        /// <param name="statusFilter">Filter by status nb: Example usage, comma separated, in query... /payouts?status_filter&#x3D;Paid,Initialised  (optional)</param>
        /// <param name="accountIdFilter">Filter by account id nb: Example usage, comma separated, in query... /payouts?account_id&#x3D;57d43c4e-f18d-40ae-9511-2aeafbf68def,b7dc7851-5cc4-41d5-8174-f00ad916f76b  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PayoutsResponse</returns>
        ApiResponse<PayoutsResponse> GetPayoutsForFirmWithHttpInfo(Guid firmId, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortBy = default(string), string order = default(string), List<string> statusFilter = default(List<string>), List<Guid> accountIdFilter = default(List<Guid>), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayoutsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get payouts for the channel partner
        /// </summary>
        /// <remarks>
        /// Get list of payouts for the channel partner since the provided timestamp.  If not supplied, payouts for the last 24 hours are returned. The channel partner is derived from the PartnerAuth security context 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Return payouts since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payouts</returns>
        System.Threading.Tasks.Task<Payouts> GetChannelPartnerPayoutsAsync(DateTime? since = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get payouts for the channel partner
        /// </summary>
        /// <remarks>
        /// Get list of payouts for the channel partner since the provided timestamp.  If not supplied, payouts for the last 24 hours are returned. The channel partner is derived from the PartnerAuth security context 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Return payouts since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payouts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payouts>> GetChannelPartnerPayoutsWithHttpInfoAsync(DateTime? since = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get payouts for the specified firm
        /// </summary>
        /// <remarks>
        /// DEPRECATED - Use /api/v3/partner/firms/&lt;firm_id&gt;/payouts endpoint instead  Get list of payouts for the specified firm.  If the since parameter is not supplied, payouts for the last 24 hours are returned. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">ID of the firm whose payouts are to be retrieved </param>
        /// <param name="since">Return payouts, for the given channel partner / firm, sent since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payouts</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Payouts> GetFirmPayoutsAsync(Guid firmId, DateTime? since = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get payouts for the specified firm
        /// </summary>
        /// <remarks>
        /// DEPRECATED - Use /api/v3/partner/firms/&lt;firm_id&gt;/payouts endpoint instead  Get list of payouts for the specified firm.  If the since parameter is not supplied, payouts for the last 24 hours are returned. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">ID of the firm whose payouts are to be retrieved </param>
        /// <param name="since">Return payouts, for the given channel partner / firm, sent since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payouts)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Payouts>> GetFirmPayoutsWithHttpInfoAsync(Guid firmId, DateTime? since = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for payouts for a channel partner..         Filters supplied in the query params must *all* be met. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="from">Return payouts since this timestamp. If not supplied, \&quot;from\&quot; defaults to the last 7 days\&quot;.  (optional)</param>
        /// <param name="to">Return payouts created before timestamp. If not supplied, \&quot;to\&quot; defaults to now.  (optional)</param>
        /// <param name="page">Pagination - Page number to return  (optional, default to 1)</param>
        /// <param name="pageSize">Pagination - payouts per page  (optional, default to 20)</param>
        /// <param name="sortBy">Field to sort by, from the payout model (optional, default to date)</param>
        /// <param name="order">Sorting order (asc or desc). Default is desc  (optional, default to desc)</param>
        /// <param name="statusFilter">Filter by status nb: Example usage, comma separated, in query... /payouts?status_filter&#x3D;Paid,Initialised  (optional)</param>
        /// <param name="accountIdFilter">Filter by account id nb: Example usage, comma separated, in query... /payouts?account_id&#x3D;57d43c4e-f18d-40ae-9511-2aeafbf68def,b7dc7851-5cc4-41d5-8174-f00ad916f76b  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PayoutsResponse</returns>
        System.Threading.Tasks.Task<PayoutsResponse> GetPayoutsForFirmAsync(Guid firmId, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortBy = default(string), string order = default(string), List<string> statusFilter = default(List<string>), List<Guid> accountIdFilter = default(List<Guid>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for payouts for a channel partner..         Filters supplied in the query params must *all* be met. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="from">Return payouts since this timestamp. If not supplied, \&quot;from\&quot; defaults to the last 7 days\&quot;.  (optional)</param>
        /// <param name="to">Return payouts created before timestamp. If not supplied, \&quot;to\&quot; defaults to now.  (optional)</param>
        /// <param name="page">Pagination - Page number to return  (optional, default to 1)</param>
        /// <param name="pageSize">Pagination - payouts per page  (optional, default to 20)</param>
        /// <param name="sortBy">Field to sort by, from the payout model (optional, default to date)</param>
        /// <param name="order">Sorting order (asc or desc). Default is desc  (optional, default to desc)</param>
        /// <param name="statusFilter">Filter by status nb: Example usage, comma separated, in query... /payouts?status_filter&#x3D;Paid,Initialised  (optional)</param>
        /// <param name="accountIdFilter">Filter by account id nb: Example usage, comma separated, in query... /payouts?account_id&#x3D;57d43c4e-f18d-40ae-9511-2aeafbf68def,b7dc7851-5cc4-41d5-8174-f00ad916f76b  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PayoutsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayoutsResponse>> GetPayoutsForFirmWithHttpInfoAsync(Guid firmId, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortBy = default(string), string order = default(string), List<string> statusFilter = default(List<string>), List<Guid> accountIdFilter = default(List<Guid>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayoutsApi : IPayoutsApiSync, IPayoutsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PayoutsApi : IPayoutsApi
    {
        private FeeWise.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayoutsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayoutsApi(string basePath)
        {
            this.Configuration = FeeWise.Client.Configuration.MergeConfigurations(
                FeeWise.Client.GlobalConfiguration.Instance,
                new FeeWise.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FeeWise.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PayoutsApi(FeeWise.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FeeWise.Client.Configuration.MergeConfigurations(
                FeeWise.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FeeWise.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PayoutsApi(FeeWise.Client.ISynchronousClient client, FeeWise.Client.IAsynchronousClient asyncClient, FeeWise.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FeeWise.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FeeWise.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FeeWise.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FeeWise.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FeeWise.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get payouts for the channel partner Get list of payouts for the channel partner since the provided timestamp.  If not supplied, payouts for the last 24 hours are returned. The channel partner is derived from the PartnerAuth security context 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Return payouts since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payouts</returns>
        public Payouts GetChannelPartnerPayouts(DateTime? since = default(DateTime?), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<Payouts> localVarResponse = GetChannelPartnerPayoutsWithHttpInfo(since);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get payouts for the channel partner Get list of payouts for the channel partner since the provided timestamp.  If not supplied, payouts for the last 24 hours are returned. The channel partner is derived from the PartnerAuth security context 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Return payouts since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payouts</returns>
        public FeeWise.Client.ApiResponse<Payouts> GetChannelPartnerPayoutsWithHttpInfo(DateTime? since = default(DateTime?), int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }

            localVarRequestOptions.Operation = "PayoutsApi.GetChannelPartnerPayouts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Payouts>("/api/v3/partner/payouts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelPartnerPayouts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get payouts for the channel partner Get list of payouts for the channel partner since the provided timestamp.  If not supplied, payouts for the last 24 hours are returned. The channel partner is derived from the PartnerAuth security context 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Return payouts since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payouts</returns>
        public async System.Threading.Tasks.Task<Payouts> GetChannelPartnerPayoutsAsync(DateTime? since = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<Payouts> localVarResponse = await GetChannelPartnerPayoutsWithHttpInfoAsync(since, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get payouts for the channel partner Get list of payouts for the channel partner since the provided timestamp.  If not supplied, payouts for the last 24 hours are returned. The channel partner is derived from the PartnerAuth security context 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Return payouts since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payouts)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<Payouts>> GetChannelPartnerPayoutsWithHttpInfoAsync(DateTime? since = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }

            localVarRequestOptions.Operation = "PayoutsApi.GetChannelPartnerPayouts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Payouts>("/api/v3/partner/payouts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelPartnerPayouts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get payouts for the specified firm DEPRECATED - Use /api/v3/partner/firms/&lt;firm_id&gt;/payouts endpoint instead  Get list of payouts for the specified firm.  If the since parameter is not supplied, payouts for the last 24 hours are returned. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">ID of the firm whose payouts are to be retrieved </param>
        /// <param name="since">Return payouts, for the given channel partner / firm, sent since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payouts</returns>
        [Obsolete]
        public Payouts GetFirmPayouts(Guid firmId, DateTime? since = default(DateTime?), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<Payouts> localVarResponse = GetFirmPayoutsWithHttpInfo(firmId, since);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get payouts for the specified firm DEPRECATED - Use /api/v3/partner/firms/&lt;firm_id&gt;/payouts endpoint instead  Get list of payouts for the specified firm.  If the since parameter is not supplied, payouts for the last 24 hours are returned. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">ID of the firm whose payouts are to be retrieved </param>
        /// <param name="since">Return payouts, for the given channel partner / firm, sent since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payouts</returns>
        [Obsolete]
        public FeeWise.Client.ApiResponse<Payouts> GetFirmPayoutsWithHttpInfo(Guid firmId, DateTime? since = default(DateTime?), int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }

            localVarRequestOptions.Operation = "PayoutsApi.GetFirmPayouts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Payouts>("/api/v3/partner/payouts/firms/{firm_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirmPayouts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get payouts for the specified firm DEPRECATED - Use /api/v3/partner/firms/&lt;firm_id&gt;/payouts endpoint instead  Get list of payouts for the specified firm.  If the since parameter is not supplied, payouts for the last 24 hours are returned. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">ID of the firm whose payouts are to be retrieved </param>
        /// <param name="since">Return payouts, for the given channel partner / firm, sent since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payouts</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Payouts> GetFirmPayoutsAsync(Guid firmId, DateTime? since = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<Payouts> localVarResponse = await GetFirmPayoutsWithHttpInfoAsync(firmId, since, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get payouts for the specified firm DEPRECATED - Use /api/v3/partner/firms/&lt;firm_id&gt;/payouts endpoint instead  Get list of payouts for the specified firm.  If the since parameter is not supplied, payouts for the last 24 hours are returned. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">ID of the firm whose payouts are to be retrieved </param>
        /// <param name="since">Return payouts, for the given channel partner / firm, sent since this timestamp.  If not supplied, payouts for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payouts)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<Payouts>> GetFirmPayoutsWithHttpInfoAsync(Guid firmId, DateTime? since = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }

            localVarRequestOptions.Operation = "PayoutsApi.GetFirmPayouts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Payouts>("/api/v3/partner/payouts/firms/{firm_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirmPayouts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for payouts for a channel partner..         Filters supplied in the query params must *all* be met. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="from">Return payouts since this timestamp. If not supplied, \&quot;from\&quot; defaults to the last 7 days\&quot;.  (optional)</param>
        /// <param name="to">Return payouts created before timestamp. If not supplied, \&quot;to\&quot; defaults to now.  (optional)</param>
        /// <param name="page">Pagination - Page number to return  (optional, default to 1)</param>
        /// <param name="pageSize">Pagination - payouts per page  (optional, default to 20)</param>
        /// <param name="sortBy">Field to sort by, from the payout model (optional, default to date)</param>
        /// <param name="order">Sorting order (asc or desc). Default is desc  (optional, default to desc)</param>
        /// <param name="statusFilter">Filter by status nb: Example usage, comma separated, in query... /payouts?status_filter&#x3D;Paid,Initialised  (optional)</param>
        /// <param name="accountIdFilter">Filter by account id nb: Example usage, comma separated, in query... /payouts?account_id&#x3D;57d43c4e-f18d-40ae-9511-2aeafbf68def,b7dc7851-5cc4-41d5-8174-f00ad916f76b  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PayoutsResponse</returns>
        public PayoutsResponse GetPayoutsForFirm(Guid firmId, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortBy = default(string), string order = default(string), List<string> statusFilter = default(List<string>), List<Guid> accountIdFilter = default(List<Guid>), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<PayoutsResponse> localVarResponse = GetPayoutsForFirmWithHttpInfo(firmId, from, to, page, pageSize, sortBy, order, statusFilter, accountIdFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for payouts for a channel partner..         Filters supplied in the query params must *all* be met. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="from">Return payouts since this timestamp. If not supplied, \&quot;from\&quot; defaults to the last 7 days\&quot;.  (optional)</param>
        /// <param name="to">Return payouts created before timestamp. If not supplied, \&quot;to\&quot; defaults to now.  (optional)</param>
        /// <param name="page">Pagination - Page number to return  (optional, default to 1)</param>
        /// <param name="pageSize">Pagination - payouts per page  (optional, default to 20)</param>
        /// <param name="sortBy">Field to sort by, from the payout model (optional, default to date)</param>
        /// <param name="order">Sorting order (asc or desc). Default is desc  (optional, default to desc)</param>
        /// <param name="statusFilter">Filter by status nb: Example usage, comma separated, in query... /payouts?status_filter&#x3D;Paid,Initialised  (optional)</param>
        /// <param name="accountIdFilter">Filter by account id nb: Example usage, comma separated, in query... /payouts?account_id&#x3D;57d43c4e-f18d-40ae-9511-2aeafbf68def,b7dc7851-5cc4-41d5-8174-f00ad916f76b  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PayoutsResponse</returns>
        public FeeWise.Client.ApiResponse<PayoutsResponse> GetPayoutsForFirmWithHttpInfo(Guid firmId, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortBy = default(string), string order = default(string), List<string> statusFilter = default(List<string>), List<Guid> accountIdFilter = default(List<Guid>), int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (statusFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("csv", "status_filter", statusFilter));
            }
            if (accountIdFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("csv", "account_id_filter", accountIdFilter));
            }

            localVarRequestOptions.Operation = "PayoutsApi.GetPayoutsForFirm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PayoutsResponse>("/api/v3/partner/firms/{firm_id}/payouts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayoutsForFirm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for payouts for a channel partner..         Filters supplied in the query params must *all* be met. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="from">Return payouts since this timestamp. If not supplied, \&quot;from\&quot; defaults to the last 7 days\&quot;.  (optional)</param>
        /// <param name="to">Return payouts created before timestamp. If not supplied, \&quot;to\&quot; defaults to now.  (optional)</param>
        /// <param name="page">Pagination - Page number to return  (optional, default to 1)</param>
        /// <param name="pageSize">Pagination - payouts per page  (optional, default to 20)</param>
        /// <param name="sortBy">Field to sort by, from the payout model (optional, default to date)</param>
        /// <param name="order">Sorting order (asc or desc). Default is desc  (optional, default to desc)</param>
        /// <param name="statusFilter">Filter by status nb: Example usage, comma separated, in query... /payouts?status_filter&#x3D;Paid,Initialised  (optional)</param>
        /// <param name="accountIdFilter">Filter by account id nb: Example usage, comma separated, in query... /payouts?account_id&#x3D;57d43c4e-f18d-40ae-9511-2aeafbf68def,b7dc7851-5cc4-41d5-8174-f00ad916f76b  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PayoutsResponse</returns>
        public async System.Threading.Tasks.Task<PayoutsResponse> GetPayoutsForFirmAsync(Guid firmId, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortBy = default(string), string order = default(string), List<string> statusFilter = default(List<string>), List<Guid> accountIdFilter = default(List<Guid>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<PayoutsResponse> localVarResponse = await GetPayoutsForFirmWithHttpInfoAsync(firmId, from, to, page, pageSize, sortBy, order, statusFilter, accountIdFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for payouts for a channel partner..         Filters supplied in the query params must *all* be met. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="from">Return payouts since this timestamp. If not supplied, \&quot;from\&quot; defaults to the last 7 days\&quot;.  (optional)</param>
        /// <param name="to">Return payouts created before timestamp. If not supplied, \&quot;to\&quot; defaults to now.  (optional)</param>
        /// <param name="page">Pagination - Page number to return  (optional, default to 1)</param>
        /// <param name="pageSize">Pagination - payouts per page  (optional, default to 20)</param>
        /// <param name="sortBy">Field to sort by, from the payout model (optional, default to date)</param>
        /// <param name="order">Sorting order (asc or desc). Default is desc  (optional, default to desc)</param>
        /// <param name="statusFilter">Filter by status nb: Example usage, comma separated, in query... /payouts?status_filter&#x3D;Paid,Initialised  (optional)</param>
        /// <param name="accountIdFilter">Filter by account id nb: Example usage, comma separated, in query... /payouts?account_id&#x3D;57d43c4e-f18d-40ae-9511-2aeafbf68def,b7dc7851-5cc4-41d5-8174-f00ad916f76b  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PayoutsResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<PayoutsResponse>> GetPayoutsForFirmWithHttpInfoAsync(Guid firmId, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortBy = default(string), string order = default(string), List<string> statusFilter = default(List<string>), List<Guid> accountIdFilter = default(List<Guid>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (statusFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("csv", "status_filter", statusFilter));
            }
            if (accountIdFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("csv", "account_id_filter", accountIdFilter));
            }

            localVarRequestOptions.Operation = "PayoutsApi.GetPayoutsForFirm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PayoutsResponse>("/api/v3/partner/firms/{firm_id}/payouts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayoutsForFirm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
