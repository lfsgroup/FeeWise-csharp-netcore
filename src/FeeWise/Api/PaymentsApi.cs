/*
 * FeeWise Partner API
 *
 * API for partners
 *
 * The version of the OpenAPI document: 0.0.163
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FeeWise.Client;
using FeeWise.Model;

namespace FeeWise.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adjust an invoice.
        /// </summary>
        /// <remarks>
        /// Adjust the invoice amount after the invoice has been created.  If an adjustment is for an invoice outside of FeeWise, it should be adjusted using this endpoint. If the invoice has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing invoice, the adjustment request will fail. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="adjustInvoiceAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvoiceResponse</returns>
        [Obsolete]
        InvoiceResponse AdjustInvoiceAmount(Guid invoiceId, AdjustInvoiceAmountRequest adjustInvoiceAmountRequest, int operationIndex = 0);

        /// <summary>
        /// Adjust an invoice.
        /// </summary>
        /// <remarks>
        /// Adjust the invoice amount after the invoice has been created.  If an adjustment is for an invoice outside of FeeWise, it should be adjusted using this endpoint. If the invoice has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing invoice, the adjustment request will fail. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="adjustInvoiceAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvoiceResponse</returns>
        [Obsolete]
        ApiResponse<InvoiceResponse> AdjustInvoiceAmountWithHttpInfo(Guid invoiceId, AdjustInvoiceAmountRequest adjustInvoiceAmountRequest, int operationIndex = 0);
        /// <summary>
        /// Adjust an trust deposit.
        /// </summary>
        /// <remarks>
        /// Adjust the trust deposit amount after the trust deposit has been created.  If an adjustment is for an trust deposit outside of FeeWise, it should be adjusted using this endpoint. If the trust deposit has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing trust deposit, the adjustment request will fail. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="adjustTrustDepositAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrustDepositResponse</returns>
        [Obsolete]
        TrustDepositResponse AdjustTrustDepositAmount(Guid trustDepositId, AdjustTrustDepositAmountRequest adjustTrustDepositAmountRequest, int operationIndex = 0);

        /// <summary>
        /// Adjust an trust deposit.
        /// </summary>
        /// <remarks>
        /// Adjust the trust deposit amount after the trust deposit has been created.  If an adjustment is for an trust deposit outside of FeeWise, it should be adjusted using this endpoint. If the trust deposit has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing trust deposit, the adjustment request will fail. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="adjustTrustDepositAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrustDepositResponse</returns>
        [Obsolete]
        ApiResponse<TrustDepositResponse> AdjustTrustDepositAmountWithHttpInfo(Guid trustDepositId, AdjustTrustDepositAmountRequest adjustTrustDepositAmountRequest, int operationIndex = 0);
        /// <summary>
        /// Create a Charge
        /// </summary>
        /// <remarks>
        /// Create a charge for a firm. The firm can then send the returned URI to their customer, for payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargeResponse</returns>
        ChargeResponse CreateCharge(Guid firmId, Charge charge, int operationIndex = 0);

        /// <summary>
        /// Create a Charge
        /// </summary>
        /// <remarks>
        /// Create a charge for a firm. The firm can then send the returned URI to their customer, for payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargeResponse</returns>
        ApiResponse<ChargeResponse> CreateChargeWithHttpInfo(Guid firmId, Charge charge, int operationIndex = 0);
        /// <summary>
        /// DEPRECATED - Use /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token} endpoint instead
        /// </summary>
        /// <remarks>
        /// Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargeAndPayResponse</returns>
        [Obsolete]
        ChargeAndPayResponse CreateChargeAndPayWithCustomerPaymentToken(Guid paymentToken, Guid firmId, Charge charge, int operationIndex = 0);

        /// <summary>
        /// DEPRECATED - Use /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token} endpoint instead
        /// </summary>
        /// <remarks>
        /// Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargeAndPayResponse</returns>
        [Obsolete]
        ApiResponse<ChargeAndPayResponse> CreateChargeAndPayWithCustomerPaymentTokenWithHttpInfo(Guid paymentToken, Guid firmId, Charge charge, int operationIndex = 0);
        /// <summary>
        /// Create Charge, and pay directly.
        /// </summary>
        /// <remarks>
        /// Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="createChargePaymentRequest">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargePaymentDetails</returns>
        ChargePaymentDetails CreateChargePayment(Guid paymentToken, Guid firmId, CreateChargePaymentRequest createChargePaymentRequest, int operationIndex = 0);

        /// <summary>
        /// Create Charge, and pay directly.
        /// </summary>
        /// <remarks>
        /// Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="createChargePaymentRequest">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargePaymentDetails</returns>
        ApiResponse<ChargePaymentDetails> CreateChargePaymentWithHttpInfo(Guid paymentToken, Guid firmId, CreateChargePaymentRequest createChargePaymentRequest, int operationIndex = 0);
        /// <summary>
        /// Create an Invoice
        /// </summary>
        /// <remarks>
        /// Create an invoice for a firm.   NB the fields &#x60;invoice_id&#x60;, &#x60;payment_uri&#x60; and &#x60;status&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the invoice has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching invoice will be updated instead. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice">Invoice details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvoiceResponse</returns>
        InvoiceResponse CreateInvoice(Invoice invoice, string sourceId = default(string), int operationIndex = 0);

        /// <summary>
        /// Create an Invoice
        /// </summary>
        /// <remarks>
        /// Create an invoice for a firm.   NB the fields &#x60;invoice_id&#x60;, &#x60;payment_uri&#x60; and &#x60;status&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the invoice has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching invoice will be updated instead. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice">Invoice details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvoiceResponse</returns>
        ApiResponse<InvoiceResponse> CreateInvoiceWithHttpInfo(Invoice invoice, string sourceId = default(string), int operationIndex = 0);
        /// <summary>
        /// Create a matter
        /// </summary>
        /// <remarks>
        /// Create a matter, with all matter information, debtor details and artifacts, invoice or trust deposit. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="matterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatterResponse</returns>
        MatterResponse CreateMatter(string sourceId = default(string), MatterRequest matterRequest = default(MatterRequest), int operationIndex = 0);

        /// <summary>
        /// Create a matter
        /// </summary>
        /// <remarks>
        /// Create a matter, with all matter information, debtor details and artifacts, invoice or trust deposit. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="matterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatterResponse</returns>
        ApiResponse<MatterResponse> CreateMatterWithHttpInfo(string sourceId = default(string), MatterRequest matterRequest = default(MatterRequest), int operationIndex = 0);
        /// <summary>
        /// Create split charges, each charge is distributed to its own settlement account.
        /// </summary>
        /// <remarks>
        /// Create multiple charges for a firm, that can be paid in a single payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the split charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="splitCharge">Split Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SplitChargesResponse</returns>
        SplitChargesResponse CreateSplitCharge(Guid firmId, SplitCharge splitCharge, int operationIndex = 0);

        /// <summary>
        /// Create split charges, each charge is distributed to its own settlement account.
        /// </summary>
        /// <remarks>
        /// Create multiple charges for a firm, that can be paid in a single payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the split charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="splitCharge">Split Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SplitChargesResponse</returns>
        ApiResponse<SplitChargesResponse> CreateSplitChargeWithHttpInfo(Guid firmId, SplitCharge splitCharge, int operationIndex = 0);
        /// <summary>
        /// Create a Trust Deposit
        /// </summary>
        /// <remarks>
        /// Create a trust deposit for a channel partner.   NB the fields trust_deposit_id, payment_uri and status must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the trust deposit has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching trust deposit will be updated instead. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDeposit">Trust deposit details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrustDepositResponse</returns>
        TrustDepositResponse CreateTrustDeposit(TrustDeposit trustDeposit, string sourceId = default(string), int operationIndex = 0);

        /// <summary>
        /// Create a Trust Deposit
        /// </summary>
        /// <remarks>
        /// Create a trust deposit for a channel partner.   NB the fields trust_deposit_id, payment_uri and status must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the trust deposit has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching trust deposit will be updated instead. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDeposit">Trust deposit details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrustDepositResponse</returns>
        ApiResponse<TrustDepositResponse> CreateTrustDepositWithHttpInfo(TrustDeposit trustDeposit, string sourceId = default(string), int operationIndex = 0);
        /// <summary>
        /// DEPRECATED use /transactions - Search for payments for the channel partner
        /// </summary>
        /// <remarks>
        /// Search for payments for a channel partner..         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Get a specific payment. If this is specified, other query params should not be specified  and will result in a BadRequest if the are.  (optional)</param>
        /// <param name="artifactId">Get payments only for the specified artifact (Invoice/Trust Desposit)  (optional)</param>
        /// <param name="firmId">Get payments going to a specific firm  (optional)</param>
        /// <param name="since">Return payments sent since this timestamp. If not supplied, payments for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payments</returns>
        [Obsolete]
        Payments GetChannelPartnerPayments(Guid? paymentId = default(Guid?), Guid? artifactId = default(Guid?), Guid? firmId = default(Guid?), DateTime? since = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// DEPRECATED use /transactions - Search for payments for the channel partner
        /// </summary>
        /// <remarks>
        /// Search for payments for a channel partner..         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Get a specific payment. If this is specified, other query params should not be specified  and will result in a BadRequest if the are.  (optional)</param>
        /// <param name="artifactId">Get payments only for the specified artifact (Invoice/Trust Desposit)  (optional)</param>
        /// <param name="firmId">Get payments going to a specific firm  (optional)</param>
        /// <param name="since">Return payments sent since this timestamp. If not supplied, payments for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payments</returns>
        [Obsolete]
        ApiResponse<Payments> GetChannelPartnerPaymentsWithHttpInfo(Guid? paymentId = default(Guid?), Guid? artifactId = default(Guid?), Guid? firmId = default(Guid?), DateTime? since = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Get a matter debtor statement
        /// </summary>
        /// <remarks>
        /// Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="matterId"></param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="refArtifactId">Optional referring artifact id.  If provided, details of the originating artifact, e.g. invoice or trust deposit, may be displayed on the payment pages.   (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatterStatement</returns>
        MatterStatement GetDebtorMatterStatement(Guid debtorId, Guid matterId, string sourceId = default(string), Guid? refArtifactId = default(Guid?), int? to = default(int?), int? from = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a matter debtor statement
        /// </summary>
        /// <remarks>
        /// Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="matterId"></param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="refArtifactId">Optional referring artifact id.  If provided, details of the originating artifact, e.g. invoice or trust deposit, may be displayed on the payment pages.   (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatterStatement</returns>
        ApiResponse<MatterStatement> GetDebtorMatterStatementWithHttpInfo(Guid debtorId, Guid matterId, string sourceId = default(string), Guid? refArtifactId = default(Guid?), int? to = default(int?), int? from = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a debtor statement
        /// </summary>
        /// <remarks>
        /// Get a debtor statement that is payable by the client via the returned URL. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DebtorStatement</returns>
        DebtorStatement GetDebtorStatement(Guid debtorId, int operationIndex = 0);

        /// <summary>
        /// Get a debtor statement
        /// </summary>
        /// <remarks>
        /// Get a debtor statement that is payable by the client via the returned URL. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DebtorStatement</returns>
        ApiResponse<DebtorStatement> GetDebtorStatementWithHttpInfo(Guid debtorId, int operationIndex = 0);
        /// <summary>
        /// Get invoice by external_id
        /// </summary>
        /// <remarks>
        /// Get an invoice for a firm by the external_id.  NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact  with a unique id (external_id) that is meaningful for their system). 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvoiceResponse</returns>
        InvoiceResponse GetInvoiceByExternalId(Guid firmId, string externalId, int operationIndex = 0);

        /// <summary>
        /// Get invoice by external_id
        /// </summary>
        /// <remarks>
        /// Get an invoice for a firm by the external_id.  NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact  with a unique id (external_id) that is meaningful for their system). 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvoiceResponse</returns>
        ApiResponse<InvoiceResponse> GetInvoiceByExternalIdWithHttpInfo(Guid firmId, string externalId, int operationIndex = 0);
        /// <summary>
        /// Get a specified invoice by id.
        /// </summary>
        /// <remarks>
        /// Get a specified invoice by id.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvoiceResponse</returns>
        InvoiceResponse GetInvoiceById(Guid invoiceId, int operationIndex = 0);

        /// <summary>
        /// Get a specified invoice by id.
        /// </summary>
        /// <remarks>
        /// Get a specified invoice by id.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvoiceResponse</returns>
        ApiResponse<InvoiceResponse> GetInvoiceByIdWithHttpInfo(Guid invoiceId, int operationIndex = 0);
        /// <summary>
        /// Get a matter statement
        /// </summary>
        /// <remarks>
        /// Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId"></param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatterStatement</returns>
        [Obsolete]
        MatterStatement GetMatterStatement(Guid matterId, int? to = default(int?), int? from = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a matter statement
        /// </summary>
        /// <remarks>
        /// Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId"></param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatterStatement</returns>
        [Obsolete]
        ApiResponse<MatterStatement> GetMatterStatementWithHttpInfo(Guid matterId, int? to = default(int?), int? from = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Refund Details
        /// </summary>
        /// <remarks>
        /// Get refund details by Payment ID (UUID) and Artifact ID (UUID).  Both values can be found in the /transactions and /payouts responses. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">The ID of the firm</param>
        /// <param name="paymentId">Payment ID (UUID)</param>
        /// <param name="artifactId">Artifact ID (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefundResponse</returns>
        RefundResponse GetRefundDetails(Guid firmId, Guid paymentId, Guid artifactId, int operationIndex = 0);

        /// <summary>
        /// Get Refund Details
        /// </summary>
        /// <remarks>
        /// Get refund details by Payment ID (UUID) and Artifact ID (UUID).  Both values can be found in the /transactions and /payouts responses. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">The ID of the firm</param>
        /// <param name="paymentId">Payment ID (UUID)</param>
        /// <param name="artifactId">Artifact ID (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefundResponse</returns>
        ApiResponse<RefundResponse> GetRefundDetailsWithHttpInfo(Guid firmId, Guid paymentId, Guid artifactId, int operationIndex = 0);
        /// <summary>
        /// Get Trust Deposit by external_id
        /// </summary>
        /// <remarks>
        /// Get a trust deposit for a firm by the external_id. NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact with a unique id (external_id) that is meaningful for their system). 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrustDepositResponse</returns>
        TrustDepositResponse GetTrustDepositByExternalId(Guid firmId, string externalId, int operationIndex = 0);

        /// <summary>
        /// Get Trust Deposit by external_id
        /// </summary>
        /// <remarks>
        /// Get a trust deposit for a firm by the external_id. NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact with a unique id (external_id) that is meaningful for their system). 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrustDepositResponse</returns>
        ApiResponse<TrustDepositResponse> GetTrustDepositByExternalIdWithHttpInfo(Guid firmId, string externalId, int operationIndex = 0);
        /// <summary>
        /// Get a Trust Deposit by id.
        /// </summary>
        /// <remarks>
        /// Get a Trust Deposit by the specified trust_deposit_id.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrustDepositResponse</returns>
        TrustDepositResponse GetTrustDepositById(Guid trustDepositId, int operationIndex = 0);

        /// <summary>
        /// Get a Trust Deposit by id.
        /// </summary>
        /// <remarks>
        /// Get a Trust Deposit by the specified trust_deposit_id.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrustDepositResponse</returns>
        ApiResponse<TrustDepositResponse> GetTrustDepositByIdWithHttpInfo(Guid trustDepositId, int operationIndex = 0);
        /// <summary>
        /// Confirm a pending charge payment.
        /// </summary>
        /// <remarks>
        /// confirm the payment of a pending charge using the provided charge_id and payment_id
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="chargeId"></param>
        /// <param name="paymentId"></param>
        /// <param name="postConfirmChargePaymentRequest">POST Body contains optional Metadata and Debtor info to apply to the charge. Warning, will replace the charge&#39;s existing metadata. Debtor external_id can not be updated at this point in the flow and will be ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargePaymentDetails</returns>
        ChargePaymentDetails PostConfirmChargePayment(Guid firmId, Guid chargeId, Guid paymentId, PostConfirmChargePaymentRequest postConfirmChargePaymentRequest = default(PostConfirmChargePaymentRequest), int operationIndex = 0);

        /// <summary>
        /// Confirm a pending charge payment.
        /// </summary>
        /// <remarks>
        /// confirm the payment of a pending charge using the provided charge_id and payment_id
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="chargeId"></param>
        /// <param name="paymentId"></param>
        /// <param name="postConfirmChargePaymentRequest">POST Body contains optional Metadata and Debtor info to apply to the charge. Warning, will replace the charge&#39;s existing metadata. Debtor external_id can not be updated at this point in the flow and will be ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargePaymentDetails</returns>
        ApiResponse<ChargePaymentDetails> PostConfirmChargePaymentWithHttpInfo(Guid firmId, Guid chargeId, Guid paymentId, PostConfirmChargePaymentRequest postConfirmChargePaymentRequest = default(PostConfirmChargePaymentRequest), int operationIndex = 0);
        /// <summary>
        /// Record external payment.
        /// </summary>
        /// <remarks>
        /// If a payment is made towards an artifact (invoice, trust deposit) outside of FeeWise, it should be recorded using this endpoint. This will be recorded as a payment against the artifact and change the amount_due. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPayment">External payment details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExternalPaymentResponse</returns>
        ExternalPaymentResponse RecordExternalPayment(ExternalPayment externalPayment, int operationIndex = 0);

        /// <summary>
        /// Record external payment.
        /// </summary>
        /// <remarks>
        /// If a payment is made towards an artifact (invoice, trust deposit) outside of FeeWise, it should be recorded using this endpoint. This will be recorded as a payment against the artifact and change the amount_due. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPayment">External payment details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExternalPaymentResponse</returns>
        ApiResponse<ExternalPaymentResponse> RecordExternalPaymentWithHttpInfo(ExternalPayment externalPayment, int operationIndex = 0);
        /// <summary>
        /// Update the settlement account for unpaid artifacts.
        /// </summary>
        /// <remarks>
        /// Swaps the settlement account id on all artifacts with the given artifact type.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="settlementAccountId"></param>
        /// <param name="updateArtifactAccountRequest">Contains the type of the artifact and the ID of the account the artifacts should be paid to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatedCount</returns>
        UpdatedCount UpdateArtifactAccount(Guid firmId, Guid settlementAccountId, UpdateArtifactAccountRequest updateArtifactAccountRequest, int operationIndex = 0);

        /// <summary>
        /// Update the settlement account for unpaid artifacts.
        /// </summary>
        /// <remarks>
        /// Swaps the settlement account id on all artifacts with the given artifact type.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="settlementAccountId"></param>
        /// <param name="updateArtifactAccountRequest">Contains the type of the artifact and the ID of the account the artifacts should be paid to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatedCount</returns>
        ApiResponse<UpdatedCount> UpdateArtifactAccountWithHttpInfo(Guid firmId, Guid settlementAccountId, UpdateArtifactAccountRequest updateArtifactAccountRequest, int operationIndex = 0);
        /// <summary>
        /// Update the payment redirect URL for an artifact
        /// </summary>
        /// <remarks>
        /// Update the optional URL the payer will be redirected to after payment.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactId"></param>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArtifactResponse</returns>
        ArtifactResponse UpdateArtifactRedirectURL(Guid artifactId, Guid firmId, int operationIndex = 0);

        /// <summary>
        /// Update the payment redirect URL for an artifact
        /// </summary>
        /// <remarks>
        /// Update the optional URL the payer will be redirected to after payment.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactId"></param>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArtifactResponse</returns>
        ApiResponse<ArtifactResponse> UpdateArtifactRedirectURLWithHttpInfo(Guid artifactId, Guid firmId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adjust an invoice.
        /// </summary>
        /// <remarks>
        /// Adjust the invoice amount after the invoice has been created.  If an adjustment is for an invoice outside of FeeWise, it should be adjusted using this endpoint. If the invoice has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing invoice, the adjustment request will fail. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="adjustInvoiceAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<InvoiceResponse> AdjustInvoiceAmountAsync(Guid invoiceId, AdjustInvoiceAmountRequest adjustInvoiceAmountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adjust an invoice.
        /// </summary>
        /// <remarks>
        /// Adjust the invoice amount after the invoice has been created.  If an adjustment is for an invoice outside of FeeWise, it should be adjusted using this endpoint. If the invoice has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing invoice, the adjustment request will fail. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="adjustInvoiceAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<InvoiceResponse>> AdjustInvoiceAmountWithHttpInfoAsync(Guid invoiceId, AdjustInvoiceAmountRequest adjustInvoiceAmountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adjust an trust deposit.
        /// </summary>
        /// <remarks>
        /// Adjust the trust deposit amount after the trust deposit has been created.  If an adjustment is for an trust deposit outside of FeeWise, it should be adjusted using this endpoint. If the trust deposit has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing trust deposit, the adjustment request will fail. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="adjustTrustDepositAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrustDepositResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<TrustDepositResponse> AdjustTrustDepositAmountAsync(Guid trustDepositId, AdjustTrustDepositAmountRequest adjustTrustDepositAmountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adjust an trust deposit.
        /// </summary>
        /// <remarks>
        /// Adjust the trust deposit amount after the trust deposit has been created.  If an adjustment is for an trust deposit outside of FeeWise, it should be adjusted using this endpoint. If the trust deposit has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing trust deposit, the adjustment request will fail. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="adjustTrustDepositAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrustDepositResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<TrustDepositResponse>> AdjustTrustDepositAmountWithHttpInfoAsync(Guid trustDepositId, AdjustTrustDepositAmountRequest adjustTrustDepositAmountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Charge
        /// </summary>
        /// <remarks>
        /// Create a charge for a firm. The firm can then send the returned URI to their customer, for payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargeResponse</returns>
        System.Threading.Tasks.Task<ChargeResponse> CreateChargeAsync(Guid firmId, Charge charge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Charge
        /// </summary>
        /// <remarks>
        /// Create a charge for a firm. The firm can then send the returned URI to their customer, for payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargeResponse>> CreateChargeWithHttpInfoAsync(Guid firmId, Charge charge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DEPRECATED - Use /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token} endpoint instead
        /// </summary>
        /// <remarks>
        /// Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargeAndPayResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ChargeAndPayResponse> CreateChargeAndPayWithCustomerPaymentTokenAsync(Guid paymentToken, Guid firmId, Charge charge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DEPRECATED - Use /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token} endpoint instead
        /// </summary>
        /// <remarks>
        /// Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargeAndPayResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<ChargeAndPayResponse>> CreateChargeAndPayWithCustomerPaymentTokenWithHttpInfoAsync(Guid paymentToken, Guid firmId, Charge charge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Charge, and pay directly.
        /// </summary>
        /// <remarks>
        /// Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="createChargePaymentRequest">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargePaymentDetails</returns>
        System.Threading.Tasks.Task<ChargePaymentDetails> CreateChargePaymentAsync(Guid paymentToken, Guid firmId, CreateChargePaymentRequest createChargePaymentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Charge, and pay directly.
        /// </summary>
        /// <remarks>
        /// Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="createChargePaymentRequest">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargePaymentDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargePaymentDetails>> CreateChargePaymentWithHttpInfoAsync(Guid paymentToken, Guid firmId, CreateChargePaymentRequest createChargePaymentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an Invoice
        /// </summary>
        /// <remarks>
        /// Create an invoice for a firm.   NB the fields &#x60;invoice_id&#x60;, &#x60;payment_uri&#x60; and &#x60;status&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the invoice has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching invoice will be updated instead. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice">Invoice details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceResponse</returns>
        System.Threading.Tasks.Task<InvoiceResponse> CreateInvoiceAsync(Invoice invoice, string sourceId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an Invoice
        /// </summary>
        /// <remarks>
        /// Create an invoice for a firm.   NB the fields &#x60;invoice_id&#x60;, &#x60;payment_uri&#x60; and &#x60;status&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the invoice has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching invoice will be updated instead. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice">Invoice details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceResponse>> CreateInvoiceWithHttpInfoAsync(Invoice invoice, string sourceId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a matter
        /// </summary>
        /// <remarks>
        /// Create a matter, with all matter information, debtor details and artifacts, invoice or trust deposit. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="matterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatterResponse</returns>
        System.Threading.Tasks.Task<MatterResponse> CreateMatterAsync(string sourceId = default(string), MatterRequest matterRequest = default(MatterRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a matter
        /// </summary>
        /// <remarks>
        /// Create a matter, with all matter information, debtor details and artifacts, invoice or trust deposit. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="matterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatterResponse>> CreateMatterWithHttpInfoAsync(string sourceId = default(string), MatterRequest matterRequest = default(MatterRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create split charges, each charge is distributed to its own settlement account.
        /// </summary>
        /// <remarks>
        /// Create multiple charges for a firm, that can be paid in a single payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the split charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="splitCharge">Split Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SplitChargesResponse</returns>
        System.Threading.Tasks.Task<SplitChargesResponse> CreateSplitChargeAsync(Guid firmId, SplitCharge splitCharge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create split charges, each charge is distributed to its own settlement account.
        /// </summary>
        /// <remarks>
        /// Create multiple charges for a firm, that can be paid in a single payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the split charge has been created and will be available in the response. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="splitCharge">Split Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SplitChargesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SplitChargesResponse>> CreateSplitChargeWithHttpInfoAsync(Guid firmId, SplitCharge splitCharge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Trust Deposit
        /// </summary>
        /// <remarks>
        /// Create a trust deposit for a channel partner.   NB the fields trust_deposit_id, payment_uri and status must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the trust deposit has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching trust deposit will be updated instead. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDeposit">Trust deposit details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrustDepositResponse</returns>
        System.Threading.Tasks.Task<TrustDepositResponse> CreateTrustDepositAsync(TrustDeposit trustDeposit, string sourceId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Trust Deposit
        /// </summary>
        /// <remarks>
        /// Create a trust deposit for a channel partner.   NB the fields trust_deposit_id, payment_uri and status must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the trust deposit has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching trust deposit will be updated instead. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDeposit">Trust deposit details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrustDepositResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustDepositResponse>> CreateTrustDepositWithHttpInfoAsync(TrustDeposit trustDeposit, string sourceId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DEPRECATED use /transactions - Search for payments for the channel partner
        /// </summary>
        /// <remarks>
        /// Search for payments for a channel partner..         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Get a specific payment. If this is specified, other query params should not be specified  and will result in a BadRequest if the are.  (optional)</param>
        /// <param name="artifactId">Get payments only for the specified artifact (Invoice/Trust Desposit)  (optional)</param>
        /// <param name="firmId">Get payments going to a specific firm  (optional)</param>
        /// <param name="since">Return payments sent since this timestamp. If not supplied, payments for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payments</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Payments> GetChannelPartnerPaymentsAsync(Guid? paymentId = default(Guid?), Guid? artifactId = default(Guid?), Guid? firmId = default(Guid?), DateTime? since = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DEPRECATED use /transactions - Search for payments for the channel partner
        /// </summary>
        /// <remarks>
        /// Search for payments for a channel partner..         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Get a specific payment. If this is specified, other query params should not be specified  and will result in a BadRequest if the are.  (optional)</param>
        /// <param name="artifactId">Get payments only for the specified artifact (Invoice/Trust Desposit)  (optional)</param>
        /// <param name="firmId">Get payments going to a specific firm  (optional)</param>
        /// <param name="since">Return payments sent since this timestamp. If not supplied, payments for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Payments>> GetChannelPartnerPaymentsWithHttpInfoAsync(Guid? paymentId = default(Guid?), Guid? artifactId = default(Guid?), Guid? firmId = default(Guid?), DateTime? since = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a matter debtor statement
        /// </summary>
        /// <remarks>
        /// Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="matterId"></param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="refArtifactId">Optional referring artifact id.  If provided, details of the originating artifact, e.g. invoice or trust deposit, may be displayed on the payment pages.   (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatterStatement</returns>
        System.Threading.Tasks.Task<MatterStatement> GetDebtorMatterStatementAsync(Guid debtorId, Guid matterId, string sourceId = default(string), Guid? refArtifactId = default(Guid?), int? to = default(int?), int? from = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a matter debtor statement
        /// </summary>
        /// <remarks>
        /// Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="matterId"></param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="refArtifactId">Optional referring artifact id.  If provided, details of the originating artifact, e.g. invoice or trust deposit, may be displayed on the payment pages.   (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatterStatement)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatterStatement>> GetDebtorMatterStatementWithHttpInfoAsync(Guid debtorId, Guid matterId, string sourceId = default(string), Guid? refArtifactId = default(Guid?), int? to = default(int?), int? from = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a debtor statement
        /// </summary>
        /// <remarks>
        /// Get a debtor statement that is payable by the client via the returned URL. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DebtorStatement</returns>
        System.Threading.Tasks.Task<DebtorStatement> GetDebtorStatementAsync(Guid debtorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a debtor statement
        /// </summary>
        /// <remarks>
        /// Get a debtor statement that is payable by the client via the returned URL. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DebtorStatement)</returns>
        System.Threading.Tasks.Task<ApiResponse<DebtorStatement>> GetDebtorStatementWithHttpInfoAsync(Guid debtorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get invoice by external_id
        /// </summary>
        /// <remarks>
        /// Get an invoice for a firm by the external_id.  NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact  with a unique id (external_id) that is meaningful for their system). 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceResponse</returns>
        System.Threading.Tasks.Task<InvoiceResponse> GetInvoiceByExternalIdAsync(Guid firmId, string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get invoice by external_id
        /// </summary>
        /// <remarks>
        /// Get an invoice for a firm by the external_id.  NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact  with a unique id (external_id) that is meaningful for their system). 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceResponse>> GetInvoiceByExternalIdWithHttpInfoAsync(Guid firmId, string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a specified invoice by id.
        /// </summary>
        /// <remarks>
        /// Get a specified invoice by id.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceResponse</returns>
        System.Threading.Tasks.Task<InvoiceResponse> GetInvoiceByIdAsync(Guid invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a specified invoice by id.
        /// </summary>
        /// <remarks>
        /// Get a specified invoice by id.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceResponse>> GetInvoiceByIdWithHttpInfoAsync(Guid invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a matter statement
        /// </summary>
        /// <remarks>
        /// Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId"></param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatterStatement</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MatterStatement> GetMatterStatementAsync(Guid matterId, int? to = default(int?), int? from = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a matter statement
        /// </summary>
        /// <remarks>
        /// Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId"></param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatterStatement)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MatterStatement>> GetMatterStatementWithHttpInfoAsync(Guid matterId, int? to = default(int?), int? from = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Refund Details
        /// </summary>
        /// <remarks>
        /// Get refund details by Payment ID (UUID) and Artifact ID (UUID).  Both values can be found in the /transactions and /payouts responses. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">The ID of the firm</param>
        /// <param name="paymentId">Payment ID (UUID)</param>
        /// <param name="artifactId">Artifact ID (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefundResponse</returns>
        System.Threading.Tasks.Task<RefundResponse> GetRefundDetailsAsync(Guid firmId, Guid paymentId, Guid artifactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Refund Details
        /// </summary>
        /// <remarks>
        /// Get refund details by Payment ID (UUID) and Artifact ID (UUID).  Both values can be found in the /transactions and /payouts responses. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">The ID of the firm</param>
        /// <param name="paymentId">Payment ID (UUID)</param>
        /// <param name="artifactId">Artifact ID (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefundResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefundResponse>> GetRefundDetailsWithHttpInfoAsync(Guid firmId, Guid paymentId, Guid artifactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Trust Deposit by external_id
        /// </summary>
        /// <remarks>
        /// Get a trust deposit for a firm by the external_id. NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact with a unique id (external_id) that is meaningful for their system). 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrustDepositResponse</returns>
        System.Threading.Tasks.Task<TrustDepositResponse> GetTrustDepositByExternalIdAsync(Guid firmId, string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Trust Deposit by external_id
        /// </summary>
        /// <remarks>
        /// Get a trust deposit for a firm by the external_id. NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact with a unique id (external_id) that is meaningful for their system). 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrustDepositResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustDepositResponse>> GetTrustDepositByExternalIdWithHttpInfoAsync(Guid firmId, string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Trust Deposit by id.
        /// </summary>
        /// <remarks>
        /// Get a Trust Deposit by the specified trust_deposit_id.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrustDepositResponse</returns>
        System.Threading.Tasks.Task<TrustDepositResponse> GetTrustDepositByIdAsync(Guid trustDepositId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Trust Deposit by id.
        /// </summary>
        /// <remarks>
        /// Get a Trust Deposit by the specified trust_deposit_id.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrustDepositResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustDepositResponse>> GetTrustDepositByIdWithHttpInfoAsync(Guid trustDepositId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Confirm a pending charge payment.
        /// </summary>
        /// <remarks>
        /// confirm the payment of a pending charge using the provided charge_id and payment_id
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="chargeId"></param>
        /// <param name="paymentId"></param>
        /// <param name="postConfirmChargePaymentRequest">POST Body contains optional Metadata and Debtor info to apply to the charge. Warning, will replace the charge&#39;s existing metadata. Debtor external_id can not be updated at this point in the flow and will be ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargePaymentDetails</returns>
        System.Threading.Tasks.Task<ChargePaymentDetails> PostConfirmChargePaymentAsync(Guid firmId, Guid chargeId, Guid paymentId, PostConfirmChargePaymentRequest postConfirmChargePaymentRequest = default(PostConfirmChargePaymentRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Confirm a pending charge payment.
        /// </summary>
        /// <remarks>
        /// confirm the payment of a pending charge using the provided charge_id and payment_id
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="chargeId"></param>
        /// <param name="paymentId"></param>
        /// <param name="postConfirmChargePaymentRequest">POST Body contains optional Metadata and Debtor info to apply to the charge. Warning, will replace the charge&#39;s existing metadata. Debtor external_id can not be updated at this point in the flow and will be ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargePaymentDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargePaymentDetails>> PostConfirmChargePaymentWithHttpInfoAsync(Guid firmId, Guid chargeId, Guid paymentId, PostConfirmChargePaymentRequest postConfirmChargePaymentRequest = default(PostConfirmChargePaymentRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Record external payment.
        /// </summary>
        /// <remarks>
        /// If a payment is made towards an artifact (invoice, trust deposit) outside of FeeWise, it should be recorded using this endpoint. This will be recorded as a payment against the artifact and change the amount_due. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPayment">External payment details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExternalPaymentResponse</returns>
        System.Threading.Tasks.Task<ExternalPaymentResponse> RecordExternalPaymentAsync(ExternalPayment externalPayment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Record external payment.
        /// </summary>
        /// <remarks>
        /// If a payment is made towards an artifact (invoice, trust deposit) outside of FeeWise, it should be recorded using this endpoint. This will be recorded as a payment against the artifact and change the amount_due. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPayment">External payment details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExternalPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalPaymentResponse>> RecordExternalPaymentWithHttpInfoAsync(ExternalPayment externalPayment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the settlement account for unpaid artifacts.
        /// </summary>
        /// <remarks>
        /// Swaps the settlement account id on all artifacts with the given artifact type.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="settlementAccountId"></param>
        /// <param name="updateArtifactAccountRequest">Contains the type of the artifact and the ID of the account the artifacts should be paid to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatedCount</returns>
        System.Threading.Tasks.Task<UpdatedCount> UpdateArtifactAccountAsync(Guid firmId, Guid settlementAccountId, UpdateArtifactAccountRequest updateArtifactAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the settlement account for unpaid artifacts.
        /// </summary>
        /// <remarks>
        /// Swaps the settlement account id on all artifacts with the given artifact type.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="settlementAccountId"></param>
        /// <param name="updateArtifactAccountRequest">Contains the type of the artifact and the ID of the account the artifacts should be paid to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatedCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedCount>> UpdateArtifactAccountWithHttpInfoAsync(Guid firmId, Guid settlementAccountId, UpdateArtifactAccountRequest updateArtifactAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the payment redirect URL for an artifact
        /// </summary>
        /// <remarks>
        /// Update the optional URL the payer will be redirected to after payment.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactId"></param>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArtifactResponse</returns>
        System.Threading.Tasks.Task<ArtifactResponse> UpdateArtifactRedirectURLAsync(Guid artifactId, Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the payment redirect URL for an artifact
        /// </summary>
        /// <remarks>
        /// Update the optional URL the payer will be redirected to after payment.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactId"></param>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArtifactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArtifactResponse>> UpdateArtifactRedirectURLWithHttpInfoAsync(Guid artifactId, Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApi : IPaymentsApiSync, IPaymentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentsApi : IPaymentsApi
    {
        private FeeWise.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(string basePath)
        {
            this.Configuration = FeeWise.Client.Configuration.MergeConfigurations(
                FeeWise.Client.GlobalConfiguration.Instance,
                new FeeWise.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FeeWise.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsApi(FeeWise.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FeeWise.Client.Configuration.MergeConfigurations(
                FeeWise.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FeeWise.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PaymentsApi(FeeWise.Client.ISynchronousClient client, FeeWise.Client.IAsynchronousClient asyncClient, FeeWise.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FeeWise.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FeeWise.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FeeWise.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FeeWise.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FeeWise.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adjust an invoice. Adjust the invoice amount after the invoice has been created.  If an adjustment is for an invoice outside of FeeWise, it should be adjusted using this endpoint. If the invoice has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing invoice, the adjustment request will fail. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="adjustInvoiceAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvoiceResponse</returns>
        [Obsolete]
        public InvoiceResponse AdjustInvoiceAmount(Guid invoiceId, AdjustInvoiceAmountRequest adjustInvoiceAmountRequest, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<InvoiceResponse> localVarResponse = AdjustInvoiceAmountWithHttpInfo(invoiceId, adjustInvoiceAmountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adjust an invoice. Adjust the invoice amount after the invoice has been created.  If an adjustment is for an invoice outside of FeeWise, it should be adjusted using this endpoint. If the invoice has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing invoice, the adjustment request will fail. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="adjustInvoiceAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvoiceResponse</returns>
        [Obsolete]
        public FeeWise.Client.ApiResponse<InvoiceResponse> AdjustInvoiceAmountWithHttpInfo(Guid invoiceId, AdjustInvoiceAmountRequest adjustInvoiceAmountRequest, int operationIndex = 0)
        {
            // verify the required parameter 'adjustInvoiceAmountRequest' is set
            if (adjustInvoiceAmountRequest == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'adjustInvoiceAmountRequest' when calling PaymentsApi->AdjustInvoiceAmount");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoice_id", FeeWise.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            localVarRequestOptions.Data = adjustInvoiceAmountRequest;

            localVarRequestOptions.Operation = "PaymentsApi.AdjustInvoiceAmount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InvoiceResponse>("/api/v3/partner/invoices/{invoice_id}/adjust-amount", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdjustInvoiceAmount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adjust an invoice. Adjust the invoice amount after the invoice has been created.  If an adjustment is for an invoice outside of FeeWise, it should be adjusted using this endpoint. If the invoice has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing invoice, the adjustment request will fail. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="adjustInvoiceAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<InvoiceResponse> AdjustInvoiceAmountAsync(Guid invoiceId, AdjustInvoiceAmountRequest adjustInvoiceAmountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<InvoiceResponse> localVarResponse = await AdjustInvoiceAmountWithHttpInfoAsync(invoiceId, adjustInvoiceAmountRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adjust an invoice. Adjust the invoice amount after the invoice has been created.  If an adjustment is for an invoice outside of FeeWise, it should be adjusted using this endpoint. If the invoice has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing invoice, the adjustment request will fail. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="adjustInvoiceAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<InvoiceResponse>> AdjustInvoiceAmountWithHttpInfoAsync(Guid invoiceId, AdjustInvoiceAmountRequest adjustInvoiceAmountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'adjustInvoiceAmountRequest' is set
            if (adjustInvoiceAmountRequest == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'adjustInvoiceAmountRequest' when calling PaymentsApi->AdjustInvoiceAmount");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoice_id", FeeWise.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            localVarRequestOptions.Data = adjustInvoiceAmountRequest;

            localVarRequestOptions.Operation = "PaymentsApi.AdjustInvoiceAmount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InvoiceResponse>("/api/v3/partner/invoices/{invoice_id}/adjust-amount", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdjustInvoiceAmount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adjust an trust deposit. Adjust the trust deposit amount after the trust deposit has been created.  If an adjustment is for an trust deposit outside of FeeWise, it should be adjusted using this endpoint. If the trust deposit has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing trust deposit, the adjustment request will fail. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="adjustTrustDepositAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrustDepositResponse</returns>
        [Obsolete]
        public TrustDepositResponse AdjustTrustDepositAmount(Guid trustDepositId, AdjustTrustDepositAmountRequest adjustTrustDepositAmountRequest, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<TrustDepositResponse> localVarResponse = AdjustTrustDepositAmountWithHttpInfo(trustDepositId, adjustTrustDepositAmountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adjust an trust deposit. Adjust the trust deposit amount after the trust deposit has been created.  If an adjustment is for an trust deposit outside of FeeWise, it should be adjusted using this endpoint. If the trust deposit has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing trust deposit, the adjustment request will fail. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="adjustTrustDepositAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrustDepositResponse</returns>
        [Obsolete]
        public FeeWise.Client.ApiResponse<TrustDepositResponse> AdjustTrustDepositAmountWithHttpInfo(Guid trustDepositId, AdjustTrustDepositAmountRequest adjustTrustDepositAmountRequest, int operationIndex = 0)
        {
            // verify the required parameter 'adjustTrustDepositAmountRequest' is set
            if (adjustTrustDepositAmountRequest == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'adjustTrustDepositAmountRequest' when calling PaymentsApi->AdjustTrustDepositAmount");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trust_deposit_id", FeeWise.Client.ClientUtils.ParameterToString(trustDepositId)); // path parameter
            localVarRequestOptions.Data = adjustTrustDepositAmountRequest;

            localVarRequestOptions.Operation = "PaymentsApi.AdjustTrustDepositAmount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TrustDepositResponse>("/api/v3/partner/trust-deposits/{trust_deposit_id}/adjust-amount", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdjustTrustDepositAmount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adjust an trust deposit. Adjust the trust deposit amount after the trust deposit has been created.  If an adjustment is for an trust deposit outside of FeeWise, it should be adjusted using this endpoint. If the trust deposit has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing trust deposit, the adjustment request will fail. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="adjustTrustDepositAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrustDepositResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TrustDepositResponse> AdjustTrustDepositAmountAsync(Guid trustDepositId, AdjustTrustDepositAmountRequest adjustTrustDepositAmountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<TrustDepositResponse> localVarResponse = await AdjustTrustDepositAmountWithHttpInfoAsync(trustDepositId, adjustTrustDepositAmountRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adjust an trust deposit. Adjust the trust deposit amount after the trust deposit has been created.  If an adjustment is for an trust deposit outside of FeeWise, it should be adjusted using this endpoint. If the trust deposit has no payments, the total amount will be updated to the adjustment amount.  If a payment has already been made to the existing trust deposit, the adjustment request will fail. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="adjustTrustDepositAmountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrustDepositResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<TrustDepositResponse>> AdjustTrustDepositAmountWithHttpInfoAsync(Guid trustDepositId, AdjustTrustDepositAmountRequest adjustTrustDepositAmountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'adjustTrustDepositAmountRequest' is set
            if (adjustTrustDepositAmountRequest == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'adjustTrustDepositAmountRequest' when calling PaymentsApi->AdjustTrustDepositAmount");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trust_deposit_id", FeeWise.Client.ClientUtils.ParameterToString(trustDepositId)); // path parameter
            localVarRequestOptions.Data = adjustTrustDepositAmountRequest;

            localVarRequestOptions.Operation = "PaymentsApi.AdjustTrustDepositAmount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TrustDepositResponse>("/api/v3/partner/trust-deposits/{trust_deposit_id}/adjust-amount", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdjustTrustDepositAmount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Charge Create a charge for a firm. The firm can then send the returned URI to their customer, for payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargeResponse</returns>
        public ChargeResponse CreateCharge(Guid firmId, Charge charge, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<ChargeResponse> localVarResponse = CreateChargeWithHttpInfo(firmId, charge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Charge Create a charge for a firm. The firm can then send the returned URI to their customer, for payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargeResponse</returns>
        public FeeWise.Client.ApiResponse<ChargeResponse> CreateChargeWithHttpInfo(Guid firmId, Charge charge, int operationIndex = 0)
        {
            // verify the required parameter 'charge' is set
            if (charge == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'charge' when calling PaymentsApi->CreateCharge");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = charge;

            localVarRequestOptions.Operation = "PaymentsApi.CreateCharge";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChargeResponse>("/api/v3/partner/firms/{firm_id}/charges", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCharge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Charge Create a charge for a firm. The firm can then send the returned URI to their customer, for payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargeResponse</returns>
        public async System.Threading.Tasks.Task<ChargeResponse> CreateChargeAsync(Guid firmId, Charge charge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<ChargeResponse> localVarResponse = await CreateChargeWithHttpInfoAsync(firmId, charge, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Charge Create a charge for a firm. The firm can then send the returned URI to their customer, for payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargeResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<ChargeResponse>> CreateChargeWithHttpInfoAsync(Guid firmId, Charge charge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'charge' is set
            if (charge == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'charge' when calling PaymentsApi->CreateCharge");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = charge;

            localVarRequestOptions.Operation = "PaymentsApi.CreateCharge";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChargeResponse>("/api/v3/partner/firms/{firm_id}/charges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCharge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DEPRECATED - Use /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token} endpoint instead Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargeAndPayResponse</returns>
        [Obsolete]
        public ChargeAndPayResponse CreateChargeAndPayWithCustomerPaymentToken(Guid paymentToken, Guid firmId, Charge charge, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<ChargeAndPayResponse> localVarResponse = CreateChargeAndPayWithCustomerPaymentTokenWithHttpInfo(paymentToken, firmId, charge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DEPRECATED - Use /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token} endpoint instead Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargeAndPayResponse</returns>
        [Obsolete]
        public FeeWise.Client.ApiResponse<ChargeAndPayResponse> CreateChargeAndPayWithCustomerPaymentTokenWithHttpInfo(Guid paymentToken, Guid firmId, Charge charge, int operationIndex = 0)
        {
            // verify the required parameter 'charge' is set
            if (charge == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'charge' when calling PaymentsApi->CreateChargeAndPayWithCustomerPaymentToken");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("payment_token", FeeWise.Client.ClientUtils.ParameterToString(paymentToken)); // path parameter
            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = charge;

            localVarRequestOptions.Operation = "PaymentsApi.CreateChargeAndPayWithCustomerPaymentToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChargeAndPayResponse>("/api/v3/partner/firms/{firm_id}/charges/payment_token/{payment_token}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateChargeAndPayWithCustomerPaymentToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DEPRECATED - Use /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token} endpoint instead Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargeAndPayResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ChargeAndPayResponse> CreateChargeAndPayWithCustomerPaymentTokenAsync(Guid paymentToken, Guid firmId, Charge charge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<ChargeAndPayResponse> localVarResponse = await CreateChargeAndPayWithCustomerPaymentTokenWithHttpInfoAsync(paymentToken, firmId, charge, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DEPRECATED - Use /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token} endpoint instead Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="charge">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargeAndPayResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<ChargeAndPayResponse>> CreateChargeAndPayWithCustomerPaymentTokenWithHttpInfoAsync(Guid paymentToken, Guid firmId, Charge charge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'charge' is set
            if (charge == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'charge' when calling PaymentsApi->CreateChargeAndPayWithCustomerPaymentToken");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("payment_token", FeeWise.Client.ClientUtils.ParameterToString(paymentToken)); // path parameter
            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = charge;

            localVarRequestOptions.Operation = "PaymentsApi.CreateChargeAndPayWithCustomerPaymentToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChargeAndPayResponse>("/api/v3/partner/firms/{firm_id}/charges/payment_token/{payment_token}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateChargeAndPayWithCustomerPaymentToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Charge, and pay directly. Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="createChargePaymentRequest">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargePaymentDetails</returns>
        public ChargePaymentDetails CreateChargePayment(Guid paymentToken, Guid firmId, CreateChargePaymentRequest createChargePaymentRequest, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<ChargePaymentDetails> localVarResponse = CreateChargePaymentWithHttpInfo(paymentToken, firmId, createChargePaymentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Charge, and pay directly. Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="createChargePaymentRequest">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargePaymentDetails</returns>
        public FeeWise.Client.ApiResponse<ChargePaymentDetails> CreateChargePaymentWithHttpInfo(Guid paymentToken, Guid firmId, CreateChargePaymentRequest createChargePaymentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createChargePaymentRequest' is set
            if (createChargePaymentRequest == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'createChargePaymentRequest' when calling PaymentsApi->CreateChargePayment");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("payment_token", FeeWise.Client.ClientUtils.ParameterToString(paymentToken)); // path parameter
            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = createChargePaymentRequest;

            localVarRequestOptions.Operation = "PaymentsApi.CreateChargePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChargePaymentDetails>("/api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateChargePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Charge, and pay directly. Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="createChargePaymentRequest">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargePaymentDetails</returns>
        public async System.Threading.Tasks.Task<ChargePaymentDetails> CreateChargePaymentAsync(Guid paymentToken, Guid firmId, CreateChargePaymentRequest createChargePaymentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<ChargePaymentDetails> localVarResponse = await CreateChargePaymentWithHttpInfoAsync(paymentToken, firmId, createChargePaymentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Charge, and pay directly. Create a charge (and pay for it) for a firm, using an existing customer payment token.  A list of customer payment tokens can be retrieved from the &#x60;/customers&#x60; endpoint.  NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentToken"></param>
        /// <param name="firmId"></param>
        /// <param name="createChargePaymentRequest">Charge details, using an existing customer payment token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargePaymentDetails)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<ChargePaymentDetails>> CreateChargePaymentWithHttpInfoAsync(Guid paymentToken, Guid firmId, CreateChargePaymentRequest createChargePaymentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createChargePaymentRequest' is set
            if (createChargePaymentRequest == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'createChargePaymentRequest' when calling PaymentsApi->CreateChargePayment");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("payment_token", FeeWise.Client.ClientUtils.ParameterToString(paymentToken)); // path parameter
            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = createChargePaymentRequest;

            localVarRequestOptions.Operation = "PaymentsApi.CreateChargePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChargePaymentDetails>("/api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateChargePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Invoice Create an invoice for a firm.   NB the fields &#x60;invoice_id&#x60;, &#x60;payment_uri&#x60; and &#x60;status&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the invoice has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching invoice will be updated instead. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice">Invoice details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvoiceResponse</returns>
        public InvoiceResponse CreateInvoice(Invoice invoice, string sourceId = default(string), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<InvoiceResponse> localVarResponse = CreateInvoiceWithHttpInfo(invoice, sourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Invoice Create an invoice for a firm.   NB the fields &#x60;invoice_id&#x60;, &#x60;payment_uri&#x60; and &#x60;status&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the invoice has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching invoice will be updated instead. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice">Invoice details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvoiceResponse</returns>
        public FeeWise.Client.ApiResponse<InvoiceResponse> CreateInvoiceWithHttpInfo(Invoice invoice, string sourceId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'invoice' is set
            if (invoice == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'invoice' when calling PaymentsApi->CreateInvoice");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sourceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("source-id", FeeWise.Client.ClientUtils.ParameterToString(sourceId)); // header parameter
            }
            localVarRequestOptions.Data = invoice;

            localVarRequestOptions.Operation = "PaymentsApi.CreateInvoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (FirmAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-FIRM-ID", this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InvoiceResponse>("/api/v3/partner/invoices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Invoice Create an invoice for a firm.   NB the fields &#x60;invoice_id&#x60;, &#x60;payment_uri&#x60; and &#x60;status&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the invoice has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching invoice will be updated instead. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice">Invoice details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceResponse</returns>
        public async System.Threading.Tasks.Task<InvoiceResponse> CreateInvoiceAsync(Invoice invoice, string sourceId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<InvoiceResponse> localVarResponse = await CreateInvoiceWithHttpInfoAsync(invoice, sourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Invoice Create an invoice for a firm.   NB the fields &#x60;invoice_id&#x60;, &#x60;payment_uri&#x60; and &#x60;status&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the invoice has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching invoice will be updated instead. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice">Invoice details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<InvoiceResponse>> CreateInvoiceWithHttpInfoAsync(Invoice invoice, string sourceId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'invoice' is set
            if (invoice == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'invoice' when calling PaymentsApi->CreateInvoice");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sourceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("source-id", FeeWise.Client.ClientUtils.ParameterToString(sourceId)); // header parameter
            }
            localVarRequestOptions.Data = invoice;

            localVarRequestOptions.Operation = "PaymentsApi.CreateInvoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (FirmAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-FIRM-ID", this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InvoiceResponse>("/api/v3/partner/invoices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a matter Create a matter, with all matter information, debtor details and artifacts, invoice or trust deposit. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="matterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatterResponse</returns>
        public MatterResponse CreateMatter(string sourceId = default(string), MatterRequest matterRequest = default(MatterRequest), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<MatterResponse> localVarResponse = CreateMatterWithHttpInfo(sourceId, matterRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a matter Create a matter, with all matter information, debtor details and artifacts, invoice or trust deposit. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="matterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatterResponse</returns>
        public FeeWise.Client.ApiResponse<MatterResponse> CreateMatterWithHttpInfo(string sourceId = default(string), MatterRequest matterRequest = default(MatterRequest), int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sourceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("source-id", FeeWise.Client.ClientUtils.ParameterToString(sourceId)); // header parameter
            }
            localVarRequestOptions.Data = matterRequest;

            localVarRequestOptions.Operation = "PaymentsApi.CreateMatter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MatterResponse>("/api/v3/partner/matters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMatter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a matter Create a matter, with all matter information, debtor details and artifacts, invoice or trust deposit. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="matterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatterResponse</returns>
        public async System.Threading.Tasks.Task<MatterResponse> CreateMatterAsync(string sourceId = default(string), MatterRequest matterRequest = default(MatterRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<MatterResponse> localVarResponse = await CreateMatterWithHttpInfoAsync(sourceId, matterRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a matter Create a matter, with all matter information, debtor details and artifacts, invoice or trust deposit. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="matterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatterResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<MatterResponse>> CreateMatterWithHttpInfoAsync(string sourceId = default(string), MatterRequest matterRequest = default(MatterRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sourceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("source-id", FeeWise.Client.ClientUtils.ParameterToString(sourceId)); // header parameter
            }
            localVarRequestOptions.Data = matterRequest;

            localVarRequestOptions.Operation = "PaymentsApi.CreateMatter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MatterResponse>("/api/v3/partner/matters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMatter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create split charges, each charge is distributed to its own settlement account. Create multiple charges for a firm, that can be paid in a single payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the split charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="splitCharge">Split Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SplitChargesResponse</returns>
        public SplitChargesResponse CreateSplitCharge(Guid firmId, SplitCharge splitCharge, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<SplitChargesResponse> localVarResponse = CreateSplitChargeWithHttpInfo(firmId, splitCharge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create split charges, each charge is distributed to its own settlement account. Create multiple charges for a firm, that can be paid in a single payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the split charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="splitCharge">Split Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SplitChargesResponse</returns>
        public FeeWise.Client.ApiResponse<SplitChargesResponse> CreateSplitChargeWithHttpInfo(Guid firmId, SplitCharge splitCharge, int operationIndex = 0)
        {
            // verify the required parameter 'splitCharge' is set
            if (splitCharge == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'splitCharge' when calling PaymentsApi->CreateSplitCharge");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = splitCharge;

            localVarRequestOptions.Operation = "PaymentsApi.CreateSplitCharge";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SplitChargesResponse>("/api/v3/partner/firms/{firm_id}/charges/split", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSplitCharge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create split charges, each charge is distributed to its own settlement account. Create multiple charges for a firm, that can be paid in a single payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the split charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="splitCharge">Split Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SplitChargesResponse</returns>
        public async System.Threading.Tasks.Task<SplitChargesResponse> CreateSplitChargeAsync(Guid firmId, SplitCharge splitCharge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<SplitChargesResponse> localVarResponse = await CreateSplitChargeWithHttpInfoAsync(firmId, splitCharge, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create split charges, each charge is distributed to its own settlement account. Create multiple charges for a firm, that can be paid in a single payment. NB the fields &#x60;charge_id&#x60;, and &#x60;payment_uri&#x60; must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the split charge has been created and will be available in the response. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="splitCharge">Split Charge details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SplitChargesResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<SplitChargesResponse>> CreateSplitChargeWithHttpInfoAsync(Guid firmId, SplitCharge splitCharge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'splitCharge' is set
            if (splitCharge == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'splitCharge' when calling PaymentsApi->CreateSplitCharge");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = splitCharge;

            localVarRequestOptions.Operation = "PaymentsApi.CreateSplitCharge";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SplitChargesResponse>("/api/v3/partner/firms/{firm_id}/charges/split", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSplitCharge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Trust Deposit Create a trust deposit for a channel partner.   NB the fields trust_deposit_id, payment_uri and status must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the trust deposit has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching trust deposit will be updated instead. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDeposit">Trust deposit details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrustDepositResponse</returns>
        public TrustDepositResponse CreateTrustDeposit(TrustDeposit trustDeposit, string sourceId = default(string), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<TrustDepositResponse> localVarResponse = CreateTrustDepositWithHttpInfo(trustDeposit, sourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Trust Deposit Create a trust deposit for a channel partner.   NB the fields trust_deposit_id, payment_uri and status must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the trust deposit has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching trust deposit will be updated instead. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDeposit">Trust deposit details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrustDepositResponse</returns>
        public FeeWise.Client.ApiResponse<TrustDepositResponse> CreateTrustDepositWithHttpInfo(TrustDeposit trustDeposit, string sourceId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'trustDeposit' is set
            if (trustDeposit == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'trustDeposit' when calling PaymentsApi->CreateTrustDeposit");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sourceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("source-id", FeeWise.Client.ClientUtils.ParameterToString(sourceId)); // header parameter
            }
            localVarRequestOptions.Data = trustDeposit;

            localVarRequestOptions.Operation = "PaymentsApi.CreateTrustDeposit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TrustDepositResponse>("/api/v3/partner/trust-deposits", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTrustDeposit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Trust Deposit Create a trust deposit for a channel partner.   NB the fields trust_deposit_id, payment_uri and status must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the trust deposit has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching trust deposit will be updated instead. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDeposit">Trust deposit details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrustDepositResponse</returns>
        public async System.Threading.Tasks.Task<TrustDepositResponse> CreateTrustDepositAsync(TrustDeposit trustDeposit, string sourceId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<TrustDepositResponse> localVarResponse = await CreateTrustDepositWithHttpInfoAsync(trustDeposit, sourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Trust Deposit Create a trust deposit for a channel partner.   NB the fields trust_deposit_id, payment_uri and status must NOT be supplied. If supplied, BadResponse will be returned.   These are populated once the trust deposit has been created and will be available in the response. The external_id is a unique field, if the same external_id is provided, the matching trust deposit will be updated instead. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDeposit">Trust deposit details</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrustDepositResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<TrustDepositResponse>> CreateTrustDepositWithHttpInfoAsync(TrustDeposit trustDeposit, string sourceId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trustDeposit' is set
            if (trustDeposit == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'trustDeposit' when calling PaymentsApi->CreateTrustDeposit");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sourceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("source-id", FeeWise.Client.ClientUtils.ParameterToString(sourceId)); // header parameter
            }
            localVarRequestOptions.Data = trustDeposit;

            localVarRequestOptions.Operation = "PaymentsApi.CreateTrustDeposit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TrustDepositResponse>("/api/v3/partner/trust-deposits", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTrustDeposit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DEPRECATED use /transactions - Search for payments for the channel partner Search for payments for a channel partner..         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Get a specific payment. If this is specified, other query params should not be specified  and will result in a BadRequest if the are.  (optional)</param>
        /// <param name="artifactId">Get payments only for the specified artifact (Invoice/Trust Desposit)  (optional)</param>
        /// <param name="firmId">Get payments going to a specific firm  (optional)</param>
        /// <param name="since">Return payments sent since this timestamp. If not supplied, payments for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payments</returns>
        [Obsolete]
        public Payments GetChannelPartnerPayments(Guid? paymentId = default(Guid?), Guid? artifactId = default(Guid?), Guid? firmId = default(Guid?), DateTime? since = default(DateTime?), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<Payments> localVarResponse = GetChannelPartnerPaymentsWithHttpInfo(paymentId, artifactId, firmId, since);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DEPRECATED use /transactions - Search for payments for the channel partner Search for payments for a channel partner..         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Get a specific payment. If this is specified, other query params should not be specified  and will result in a BadRequest if the are.  (optional)</param>
        /// <param name="artifactId">Get payments only for the specified artifact (Invoice/Trust Desposit)  (optional)</param>
        /// <param name="firmId">Get payments going to a specific firm  (optional)</param>
        /// <param name="since">Return payments sent since this timestamp. If not supplied, payments for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payments</returns>
        [Obsolete]
        public FeeWise.Client.ApiResponse<Payments> GetChannelPartnerPaymentsWithHttpInfo(Guid? paymentId = default(Guid?), Guid? artifactId = default(Guid?), Guid? firmId = default(Guid?), DateTime? since = default(DateTime?), int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "payment_id", paymentId));
            }
            if (artifactId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "artifact_id", artifactId));
            }
            if (firmId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "firm_id", firmId));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }

            localVarRequestOptions.Operation = "PaymentsApi.GetChannelPartnerPayments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Payments>("/api/v3/partner/payments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelPartnerPayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DEPRECATED use /transactions - Search for payments for the channel partner Search for payments for a channel partner..         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Get a specific payment. If this is specified, other query params should not be specified  and will result in a BadRequest if the are.  (optional)</param>
        /// <param name="artifactId">Get payments only for the specified artifact (Invoice/Trust Desposit)  (optional)</param>
        /// <param name="firmId">Get payments going to a specific firm  (optional)</param>
        /// <param name="since">Return payments sent since this timestamp. If not supplied, payments for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payments</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Payments> GetChannelPartnerPaymentsAsync(Guid? paymentId = default(Guid?), Guid? artifactId = default(Guid?), Guid? firmId = default(Guid?), DateTime? since = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<Payments> localVarResponse = await GetChannelPartnerPaymentsWithHttpInfoAsync(paymentId, artifactId, firmId, since, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DEPRECATED use /transactions - Search for payments for the channel partner Search for payments for a channel partner..         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Get a specific payment. If this is specified, other query params should not be specified  and will result in a BadRequest if the are.  (optional)</param>
        /// <param name="artifactId">Get payments only for the specified artifact (Invoice/Trust Desposit)  (optional)</param>
        /// <param name="firmId">Get payments going to a specific firm  (optional)</param>
        /// <param name="since">Return payments sent since this timestamp. If not supplied, payments for the last 24 hours are returned.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<Payments>> GetChannelPartnerPaymentsWithHttpInfoAsync(Guid? paymentId = default(Guid?), Guid? artifactId = default(Guid?), Guid? firmId = default(Guid?), DateTime? since = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "payment_id", paymentId));
            }
            if (artifactId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "artifact_id", artifactId));
            }
            if (firmId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "firm_id", firmId));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }

            localVarRequestOptions.Operation = "PaymentsApi.GetChannelPartnerPayments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Payments>("/api/v3/partner/payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelPartnerPayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a matter debtor statement Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="matterId"></param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="refArtifactId">Optional referring artifact id.  If provided, details of the originating artifact, e.g. invoice or trust deposit, may be displayed on the payment pages.   (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatterStatement</returns>
        public MatterStatement GetDebtorMatterStatement(Guid debtorId, Guid matterId, string sourceId = default(string), Guid? refArtifactId = default(Guid?), int? to = default(int?), int? from = default(int?), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<MatterStatement> localVarResponse = GetDebtorMatterStatementWithHttpInfo(debtorId, matterId, sourceId, refArtifactId, to, from);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a matter debtor statement Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="matterId"></param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="refArtifactId">Optional referring artifact id.  If provided, details of the originating artifact, e.g. invoice or trust deposit, may be displayed on the payment pages.   (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatterStatement</returns>
        public FeeWise.Client.ApiResponse<MatterStatement> GetDebtorMatterStatementWithHttpInfo(Guid debtorId, Guid matterId, string sourceId = default(string), Guid? refArtifactId = default(Guid?), int? to = default(int?), int? from = default(int?), int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("debtor_id", FeeWise.Client.ClientUtils.ParameterToString(debtorId)); // path parameter
            localVarRequestOptions.PathParameters.Add("matter_id", FeeWise.Client.ClientUtils.ParameterToString(matterId)); // path parameter
            if (refArtifactId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "ref_artifact_id", refArtifactId));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (sourceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("source-id", FeeWise.Client.ClientUtils.ParameterToString(sourceId)); // header parameter
            }

            localVarRequestOptions.Operation = "PaymentsApi.GetDebtorMatterStatement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MatterStatement>("/api/v3/partner/statements/debtors/{debtor_id}/matters/{matter_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebtorMatterStatement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a matter debtor statement Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="matterId"></param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="refArtifactId">Optional referring artifact id.  If provided, details of the originating artifact, e.g. invoice or trust deposit, may be displayed on the payment pages.   (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatterStatement</returns>
        public async System.Threading.Tasks.Task<MatterStatement> GetDebtorMatterStatementAsync(Guid debtorId, Guid matterId, string sourceId = default(string), Guid? refArtifactId = default(Guid?), int? to = default(int?), int? from = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<MatterStatement> localVarResponse = await GetDebtorMatterStatementWithHttpInfoAsync(debtorId, matterId, sourceId, refArtifactId, to, from, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a matter debtor statement Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="matterId"></param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="refArtifactId">Optional referring artifact id.  If provided, details of the originating artifact, e.g. invoice or trust deposit, may be displayed on the payment pages.   (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatterStatement)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<MatterStatement>> GetDebtorMatterStatementWithHttpInfoAsync(Guid debtorId, Guid matterId, string sourceId = default(string), Guid? refArtifactId = default(Guid?), int? to = default(int?), int? from = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("debtor_id", FeeWise.Client.ClientUtils.ParameterToString(debtorId)); // path parameter
            localVarRequestOptions.PathParameters.Add("matter_id", FeeWise.Client.ClientUtils.ParameterToString(matterId)); // path parameter
            if (refArtifactId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "ref_artifact_id", refArtifactId));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (sourceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("source-id", FeeWise.Client.ClientUtils.ParameterToString(sourceId)); // header parameter
            }

            localVarRequestOptions.Operation = "PaymentsApi.GetDebtorMatterStatement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MatterStatement>("/api/v3/partner/statements/debtors/{debtor_id}/matters/{matter_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebtorMatterStatement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a debtor statement Get a debtor statement that is payable by the client via the returned URL. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DebtorStatement</returns>
        public DebtorStatement GetDebtorStatement(Guid debtorId, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<DebtorStatement> localVarResponse = GetDebtorStatementWithHttpInfo(debtorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a debtor statement Get a debtor statement that is payable by the client via the returned URL. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DebtorStatement</returns>
        public FeeWise.Client.ApiResponse<DebtorStatement> GetDebtorStatementWithHttpInfo(Guid debtorId, int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("debtor_id", FeeWise.Client.ClientUtils.ParameterToString(debtorId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.GetDebtorStatement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DebtorStatement>("/api/v3/partner/statements/debtors/{debtor_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebtorStatement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a debtor statement Get a debtor statement that is payable by the client via the returned URL. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DebtorStatement</returns>
        public async System.Threading.Tasks.Task<DebtorStatement> GetDebtorStatementAsync(Guid debtorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<DebtorStatement> localVarResponse = await GetDebtorStatementWithHttpInfoAsync(debtorId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a debtor statement Get a debtor statement that is payable by the client via the returned URL. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debtorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DebtorStatement)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<DebtorStatement>> GetDebtorStatementWithHttpInfoAsync(Guid debtorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("debtor_id", FeeWise.Client.ClientUtils.ParameterToString(debtorId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.GetDebtorStatement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DebtorStatement>("/api/v3/partner/statements/debtors/{debtor_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebtorStatement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get invoice by external_id Get an invoice for a firm by the external_id.  NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact  with a unique id (external_id) that is meaningful for their system). 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvoiceResponse</returns>
        public InvoiceResponse GetInvoiceByExternalId(Guid firmId, string externalId, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<InvoiceResponse> localVarResponse = GetInvoiceByExternalIdWithHttpInfo(firmId, externalId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get invoice by external_id Get an invoice for a firm by the external_id.  NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact  with a unique id (external_id) that is meaningful for their system). 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvoiceResponse</returns>
        public FeeWise.Client.ApiResponse<InvoiceResponse> GetInvoiceByExternalIdWithHttpInfo(Guid firmId, string externalId, int operationIndex = 0)
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'externalId' when calling PaymentsApi->GetInvoiceByExternalId");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("external_id", FeeWise.Client.ClientUtils.ParameterToString(externalId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.GetInvoiceByExternalId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InvoiceResponse>("/api/v3/partner/invoices/firm/{firm_id}/{external_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceByExternalId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get invoice by external_id Get an invoice for a firm by the external_id.  NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact  with a unique id (external_id) that is meaningful for their system). 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceResponse</returns>
        public async System.Threading.Tasks.Task<InvoiceResponse> GetInvoiceByExternalIdAsync(Guid firmId, string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<InvoiceResponse> localVarResponse = await GetInvoiceByExternalIdWithHttpInfoAsync(firmId, externalId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get invoice by external_id Get an invoice for a firm by the external_id.  NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact  with a unique id (external_id) that is meaningful for their system). 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<InvoiceResponse>> GetInvoiceByExternalIdWithHttpInfoAsync(Guid firmId, string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'externalId' when calling PaymentsApi->GetInvoiceByExternalId");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("external_id", FeeWise.Client.ClientUtils.ParameterToString(externalId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.GetInvoiceByExternalId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InvoiceResponse>("/api/v3/partner/invoices/firm/{firm_id}/{external_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceByExternalId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specified invoice by id. Get a specified invoice by id.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvoiceResponse</returns>
        public InvoiceResponse GetInvoiceById(Guid invoiceId, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<InvoiceResponse> localVarResponse = GetInvoiceByIdWithHttpInfo(invoiceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specified invoice by id. Get a specified invoice by id.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvoiceResponse</returns>
        public FeeWise.Client.ApiResponse<InvoiceResponse> GetInvoiceByIdWithHttpInfo(Guid invoiceId, int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoice_id", FeeWise.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.GetInvoiceById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (FirmAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-FIRM-ID", this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InvoiceResponse>("/api/v3/partner/invoices/{invoice_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specified invoice by id. Get a specified invoice by id.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceResponse</returns>
        public async System.Threading.Tasks.Task<InvoiceResponse> GetInvoiceByIdAsync(Guid invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<InvoiceResponse> localVarResponse = await GetInvoiceByIdWithHttpInfoAsync(invoiceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specified invoice by id. Get a specified invoice by id.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<InvoiceResponse>> GetInvoiceByIdWithHttpInfoAsync(Guid invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoice_id", FeeWise.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.GetInvoiceById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (FirmAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-FIRM-ID", this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InvoiceResponse>("/api/v3/partner/invoices/{invoice_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a matter statement Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId"></param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatterStatement</returns>
        [Obsolete]
        public MatterStatement GetMatterStatement(Guid matterId, int? to = default(int?), int? from = default(int?), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<MatterStatement> localVarResponse = GetMatterStatementWithHttpInfo(matterId, to, from);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a matter statement Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId"></param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatterStatement</returns>
        [Obsolete]
        public FeeWise.Client.ApiResponse<MatterStatement> GetMatterStatementWithHttpInfo(Guid matterId, int? to = default(int?), int? from = default(int?), int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("matter_id", FeeWise.Client.ClientUtils.ParameterToString(matterId)); // path parameter
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }

            localVarRequestOptions.Operation = "PaymentsApi.GetMatterStatement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MatterStatement>("/api/v3/partner/statements/matters/{matter_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMatterStatement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a matter statement Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId"></param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatterStatement</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MatterStatement> GetMatterStatementAsync(Guid matterId, int? to = default(int?), int? from = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<MatterStatement> localVarResponse = await GetMatterStatementWithHttpInfoAsync(matterId, to, from, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a matter statement Get a matter statement that is payable by the client via the returned URL.   Note: &#x60;to&#x60; and &#x60;from&#x60; are not yet implemented. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId"></param>
        /// <param name="to"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatterStatement)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<MatterStatement>> GetMatterStatementWithHttpInfoAsync(Guid matterId, int? to = default(int?), int? from = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("matter_id", FeeWise.Client.ClientUtils.ParameterToString(matterId)); // path parameter
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }

            localVarRequestOptions.Operation = "PaymentsApi.GetMatterStatement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MatterStatement>("/api/v3/partner/statements/matters/{matter_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMatterStatement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Refund Details Get refund details by Payment ID (UUID) and Artifact ID (UUID).  Both values can be found in the /transactions and /payouts responses. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">The ID of the firm</param>
        /// <param name="paymentId">Payment ID (UUID)</param>
        /// <param name="artifactId">Artifact ID (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefundResponse</returns>
        public RefundResponse GetRefundDetails(Guid firmId, Guid paymentId, Guid artifactId, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<RefundResponse> localVarResponse = GetRefundDetailsWithHttpInfo(firmId, paymentId, artifactId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Refund Details Get refund details by Payment ID (UUID) and Artifact ID (UUID).  Both values can be found in the /transactions and /payouts responses. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">The ID of the firm</param>
        /// <param name="paymentId">Payment ID (UUID)</param>
        /// <param name="artifactId">Artifact ID (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefundResponse</returns>
        public FeeWise.Client.ApiResponse<RefundResponse> GetRefundDetailsWithHttpInfo(Guid firmId, Guid paymentId, Guid artifactId, int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "payment_id", paymentId));
            localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "artifact_id", artifactId));

            localVarRequestOptions.Operation = "PaymentsApi.GetRefundDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (FirmAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-FIRM-ID", this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RefundResponse>("/api/v3/partner/firms/{firm_id}/payments/refund/details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRefundDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Refund Details Get refund details by Payment ID (UUID) and Artifact ID (UUID).  Both values can be found in the /transactions and /payouts responses. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">The ID of the firm</param>
        /// <param name="paymentId">Payment ID (UUID)</param>
        /// <param name="artifactId">Artifact ID (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefundResponse</returns>
        public async System.Threading.Tasks.Task<RefundResponse> GetRefundDetailsAsync(Guid firmId, Guid paymentId, Guid artifactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<RefundResponse> localVarResponse = await GetRefundDetailsWithHttpInfoAsync(firmId, paymentId, artifactId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Refund Details Get refund details by Payment ID (UUID) and Artifact ID (UUID).  Both values can be found in the /transactions and /payouts responses. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">The ID of the firm</param>
        /// <param name="paymentId">Payment ID (UUID)</param>
        /// <param name="artifactId">Artifact ID (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefundResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<RefundResponse>> GetRefundDetailsWithHttpInfoAsync(Guid firmId, Guid paymentId, Guid artifactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "payment_id", paymentId));
            localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "artifact_id", artifactId));

            localVarRequestOptions.Operation = "PaymentsApi.GetRefundDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (FirmAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-FIRM-ID", this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RefundResponse>("/api/v3/partner/firms/{firm_id}/payments/refund/details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRefundDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Trust Deposit by external_id Get a trust deposit for a firm by the external_id. NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact with a unique id (external_id) that is meaningful for their system). 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrustDepositResponse</returns>
        public TrustDepositResponse GetTrustDepositByExternalId(Guid firmId, string externalId, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<TrustDepositResponse> localVarResponse = GetTrustDepositByExternalIdWithHttpInfo(firmId, externalId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Trust Deposit by external_id Get a trust deposit for a firm by the external_id. NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact with a unique id (external_id) that is meaningful for their system). 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrustDepositResponse</returns>
        public FeeWise.Client.ApiResponse<TrustDepositResponse> GetTrustDepositByExternalIdWithHttpInfo(Guid firmId, string externalId, int operationIndex = 0)
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'externalId' when calling PaymentsApi->GetTrustDepositByExternalId");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("external_id", FeeWise.Client.ClientUtils.ParameterToString(externalId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.GetTrustDepositByExternalId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TrustDepositResponse>("/api/v3/partner/trust-deposits/firm/{firm_id}/{external_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrustDepositByExternalId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Trust Deposit by external_id Get a trust deposit for a firm by the external_id. NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact with a unique id (external_id) that is meaningful for their system). 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrustDepositResponse</returns>
        public async System.Threading.Tasks.Task<TrustDepositResponse> GetTrustDepositByExternalIdAsync(Guid firmId, string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<TrustDepositResponse> localVarResponse = await GetTrustDepositByExternalIdWithHttpInfoAsync(firmId, externalId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Trust Deposit by external_id Get a trust deposit for a firm by the external_id. NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact with a unique id (external_id) that is meaningful for their system). 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="externalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrustDepositResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<TrustDepositResponse>> GetTrustDepositByExternalIdWithHttpInfoAsync(Guid firmId, string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'externalId' when calling PaymentsApi->GetTrustDepositByExternalId");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("external_id", FeeWise.Client.ClientUtils.ParameterToString(externalId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.GetTrustDepositByExternalId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TrustDepositResponse>("/api/v3/partner/trust-deposits/firm/{firm_id}/{external_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrustDepositByExternalId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Trust Deposit by id. Get a Trust Deposit by the specified trust_deposit_id.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrustDepositResponse</returns>
        public TrustDepositResponse GetTrustDepositById(Guid trustDepositId, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<TrustDepositResponse> localVarResponse = GetTrustDepositByIdWithHttpInfo(trustDepositId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Trust Deposit by id. Get a Trust Deposit by the specified trust_deposit_id.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrustDepositResponse</returns>
        public FeeWise.Client.ApiResponse<TrustDepositResponse> GetTrustDepositByIdWithHttpInfo(Guid trustDepositId, int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trust_deposit_id", FeeWise.Client.ClientUtils.ParameterToString(trustDepositId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.GetTrustDepositById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TrustDepositResponse>("/api/v3/partner/trust-deposits/{trust_deposit_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrustDepositById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Trust Deposit by id. Get a Trust Deposit by the specified trust_deposit_id.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrustDepositResponse</returns>
        public async System.Threading.Tasks.Task<TrustDepositResponse> GetTrustDepositByIdAsync(Guid trustDepositId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<TrustDepositResponse> localVarResponse = await GetTrustDepositByIdWithHttpInfoAsync(trustDepositId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Trust Deposit by id. Get a Trust Deposit by the specified trust_deposit_id.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustDepositId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrustDepositResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<TrustDepositResponse>> GetTrustDepositByIdWithHttpInfoAsync(Guid trustDepositId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trust_deposit_id", FeeWise.Client.ClientUtils.ParameterToString(trustDepositId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.GetTrustDepositById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TrustDepositResponse>("/api/v3/partner/trust-deposits/{trust_deposit_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrustDepositById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Confirm a pending charge payment. confirm the payment of a pending charge using the provided charge_id and payment_id
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="chargeId"></param>
        /// <param name="paymentId"></param>
        /// <param name="postConfirmChargePaymentRequest">POST Body contains optional Metadata and Debtor info to apply to the charge. Warning, will replace the charge&#39;s existing metadata. Debtor external_id can not be updated at this point in the flow and will be ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargePaymentDetails</returns>
        public ChargePaymentDetails PostConfirmChargePayment(Guid firmId, Guid chargeId, Guid paymentId, PostConfirmChargePaymentRequest postConfirmChargePaymentRequest = default(PostConfirmChargePaymentRequest), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<ChargePaymentDetails> localVarResponse = PostConfirmChargePaymentWithHttpInfo(firmId, chargeId, paymentId, postConfirmChargePaymentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm a pending charge payment. confirm the payment of a pending charge using the provided charge_id and payment_id
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="chargeId"></param>
        /// <param name="paymentId"></param>
        /// <param name="postConfirmChargePaymentRequest">POST Body contains optional Metadata and Debtor info to apply to the charge. Warning, will replace the charge&#39;s existing metadata. Debtor external_id can not be updated at this point in the flow and will be ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargePaymentDetails</returns>
        public FeeWise.Client.ApiResponse<ChargePaymentDetails> PostConfirmChargePaymentWithHttpInfo(Guid firmId, Guid chargeId, Guid paymentId, PostConfirmChargePaymentRequest postConfirmChargePaymentRequest = default(PostConfirmChargePaymentRequest), int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("charge_id", FeeWise.Client.ClientUtils.ParameterToString(chargeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_id", FeeWise.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.Data = postConfirmChargePaymentRequest;

            localVarRequestOptions.Operation = "PaymentsApi.PostConfirmChargePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChargePaymentDetails>("/api/v3/partner/firms/{firm_id}/charges/{charge_id}/payments/{payment_id}/confirm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostConfirmChargePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Confirm a pending charge payment. confirm the payment of a pending charge using the provided charge_id and payment_id
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="chargeId"></param>
        /// <param name="paymentId"></param>
        /// <param name="postConfirmChargePaymentRequest">POST Body contains optional Metadata and Debtor info to apply to the charge. Warning, will replace the charge&#39;s existing metadata. Debtor external_id can not be updated at this point in the flow and will be ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargePaymentDetails</returns>
        public async System.Threading.Tasks.Task<ChargePaymentDetails> PostConfirmChargePaymentAsync(Guid firmId, Guid chargeId, Guid paymentId, PostConfirmChargePaymentRequest postConfirmChargePaymentRequest = default(PostConfirmChargePaymentRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<ChargePaymentDetails> localVarResponse = await PostConfirmChargePaymentWithHttpInfoAsync(firmId, chargeId, paymentId, postConfirmChargePaymentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm a pending charge payment. confirm the payment of a pending charge using the provided charge_id and payment_id
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="chargeId"></param>
        /// <param name="paymentId"></param>
        /// <param name="postConfirmChargePaymentRequest">POST Body contains optional Metadata and Debtor info to apply to the charge. Warning, will replace the charge&#39;s existing metadata. Debtor external_id can not be updated at this point in the flow and will be ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargePaymentDetails)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<ChargePaymentDetails>> PostConfirmChargePaymentWithHttpInfoAsync(Guid firmId, Guid chargeId, Guid paymentId, PostConfirmChargePaymentRequest postConfirmChargePaymentRequest = default(PostConfirmChargePaymentRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("charge_id", FeeWise.Client.ClientUtils.ParameterToString(chargeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_id", FeeWise.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.Data = postConfirmChargePaymentRequest;

            localVarRequestOptions.Operation = "PaymentsApi.PostConfirmChargePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChargePaymentDetails>("/api/v3/partner/firms/{firm_id}/charges/{charge_id}/payments/{payment_id}/confirm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostConfirmChargePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Record external payment. If a payment is made towards an artifact (invoice, trust deposit) outside of FeeWise, it should be recorded using this endpoint. This will be recorded as a payment against the artifact and change the amount_due. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPayment">External payment details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExternalPaymentResponse</returns>
        public ExternalPaymentResponse RecordExternalPayment(ExternalPayment externalPayment, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<ExternalPaymentResponse> localVarResponse = RecordExternalPaymentWithHttpInfo(externalPayment);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Record external payment. If a payment is made towards an artifact (invoice, trust deposit) outside of FeeWise, it should be recorded using this endpoint. This will be recorded as a payment against the artifact and change the amount_due. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPayment">External payment details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExternalPaymentResponse</returns>
        public FeeWise.Client.ApiResponse<ExternalPaymentResponse> RecordExternalPaymentWithHttpInfo(ExternalPayment externalPayment, int operationIndex = 0)
        {
            // verify the required parameter 'externalPayment' is set
            if (externalPayment == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'externalPayment' when calling PaymentsApi->RecordExternalPayment");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = externalPayment;

            localVarRequestOptions.Operation = "PaymentsApi.RecordExternalPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ExternalPaymentResponse>("/api/v3/partner/payments/external", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordExternalPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Record external payment. If a payment is made towards an artifact (invoice, trust deposit) outside of FeeWise, it should be recorded using this endpoint. This will be recorded as a payment against the artifact and change the amount_due. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPayment">External payment details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExternalPaymentResponse</returns>
        public async System.Threading.Tasks.Task<ExternalPaymentResponse> RecordExternalPaymentAsync(ExternalPayment externalPayment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<ExternalPaymentResponse> localVarResponse = await RecordExternalPaymentWithHttpInfoAsync(externalPayment, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Record external payment. If a payment is made towards an artifact (invoice, trust deposit) outside of FeeWise, it should be recorded using this endpoint. This will be recorded as a payment against the artifact and change the amount_due. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPayment">External payment details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExternalPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<ExternalPaymentResponse>> RecordExternalPaymentWithHttpInfoAsync(ExternalPayment externalPayment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalPayment' is set
            if (externalPayment == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'externalPayment' when calling PaymentsApi->RecordExternalPayment");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = externalPayment;

            localVarRequestOptions.Operation = "PaymentsApi.RecordExternalPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ExternalPaymentResponse>("/api/v3/partner/payments/external", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordExternalPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the settlement account for unpaid artifacts. Swaps the settlement account id on all artifacts with the given artifact type.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="settlementAccountId"></param>
        /// <param name="updateArtifactAccountRequest">Contains the type of the artifact and the ID of the account the artifacts should be paid to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatedCount</returns>
        public UpdatedCount UpdateArtifactAccount(Guid firmId, Guid settlementAccountId, UpdateArtifactAccountRequest updateArtifactAccountRequest, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<UpdatedCount> localVarResponse = UpdateArtifactAccountWithHttpInfo(firmId, settlementAccountId, updateArtifactAccountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the settlement account for unpaid artifacts. Swaps the settlement account id on all artifacts with the given artifact type.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="settlementAccountId"></param>
        /// <param name="updateArtifactAccountRequest">Contains the type of the artifact and the ID of the account the artifacts should be paid to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatedCount</returns>
        public FeeWise.Client.ApiResponse<UpdatedCount> UpdateArtifactAccountWithHttpInfo(Guid firmId, Guid settlementAccountId, UpdateArtifactAccountRequest updateArtifactAccountRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateArtifactAccountRequest' is set
            if (updateArtifactAccountRequest == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'updateArtifactAccountRequest' when calling PaymentsApi->UpdateArtifactAccount");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("settlement_account_id", FeeWise.Client.ClientUtils.ParameterToString(settlementAccountId)); // path parameter
            localVarRequestOptions.Data = updateArtifactAccountRequest;

            localVarRequestOptions.Operation = "PaymentsApi.UpdateArtifactAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdatedCount>("/api/v3/partner/firms/{firm_id}/artifacts/settlement-account/{settlement_account_id}/replace", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateArtifactAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the settlement account for unpaid artifacts. Swaps the settlement account id on all artifacts with the given artifact type.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="settlementAccountId"></param>
        /// <param name="updateArtifactAccountRequest">Contains the type of the artifact and the ID of the account the artifacts should be paid to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatedCount</returns>
        public async System.Threading.Tasks.Task<UpdatedCount> UpdateArtifactAccountAsync(Guid firmId, Guid settlementAccountId, UpdateArtifactAccountRequest updateArtifactAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<UpdatedCount> localVarResponse = await UpdateArtifactAccountWithHttpInfoAsync(firmId, settlementAccountId, updateArtifactAccountRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the settlement account for unpaid artifacts. Swaps the settlement account id on all artifacts with the given artifact type.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="settlementAccountId"></param>
        /// <param name="updateArtifactAccountRequest">Contains the type of the artifact and the ID of the account the artifacts should be paid to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatedCount)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<UpdatedCount>> UpdateArtifactAccountWithHttpInfoAsync(Guid firmId, Guid settlementAccountId, UpdateArtifactAccountRequest updateArtifactAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateArtifactAccountRequest' is set
            if (updateArtifactAccountRequest == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'updateArtifactAccountRequest' when calling PaymentsApi->UpdateArtifactAccount");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("settlement_account_id", FeeWise.Client.ClientUtils.ParameterToString(settlementAccountId)); // path parameter
            localVarRequestOptions.Data = updateArtifactAccountRequest;

            localVarRequestOptions.Operation = "PaymentsApi.UpdateArtifactAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdatedCount>("/api/v3/partner/firms/{firm_id}/artifacts/settlement-account/{settlement_account_id}/replace", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateArtifactAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the payment redirect URL for an artifact Update the optional URL the payer will be redirected to after payment.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactId"></param>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArtifactResponse</returns>
        public ArtifactResponse UpdateArtifactRedirectURL(Guid artifactId, Guid firmId, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<ArtifactResponse> localVarResponse = UpdateArtifactRedirectURLWithHttpInfo(artifactId, firmId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the payment redirect URL for an artifact Update the optional URL the payer will be redirected to after payment.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactId"></param>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArtifactResponse</returns>
        public FeeWise.Client.ApiResponse<ArtifactResponse> UpdateArtifactRedirectURLWithHttpInfo(Guid artifactId, Guid firmId, int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("artifact_id", FeeWise.Client.ClientUtils.ParameterToString(artifactId)); // path parameter
            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.UpdateArtifactRedirectURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (FirmAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-FIRM-ID", this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ArtifactResponse>("/api/v3/partner/firms/{firm_id}/artifacts/{artifact_id}/update-redirect", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateArtifactRedirectURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the payment redirect URL for an artifact Update the optional URL the payer will be redirected to after payment.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactId"></param>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArtifactResponse</returns>
        public async System.Threading.Tasks.Task<ArtifactResponse> UpdateArtifactRedirectURLAsync(Guid artifactId, Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<ArtifactResponse> localVarResponse = await UpdateArtifactRedirectURLWithHttpInfoAsync(artifactId, firmId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the payment redirect URL for an artifact Update the optional URL the payer will be redirected to after payment.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactId"></param>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArtifactResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<ArtifactResponse>> UpdateArtifactRedirectURLWithHttpInfoAsync(Guid artifactId, Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("artifact_id", FeeWise.Client.ClientUtils.ParameterToString(artifactId)); // path parameter
            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.UpdateArtifactRedirectURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (FirmAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-FIRM-ID", this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ArtifactResponse>("/api/v3/partner/firms/{firm_id}/artifacts/{artifact_id}/update-redirect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateArtifactRedirectURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
