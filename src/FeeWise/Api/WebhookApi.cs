/*
 * FeeWise Partner API
 *
 * API for partners
 *
 * The version of the OpenAPI document: 0.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FeeWise.Client;
using FeeWise.Model;

namespace FeeWise.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// Create a webhook
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details. webhook_id must not be supplied. If it is, the POST will be considered a BadRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookResponse</returns>
        WebhookResponse CreateWebhook(Webhook webhook, int operationIndex = 0);

        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// Create a webhook
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details. webhook_id must not be supplied. If it is, the POST will be considered a BadRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        ApiResponse<WebhookResponse> CreateWebhookWithHttpInfo(Webhook webhook, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a webhook by id
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteWebhook(Guid webhookId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a webhook by id
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookWithHttpInfo(Guid webhookId, int operationIndex = 0);
        /// <summary>
        /// Get a list of event topics for the channel partner
        /// </summary>
        /// <remarks>
        /// All currently available event topics for the channel partner are returned.          The channel partner is derived from the PartnerAuth security context 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EventTopics</returns>
        EventTopics GetChannelPartnerEventTopics(int operationIndex = 0);

        /// <summary>
        /// Get a list of event topics for the channel partner
        /// </summary>
        /// <remarks>
        /// All currently available event topics for the channel partner are returned.          The channel partner is derived from the PartnerAuth security context 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EventTopics</returns>
        ApiResponse<EventTopics> GetChannelPartnerEventTopicsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get a list of events for the channel partner
        /// </summary>
        /// <remarks>
        /// Returns events for the channel partner matching the filter criteria.         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topic"> (optional)</param>
        /// <param name="sinceWebhookEventId">If supplied, all events since this webhook event was sent, are retrieved. The retrieved events are subject to the  other filter params (topic, status).   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="since">Return events sent since this timestamp. If not supplied, events for the last 24 hours are returned.   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="status">Webhook send status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Events</returns>
        Events GetChannelPartnerWebhookEvents(string topic = default(string), Guid? sinceWebhookEventId = default(Guid?), DateTime? since = default(DateTime?), WebhookSendStatus? status = default(WebhookSendStatus?), int operationIndex = 0);

        /// <summary>
        /// Get a list of events for the channel partner
        /// </summary>
        /// <remarks>
        /// Returns events for the channel partner matching the filter criteria.         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topic"> (optional)</param>
        /// <param name="sinceWebhookEventId">If supplied, all events since this webhook event was sent, are retrieved. The retrieved events are subject to the  other filter params (topic, status).   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="since">Return events sent since this timestamp. If not supplied, events for the last 24 hours are returned.   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="status">Webhook send status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Events</returns>
        ApiResponse<Events> GetChannelPartnerWebhookEventsWithHttpInfo(string topic = default(string), Guid? sinceWebhookEventId = default(Guid?), DateTime? since = default(DateTime?), WebhookSendStatus? status = default(WebhookSendStatus?), int operationIndex = 0);
        /// <summary>
        /// Get list of webhooks for the partner
        /// </summary>
        /// <remarks>
        /// Get list of webhooks for the partner
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookList</returns>
        WebhookList GetWebhooks(int operationIndex = 0);

        /// <summary>
        /// Get list of webhooks for the partner
        /// </summary>
        /// <remarks>
        /// Get list of webhooks for the partner
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookList</returns>
        ApiResponse<WebhookList> GetWebhooksWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Dummy receiver for webhooks.
        /// </summary>
        /// <remarks>
        /// This is a webhook receiver. Normally implemented by channel partners to receive webhooks
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookEvent">Webhook event.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ReceiveWebhook(WebhookEvent webhookEvent, int operationIndex = 0);

        /// <summary>
        /// Dummy receiver for webhooks.
        /// </summary>
        /// <remarks>
        /// This is a webhook receiver. Normally implemented by channel partners to receive webhooks
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookEvent">Webhook event.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReceiveWebhookWithHttpInfo(WebhookEvent webhookEvent, int operationIndex = 0);
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookResponse</returns>
        WebhookResponse UpdateWebhook(Webhook webhook, int operationIndex = 0);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        ApiResponse<WebhookResponse> UpdateWebhookWithHttpInfo(Webhook webhook, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// Create a webhook
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details. webhook_id must not be supplied. If it is, the POST will be considered a BadRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookResponse</returns>
        System.Threading.Tasks.Task<WebhookResponse> CreateWebhookAsync(Webhook webhook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// Create a webhook
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details. webhook_id must not be supplied. If it is, the POST will be considered a BadRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> CreateWebhookWithHttpInfoAsync(Webhook webhook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a webhook by id
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhookAsync(Guid webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a webhook by id
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookWithHttpInfoAsync(Guid webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of event topics for the channel partner
        /// </summary>
        /// <remarks>
        /// All currently available event topics for the channel partner are returned.          The channel partner is derived from the PartnerAuth security context 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventTopics</returns>
        System.Threading.Tasks.Task<EventTopics> GetChannelPartnerEventTopicsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of event topics for the channel partner
        /// </summary>
        /// <remarks>
        /// All currently available event topics for the channel partner are returned.          The channel partner is derived from the PartnerAuth security context 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventTopics)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventTopics>> GetChannelPartnerEventTopicsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of events for the channel partner
        /// </summary>
        /// <remarks>
        /// Returns events for the channel partner matching the filter criteria.         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topic"> (optional)</param>
        /// <param name="sinceWebhookEventId">If supplied, all events since this webhook event was sent, are retrieved. The retrieved events are subject to the  other filter params (topic, status).   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="since">Return events sent since this timestamp. If not supplied, events for the last 24 hours are returned.   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="status">Webhook send status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Events</returns>
        System.Threading.Tasks.Task<Events> GetChannelPartnerWebhookEventsAsync(string topic = default(string), Guid? sinceWebhookEventId = default(Guid?), DateTime? since = default(DateTime?), WebhookSendStatus? status = default(WebhookSendStatus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of events for the channel partner
        /// </summary>
        /// <remarks>
        /// Returns events for the channel partner matching the filter criteria.         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topic"> (optional)</param>
        /// <param name="sinceWebhookEventId">If supplied, all events since this webhook event was sent, are retrieved. The retrieved events are subject to the  other filter params (topic, status).   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="since">Return events sent since this timestamp. If not supplied, events for the last 24 hours are returned.   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="status">Webhook send status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Events)</returns>
        System.Threading.Tasks.Task<ApiResponse<Events>> GetChannelPartnerWebhookEventsWithHttpInfoAsync(string topic = default(string), Guid? sinceWebhookEventId = default(Guid?), DateTime? since = default(DateTime?), WebhookSendStatus? status = default(WebhookSendStatus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of webhooks for the partner
        /// </summary>
        /// <remarks>
        /// Get list of webhooks for the partner
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookList</returns>
        System.Threading.Tasks.Task<WebhookList> GetWebhooksAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of webhooks for the partner
        /// </summary>
        /// <remarks>
        /// Get list of webhooks for the partner
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookList)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookList>> GetWebhooksWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Dummy receiver for webhooks.
        /// </summary>
        /// <remarks>
        /// This is a webhook receiver. Normally implemented by channel partners to receive webhooks
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookEvent">Webhook event.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReceiveWebhookAsync(WebhookEvent webhookEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dummy receiver for webhooks.
        /// </summary>
        /// <remarks>
        /// This is a webhook receiver. Normally implemented by channel partners to receive webhooks
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookEvent">Webhook event.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReceiveWebhookWithHttpInfoAsync(WebhookEvent webhookEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookResponse</returns>
        System.Threading.Tasks.Task<WebhookResponse> UpdateWebhookAsync(Webhook webhook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> UpdateWebhookWithHttpInfoAsync(Webhook webhook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApi : IWebhookApiSync, IWebhookApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhookApi : IWebhookApi
    {
        private FeeWise.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookApi(string basePath)
        {
            this.Configuration = FeeWise.Client.Configuration.MergeConfigurations(
                FeeWise.Client.GlobalConfiguration.Instance,
                new FeeWise.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FeeWise.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhookApi(FeeWise.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FeeWise.Client.Configuration.MergeConfigurations(
                FeeWise.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FeeWise.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebhookApi(FeeWise.Client.ISynchronousClient client, FeeWise.Client.IAsynchronousClient asyncClient, FeeWise.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FeeWise.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FeeWise.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FeeWise.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FeeWise.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FeeWise.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a webhook Create a webhook
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details. webhook_id must not be supplied. If it is, the POST will be considered a BadRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookResponse</returns>
        public WebhookResponse CreateWebhook(Webhook webhook, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<WebhookResponse> localVarResponse = CreateWebhookWithHttpInfo(webhook);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a webhook Create a webhook
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details. webhook_id must not be supplied. If it is, the POST will be considered a BadRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        public FeeWise.Client.ApiResponse<WebhookResponse> CreateWebhookWithHttpInfo(Webhook webhook, int operationIndex = 0)
        {
            // verify the required parameter 'webhook' is set
            if (webhook == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'webhook' when calling WebhookApi->CreateWebhook");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/jsopn"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = webhook;

            localVarRequestOptions.Operation = "WebhookApi.CreateWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WebhookResponse>("/api/v3/partner/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a webhook Create a webhook
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details. webhook_id must not be supplied. If it is, the POST will be considered a BadRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookResponse</returns>
        public async System.Threading.Tasks.Task<WebhookResponse> CreateWebhookAsync(Webhook webhook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<WebhookResponse> localVarResponse = await CreateWebhookWithHttpInfoAsync(webhook, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a webhook Create a webhook
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details. webhook_id must not be supplied. If it is, the POST will be considered a BadRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<WebhookResponse>> CreateWebhookWithHttpInfoAsync(Webhook webhook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'webhook' is set
            if (webhook == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'webhook' when calling WebhookApi->CreateWebhook");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/jsopn"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = webhook;

            localVarRequestOptions.Operation = "WebhookApi.CreateWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WebhookResponse>("/api/v3/partner/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a webhook by id
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteWebhook(Guid webhookId, int operationIndex = 0)
        {
            DeleteWebhookWithHttpInfo(webhookId);
        }

        /// <summary>
        ///  Delete a webhook by id
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FeeWise.Client.ApiResponse<Object> DeleteWebhookWithHttpInfo(Guid webhookId, int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("webhook_id", FeeWise.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            localVarRequestOptions.Operation = "WebhookApi.DeleteWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v3/partner/webhooks/{webhook_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a webhook by id
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhookAsync(Guid webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWebhookWithHttpInfoAsync(webhookId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete a webhook by id
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<Object>> DeleteWebhookWithHttpInfoAsync(Guid webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("webhook_id", FeeWise.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            localVarRequestOptions.Operation = "WebhookApi.DeleteWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v3/partner/webhooks/{webhook_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of event topics for the channel partner All currently available event topics for the channel partner are returned.          The channel partner is derived from the PartnerAuth security context 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EventTopics</returns>
        public EventTopics GetChannelPartnerEventTopics(int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<EventTopics> localVarResponse = GetChannelPartnerEventTopicsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of event topics for the channel partner All currently available event topics for the channel partner are returned.          The channel partner is derived from the PartnerAuth security context 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EventTopics</returns>
        public FeeWise.Client.ApiResponse<EventTopics> GetChannelPartnerEventTopicsWithHttpInfo(int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhookApi.GetChannelPartnerEventTopics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EventTopics>("/api/v3/partner/events/topics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelPartnerEventTopics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of event topics for the channel partner All currently available event topics for the channel partner are returned.          The channel partner is derived from the PartnerAuth security context 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventTopics</returns>
        public async System.Threading.Tasks.Task<EventTopics> GetChannelPartnerEventTopicsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<EventTopics> localVarResponse = await GetChannelPartnerEventTopicsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of event topics for the channel partner All currently available event topics for the channel partner are returned.          The channel partner is derived from the PartnerAuth security context 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventTopics)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<EventTopics>> GetChannelPartnerEventTopicsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhookApi.GetChannelPartnerEventTopics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EventTopics>("/api/v3/partner/events/topics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelPartnerEventTopics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of events for the channel partner Returns events for the channel partner matching the filter criteria.         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topic"> (optional)</param>
        /// <param name="sinceWebhookEventId">If supplied, all events since this webhook event was sent, are retrieved. The retrieved events are subject to the  other filter params (topic, status).   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="since">Return events sent since this timestamp. If not supplied, events for the last 24 hours are returned.   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="status">Webhook send status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Events</returns>
        public Events GetChannelPartnerWebhookEvents(string topic = default(string), Guid? sinceWebhookEventId = default(Guid?), DateTime? since = default(DateTime?), WebhookSendStatus? status = default(WebhookSendStatus?), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<Events> localVarResponse = GetChannelPartnerWebhookEventsWithHttpInfo(topic, sinceWebhookEventId, since, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of events for the channel partner Returns events for the channel partner matching the filter criteria.         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topic"> (optional)</param>
        /// <param name="sinceWebhookEventId">If supplied, all events since this webhook event was sent, are retrieved. The retrieved events are subject to the  other filter params (topic, status).   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="since">Return events sent since this timestamp. If not supplied, events for the last 24 hours are returned.   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="status">Webhook send status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Events</returns>
        public FeeWise.Client.ApiResponse<Events> GetChannelPartnerWebhookEventsWithHttpInfo(string topic = default(string), Guid? sinceWebhookEventId = default(Guid?), DateTime? since = default(DateTime?), WebhookSendStatus? status = default(WebhookSendStatus?), int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (topic != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "topic", topic));
            }
            if (sinceWebhookEventId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "since_webhook_event_id", sinceWebhookEventId));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            localVarRequestOptions.Operation = "WebhookApi.GetChannelPartnerWebhookEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Events>("/api/v3/partner/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelPartnerWebhookEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of events for the channel partner Returns events for the channel partner matching the filter criteria.         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topic"> (optional)</param>
        /// <param name="sinceWebhookEventId">If supplied, all events since this webhook event was sent, are retrieved. The retrieved events are subject to the  other filter params (topic, status).   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="since">Return events sent since this timestamp. If not supplied, events for the last 24 hours are returned.   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="status">Webhook send status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Events</returns>
        public async System.Threading.Tasks.Task<Events> GetChannelPartnerWebhookEventsAsync(string topic = default(string), Guid? sinceWebhookEventId = default(Guid?), DateTime? since = default(DateTime?), WebhookSendStatus? status = default(WebhookSendStatus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<Events> localVarResponse = await GetChannelPartnerWebhookEventsWithHttpInfoAsync(topic, sinceWebhookEventId, since, status, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of events for the channel partner Returns events for the channel partner matching the filter criteria.         The filters supplied in the query params must *all* be met.         The channel partner is derived from the PartnerAuth security context. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topic"> (optional)</param>
        /// <param name="sinceWebhookEventId">If supplied, all events since this webhook event was sent, are retrieved. The retrieved events are subject to the  other filter params (topic, status).   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="since">Return events sent since this timestamp. If not supplied, events for the last 24 hours are returned.   NB - &#39;since_webhook_event_id&#39; and &#39;since&#39; are mutually exclusive. Supplying both results in a BadRequest error.  (optional)</param>
        /// <param name="status">Webhook send status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Events)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<Events>> GetChannelPartnerWebhookEventsWithHttpInfoAsync(string topic = default(string), Guid? sinceWebhookEventId = default(Guid?), DateTime? since = default(DateTime?), WebhookSendStatus? status = default(WebhookSendStatus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (topic != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "topic", topic));
            }
            if (sinceWebhookEventId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "since_webhook_event_id", sinceWebhookEventId));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            localVarRequestOptions.Operation = "WebhookApi.GetChannelPartnerWebhookEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Events>("/api/v3/partner/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelPartnerWebhookEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of webhooks for the partner Get list of webhooks for the partner
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookList</returns>
        public WebhookList GetWebhooks(int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<WebhookList> localVarResponse = GetWebhooksWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of webhooks for the partner Get list of webhooks for the partner
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookList</returns>
        public FeeWise.Client.ApiResponse<WebhookList> GetWebhooksWithHttpInfo(int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/jsopn"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhookApi.GetWebhooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WebhookList>("/api/v3/partner/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of webhooks for the partner Get list of webhooks for the partner
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookList</returns>
        public async System.Threading.Tasks.Task<WebhookList> GetWebhooksAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<WebhookList> localVarResponse = await GetWebhooksWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of webhooks for the partner Get list of webhooks for the partner
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookList)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<WebhookList>> GetWebhooksWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/jsopn"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhookApi.GetWebhooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhookList>("/api/v3/partner/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dummy receiver for webhooks. This is a webhook receiver. Normally implemented by channel partners to receive webhooks
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookEvent">Webhook event.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ReceiveWebhook(WebhookEvent webhookEvent, int operationIndex = 0)
        {
            ReceiveWebhookWithHttpInfo(webhookEvent);
        }

        /// <summary>
        /// Dummy receiver for webhooks. This is a webhook receiver. Normally implemented by channel partners to receive webhooks
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookEvent">Webhook event.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FeeWise.Client.ApiResponse<Object> ReceiveWebhookWithHttpInfo(WebhookEvent webhookEvent, int operationIndex = 0)
        {
            // verify the required parameter 'webhookEvent' is set
            if (webhookEvent == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'webhookEvent' when calling WebhookApi->ReceiveWebhook");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = webhookEvent;

            localVarRequestOptions.Operation = "WebhookApi.ReceiveWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v3/partner/webhook/receiver", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReceiveWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dummy receiver for webhooks. This is a webhook receiver. Normally implemented by channel partners to receive webhooks
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookEvent">Webhook event.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReceiveWebhookAsync(WebhookEvent webhookEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ReceiveWebhookWithHttpInfoAsync(webhookEvent, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Dummy receiver for webhooks. This is a webhook receiver. Normally implemented by channel partners to receive webhooks
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookEvent">Webhook event.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<Object>> ReceiveWebhookWithHttpInfoAsync(WebhookEvent webhookEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'webhookEvent' is set
            if (webhookEvent == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'webhookEvent' when calling WebhookApi->ReceiveWebhook");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = webhookEvent;

            localVarRequestOptions.Operation = "WebhookApi.ReceiveWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v3/partner/webhook/receiver", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReceiveWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a webhook Update a webhook
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookResponse</returns>
        public WebhookResponse UpdateWebhook(Webhook webhook, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<WebhookResponse> localVarResponse = UpdateWebhookWithHttpInfo(webhook);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a webhook Update a webhook
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        public FeeWise.Client.ApiResponse<WebhookResponse> UpdateWebhookWithHttpInfo(Webhook webhook, int operationIndex = 0)
        {
            // verify the required parameter 'webhook' is set
            if (webhook == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'webhook' when calling WebhookApi->UpdateWebhook");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = webhook;

            localVarRequestOptions.Operation = "WebhookApi.UpdateWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<WebhookResponse>("/api/v3/partner/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a webhook Update a webhook
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookResponse</returns>
        public async System.Threading.Tasks.Task<WebhookResponse> UpdateWebhookAsync(Webhook webhook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<WebhookResponse> localVarResponse = await UpdateWebhookWithHttpInfoAsync(webhook, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a webhook Update a webhook
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<WebhookResponse>> UpdateWebhookWithHttpInfoAsync(Webhook webhook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'webhook' is set
            if (webhook == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'webhook' when calling WebhookApi->UpdateWebhook");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = webhook;

            localVarRequestOptions.Operation = "WebhookApi.UpdateWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<WebhookResponse>("/api/v3/partner/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
