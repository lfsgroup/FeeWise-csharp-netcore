/*
 * FeeWise Partner API
 *
 * API for partners
 *
 * The version of the OpenAPI document: 0.0.163
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FeeWise.Client;
using FeeWise.Model;

namespace FeeWise.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFirmApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Associate a firm with an affiliate
        /// </summary>
        /// <remarks>
        /// Enables partners to establish an affiliation with FeeWise-registered firms. Partners must obtain the firm&#39;s unique FeeWise Connect ID from the firm&#39;s dashboard and submit it through this endpoint to create the association. The FeeWise Connect ID can be retrieved by the firm from the settings page.  On association, a &#x60;FirmAffiliationCreated&#x60; webhook event will be emitted. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmConnectId"></param>
        /// <param name="affiliateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Associate(string firmConnectId, Guid affiliateId, int operationIndex = 0);

        /// <summary>
        /// Associate a firm with an affiliate
        /// </summary>
        /// <remarks>
        /// Enables partners to establish an affiliation with FeeWise-registered firms. Partners must obtain the firm&#39;s unique FeeWise Connect ID from the firm&#39;s dashboard and submit it through this endpoint to create the association. The FeeWise Connect ID can be retrieved by the firm from the settings page.  On association, a &#x60;FirmAffiliationCreated&#x60; webhook event will be emitted. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmConnectId"></param>
        /// <param name="affiliateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociateWithHttpInfo(string firmConnectId, Guid affiliateId, int operationIndex = 0);
        /// <summary>
        /// Create a new firm
        /// </summary>
        /// <remarks>
        /// The createFirm API endpoint facilitates the onboarding of a new firm into the current system. The endpoint allows clients to initiate the onboarding process for their respective firms. Upon a successful http response, the firm&#39;s status will be set to \&quot;pending\&quot; in FeeWise. The onboarding process follows a two-step procedure. Initially, the operational team will review the firm&#39;s details and perform necessary verifications. Once the firm&#39;s information has been validated and approved by the operational team, the firm will be officially onboarded into FeeWise. During the onboarding approval process, a webhook will be triggered for the \&quot;firm.onboarded\&quot; event. The webhook serves as a notification mechanism, enabling integrations and external systems to be updated about the newly onboarded firm. It is important to note that the onboarding process might take some time to complete, as it involves manual verification steps by the operational team. However, clients can track the status of their firm through FeeWise and receive real-time updates through the webhook once the firm onboarding is successfully approved. Please ensure that all necessary information is provided accurately when using this API endpoint to avoid delays in the onboarding process. Additionally, clients should handle the webhook appropriately to capture the \&quot;firm.onboarded\&quot; event and update their internal systems accordingly. Roles must have one and only one representative.  Representative person is an authorised person who represents the firms. The representative must be either an executive or owner. All owners of the firm with greater that 25% must be specified in the roles. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFirm">Firm Details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirmDetails</returns>
        FirmDetails CreateFirm(CreateFirm createFirm, int operationIndex = 0);

        /// <summary>
        /// Create a new firm
        /// </summary>
        /// <remarks>
        /// The createFirm API endpoint facilitates the onboarding of a new firm into the current system. The endpoint allows clients to initiate the onboarding process for their respective firms. Upon a successful http response, the firm&#39;s status will be set to \&quot;pending\&quot; in FeeWise. The onboarding process follows a two-step procedure. Initially, the operational team will review the firm&#39;s details and perform necessary verifications. Once the firm&#39;s information has been validated and approved by the operational team, the firm will be officially onboarded into FeeWise. During the onboarding approval process, a webhook will be triggered for the \&quot;firm.onboarded\&quot; event. The webhook serves as a notification mechanism, enabling integrations and external systems to be updated about the newly onboarded firm. It is important to note that the onboarding process might take some time to complete, as it involves manual verification steps by the operational team. However, clients can track the status of their firm through FeeWise and receive real-time updates through the webhook once the firm onboarding is successfully approved. Please ensure that all necessary information is provided accurately when using this API endpoint to avoid delays in the onboarding process. Additionally, clients should handle the webhook appropriately to capture the \&quot;firm.onboarded\&quot; event and update their internal systems accordingly. Roles must have one and only one representative.  Representative person is an authorised person who represents the firms. The representative must be either an executive or owner. All owners of the firm with greater that 25% must be specified in the roles. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFirm">Firm Details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirmDetails</returns>
        ApiResponse<FirmDetails> CreateFirmWithHttpInfo(CreateFirm createFirm, int operationIndex = 0);
        /// <summary>
        /// Create Firm Account Owner
        /// </summary>
        /// <remarks>
        /// Create a firm account owner, once activated, they can sign into the FeeWise dashboard.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="createFirmAccountOwnerRequest">Firm account owner details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateFirmAccountOwner(Guid firmId, CreateFirmAccountOwnerRequest createFirmAccountOwnerRequest, int operationIndex = 0);

        /// <summary>
        /// Create Firm Account Owner
        /// </summary>
        /// <remarks>
        /// Create a firm account owner, once activated, they can sign into the FeeWise dashboard.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="createFirmAccountOwnerRequest">Firm account owner details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateFirmAccountOwnerWithHttpInfo(Guid firmId, CreateFirmAccountOwnerRequest createFirmAccountOwnerRequest, int operationIndex = 0);
        /// <summary>
        /// Create a bank account
        /// </summary>
        /// <remarks>
        /// Create an Office or Trust account for a Firm.  If the account doesn&#39;t already exist, the new account will be created in &#x60;Pending&#x60; state. You need to listen for the &#x60;firm.bank-account.updated&#x60; webhook to know when the account is &#x60;Valid&#x60; or &#x60;Invalid&#x60;.  New account validation is subject to [Stripe&#39;s validation rules](https://docs.stripe.com/connect/payouts-bank-accounts?bank-account-collection-integration&#x3D;direct-api&amp;bank-account-collection-method&#x3D;manual-entry&amp;account-country&#x3D;US#collecting-external-accounts), which vary by region. Please refer to these rules if the &#x60;firm.bank-account.updated&#x60; webhook says your account is &#x60;Invalid&#x60;. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="bankAccount">New account details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankAccount</returns>
        BankAccount CreateFirmBankAccount(Guid firmId, BankAccount bankAccount, int operationIndex = 0);

        /// <summary>
        /// Create a bank account
        /// </summary>
        /// <remarks>
        /// Create an Office or Trust account for a Firm.  If the account doesn&#39;t already exist, the new account will be created in &#x60;Pending&#x60; state. You need to listen for the &#x60;firm.bank-account.updated&#x60; webhook to know when the account is &#x60;Valid&#x60; or &#x60;Invalid&#x60;.  New account validation is subject to [Stripe&#39;s validation rules](https://docs.stripe.com/connect/payouts-bank-accounts?bank-account-collection-integration&#x3D;direct-api&amp;bank-account-collection-method&#x3D;manual-entry&amp;account-country&#x3D;US#collecting-external-accounts), which vary by region. Please refer to these rules if the &#x60;firm.bank-account.updated&#x60; webhook says your account is &#x60;Invalid&#x60;. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="bankAccount">New account details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankAccount</returns>
        ApiResponse<BankAccount> CreateFirmBankAccountWithHttpInfo(Guid firmId, BankAccount bankAccount, int operationIndex = 0);
        /// <summary>
        /// Create a payment token for a customer.
        /// </summary>
        /// <remarks>
        /// Create a payment token for a customer to capture their payment method details and later use to charge them via the charge and pay endpoint /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token}.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentTokenBody">Customer and payment method details nb If payment method is not provided, the default will be set to Card. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentTokenResponse</returns>
        PaymentTokenResponse CreatePaymentToken(Guid firmId, PaymentTokenBody paymentTokenBody, int operationIndex = 0);

        /// <summary>
        /// Create a payment token for a customer.
        /// </summary>
        /// <remarks>
        /// Create a payment token for a customer to capture their payment method details and later use to charge them via the charge and pay endpoint /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token}.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentTokenBody">Customer and payment method details nb If payment method is not provided, the default will be set to Card. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentTokenResponse</returns>
        ApiResponse<PaymentTokenResponse> CreatePaymentTokenWithHttpInfo(Guid firmId, PaymentTokenBody paymentTokenBody, int operationIndex = 0);
        /// <summary>
        /// Delete a bank account
        /// </summary>
        /// <remarks>
        /// Delete a bank account for a Firm nb: If a bank account is related to an inflight transaction, payout or similar the bank account deletion will fail. Contact FeeWise support to resolve the issue. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteFirmBankAccount(Guid firmId, Guid accountId, int operationIndex = 0);

        /// <summary>
        /// Delete a bank account
        /// </summary>
        /// <remarks>
        /// Delete a bank account for a Firm nb: If a bank account is related to an inflight transaction, payout or similar the bank account deletion will fail. Contact FeeWise support to resolve the issue. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFirmBankAccountWithHttpInfo(Guid firmId, Guid accountId, int operationIndex = 0);
        /// <summary>
        /// Delete a payment token
        /// </summary>
        /// <remarks>
        /// Delete a payment token for given firm
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePaymentToken(Guid firmId, Guid paymentToken, int operationIndex = 0);

        /// <summary>
        /// Delete a payment token
        /// </summary>
        /// <remarks>
        /// Delete a payment token for given firm
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePaymentTokenWithHttpInfo(Guid firmId, Guid paymentToken, int operationIndex = 0);
        /// <summary>
        /// Get a firm
        /// </summary>
        /// <remarks>
        /// Deprecated, prefer /api/v3/partner/firms/firm-details.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirmResponse</returns>
        FirmResponse GetFirm(Guid firmId, int operationIndex = 0);

        /// <summary>
        /// Get a firm
        /// </summary>
        /// <remarks>
        /// Deprecated, prefer /api/v3/partner/firms/firm-details.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirmResponse</returns>
        ApiResponse<FirmResponse> GetFirmWithHttpInfo(Guid firmId, int operationIndex = 0);
        /// <summary>
        /// Get a bank account by ID
        /// </summary>
        /// <remarks>
        /// Get a bank account by ID.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankAccount</returns>
        BankAccount GetFirmBankAccountByID(Guid firmId, Guid accountId, int operationIndex = 0);

        /// <summary>
        /// Get a bank account by ID
        /// </summary>
        /// <remarks>
        /// Get a bank account by ID.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankAccount</returns>
        ApiResponse<BankAccount> GetFirmBankAccountByIDWithHttpInfo(Guid firmId, Guid accountId, int operationIndex = 0);
        /// <summary>
        /// List bank accounts
        /// </summary>
        /// <remarks>
        /// Return all bank accounts linked to a firm.  If no accounts are linked an empty array is returned.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankAccountsResponse</returns>
        BankAccountsResponse GetFirmBankAccounts(Guid firmId, int operationIndex = 0);

        /// <summary>
        /// List bank accounts
        /// </summary>
        /// <remarks>
        /// Return all bank accounts linked to a firm.  If no accounts are linked an empty array is returned.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankAccountsResponse</returns>
        ApiResponse<BankAccountsResponse> GetFirmBankAccountsWithHttpInfo(Guid firmId, int operationIndex = 0);
        /// <summary>
        /// Get firm branding
        /// </summary>
        /// <remarks>
        /// Get firm branding. Nb if branding is not set, an empty model will be returned. nb To avoid overwriting the Firms existing brand settings by mistake, this GET endpoint should be used to retrieve the firms current branding PRIOR to using the POST endpoint.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPartnerBranding200Response</returns>
        GetPartnerBranding200Response GetFirmBranding(Guid firmId, int operationIndex = 0);

        /// <summary>
        /// Get firm branding
        /// </summary>
        /// <remarks>
        /// Get firm branding. Nb if branding is not set, an empty model will be returned. nb To avoid overwriting the Firms existing brand settings by mistake, this GET endpoint should be used to retrieve the firms current branding PRIOR to using the POST endpoint.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPartnerBranding200Response</returns>
        ApiResponse<GetPartnerBranding200Response> GetFirmBrandingWithHttpInfo(Guid firmId, int operationIndex = 0);
        /// <summary>
        /// List all the customers for a firm.
        /// </summary>
        /// <remarks>
        /// Return an array of all customers with their saved payment methods. If no customers, an empty array is returned.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersResponse</returns>
        CustomersResponse GetFirmCustomers(Guid firmId, int operationIndex = 0);

        /// <summary>
        /// List all the customers for a firm.
        /// </summary>
        /// <remarks>
        /// Return an array of all customers with their saved payment methods. If no customers, an empty array is returned.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersResponse</returns>
        ApiResponse<CustomersResponse> GetFirmCustomersWithHttpInfo(Guid firmId, int operationIndex = 0);
        /// <summary>
        /// Get firm details
        /// </summary>
        /// <remarks>
        /// Get firm details by Firm ID (UUID) - This is the FeeWise unique ID for a firm OR by External ID (string), the partner&#39;s own unique id for a firm. Both will return the same model Firm surcharge settings is defined here. Surcharge price rates can be found as customer variable fee and customer fixed fee per product here: &#39;/api/v3/partner/firms/{firm_id}/pricing&#39;. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID) (optional)</param>
        /// <param name="externalId">External ID (string) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirmDetails</returns>
        FirmDetails GetFirmDetails(Guid? firmId = default(Guid?), string externalId = default(string), int operationIndex = 0);

        /// <summary>
        /// Get firm details
        /// </summary>
        /// <remarks>
        /// Get firm details by Firm ID (UUID) - This is the FeeWise unique ID for a firm OR by External ID (string), the partner&#39;s own unique id for a firm. Both will return the same model Firm surcharge settings is defined here. Surcharge price rates can be found as customer variable fee and customer fixed fee per product here: &#39;/api/v3/partner/firms/{firm_id}/pricing&#39;. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID) (optional)</param>
        /// <param name="externalId">External ID (string) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirmDetails</returns>
        ApiResponse<FirmDetails> GetFirmDetailsWithHttpInfo(Guid? firmId = default(Guid?), string externalId = default(string), int operationIndex = 0);
        /// <summary>
        /// List the pricing products for a firm and their constraints.
        /// </summary>
        /// <remarks>
        /// Returns an array of pricing products for a specific firm. Surcharge price rates are customer variable fee and customer fixed fee.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="amount">An example amount.  When supplied, each payment method in the response will contain an &#x60;example_amount&#x60;, representing the full amount that would be charged including fees, given the amount passed in.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToggleFirmProducts200Response</returns>
        ToggleFirmProducts200Response GetFirmPricing(Guid firmId, string amount = default(string), int operationIndex = 0);

        /// <summary>
        /// List the pricing products for a firm and their constraints.
        /// </summary>
        /// <remarks>
        /// Returns an array of pricing products for a specific firm. Surcharge price rates are customer variable fee and customer fixed fee.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="amount">An example amount.  When supplied, each payment method in the response will contain an &#x60;example_amount&#x60;, representing the full amount that would be charged including fees, given the amount passed in.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToggleFirmProducts200Response</returns>
        ApiResponse<ToggleFirmProducts200Response> GetFirmPricingWithHttpInfo(Guid firmId, string amount = default(string), int operationIndex = 0);
        /// <summary>
        /// Get firms
        /// </summary>
        /// <remarks>
        /// get all firms for current channel partner
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirmsResponse</returns>
        FirmsResponse GetFirms(int operationIndex = 0);

        /// <summary>
        /// Get firms
        /// </summary>
        /// <remarks>
        /// get all firms for current channel partner
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirmsResponse</returns>
        ApiResponse<FirmsResponse> GetFirmsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Create a magic link
        /// </summary>
        /// <remarks>
        /// Create a magic link that, on click, redirects to a defined URL within the dashboard. Defaults to homepage 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="destinationUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMagicLink200Response</returns>
        GetMagicLink200Response GetMagicLink(Guid firmId, string destinationUrl = default(string), int operationIndex = 0);

        /// <summary>
        /// Create a magic link
        /// </summary>
        /// <remarks>
        /// Create a magic link that, on click, redirects to a defined URL within the dashboard. Defaults to homepage 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="destinationUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMagicLink200Response</returns>
        ApiResponse<GetMagicLink200Response> GetMagicLinkWithHttpInfo(Guid firmId, string destinationUrl = default(string), int operationIndex = 0);
        /// <summary>
        /// Set firm branding colour for firm dashboard
        /// </summary>
        /// <remarks>
        /// Update firm branding colour
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="postFirmBrandingColourRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PostFirmBrandingColour(Guid firmId, PostFirmBrandingColourRequest postFirmBrandingColourRequest = default(PostFirmBrandingColourRequest), int operationIndex = 0);

        /// <summary>
        /// Set firm branding colour for firm dashboard
        /// </summary>
        /// <remarks>
        /// Update firm branding colour
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="postFirmBrandingColourRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostFirmBrandingColourWithHttpInfo(Guid firmId, PostFirmBrandingColourRequest postFirmBrandingColourRequest = default(PostFirmBrandingColourRequest), int operationIndex = 0);
        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// Upload files to FeeWise. nb Content-Type header must be multipart/form-data example  curl -X POST -F \&quot;fwUploadFile&#x3D;@/path/to/file.png\&quot; \\     http://localhost:8080/api/v3/partner/firms/&lt;firm_id&gt;/upload?file_purpose&#x3D;identity_document \\       - -header &#39;X-CHANNEL-PARTNER-ID: &lt;channel partner id&gt;&#39;  \\       - -header &#39;X-API-KEY: &lt;api key&gt;&#39; \\       - -header \&quot;Content-Type: multipart/form-data\&quot; 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="filePurpose">Purpose of the uploaded file, must match one of the enum values</param>
        /// <param name="personId">person_id is required when the file_purpose is \&quot;identity_document\&quot;. The person_id can be retrieved from the firm details endpoint.  (optional)</param>
        /// <param name="documentSide">The side of the \&quot;identity_document\&quot; being uploaded. (optional, default to front)</param>
        /// <param name="fwUploadFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostUpload200Response</returns>
        PostUpload200Response PostUpload(Guid firmId, string filePurpose, Guid? personId = default(Guid?), string documentSide = default(string), System.IO.Stream fwUploadFile = default(System.IO.Stream), int operationIndex = 0);

        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// Upload files to FeeWise. nb Content-Type header must be multipart/form-data example  curl -X POST -F \&quot;fwUploadFile&#x3D;@/path/to/file.png\&quot; \\     http://localhost:8080/api/v3/partner/firms/&lt;firm_id&gt;/upload?file_purpose&#x3D;identity_document \\       - -header &#39;X-CHANNEL-PARTNER-ID: &lt;channel partner id&gt;&#39;  \\       - -header &#39;X-API-KEY: &lt;api key&gt;&#39; \\       - -header \&quot;Content-Type: multipart/form-data\&quot; 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="filePurpose">Purpose of the uploaded file, must match one of the enum values</param>
        /// <param name="personId">person_id is required when the file_purpose is \&quot;identity_document\&quot;. The person_id can be retrieved from the firm details endpoint.  (optional)</param>
        /// <param name="documentSide">The side of the \&quot;identity_document\&quot; being uploaded. (optional, default to front)</param>
        /// <param name="fwUploadFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostUpload200Response</returns>
        ApiResponse<PostUpload200Response> PostUploadWithHttpInfo(Guid firmId, string filePurpose, Guid? personId = default(Guid?), string documentSide = default(string), System.IO.Stream fwUploadFile = default(System.IO.Stream), int operationIndex = 0);
        /// <summary>
        /// Toggle surcharging status
        /// </summary>
        /// <remarks>
        /// Allows partners to toggle surcharging on or off for a firm. Surcharge pricing values can be found using the endpoint, firms/{firm_id}/pricing 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID)</param>
        /// <param name="status">enable: The firm would like to enable surcharging disable: The firm would like to disable surcharging ### Region specific rules US environment, there is a 30 day waiting period, for surcharging to be enabled AU environment, surcharging is enabled immediately. * nb: Once surcharging has been enabled a FirmSurchargeStatusChanged webhook will be triggered </param>
        /// <param name="putSurchargingStatusRequest">Optional parameters for surcharging configuration (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SurchargeSettingsResponse</returns>
        SurchargeSettingsResponse PutSurchargingStatus(Guid firmId, string status, PutSurchargingStatusRequest putSurchargingStatusRequest = default(PutSurchargingStatusRequest), int operationIndex = 0);

        /// <summary>
        /// Toggle surcharging status
        /// </summary>
        /// <remarks>
        /// Allows partners to toggle surcharging on or off for a firm. Surcharge pricing values can be found using the endpoint, firms/{firm_id}/pricing 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID)</param>
        /// <param name="status">enable: The firm would like to enable surcharging disable: The firm would like to disable surcharging ### Region specific rules US environment, there is a 30 day waiting period, for surcharging to be enabled AU environment, surcharging is enabled immediately. * nb: Once surcharging has been enabled a FirmSurchargeStatusChanged webhook will be triggered </param>
        /// <param name="putSurchargingStatusRequest">Optional parameters for surcharging configuration (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SurchargeSettingsResponse</returns>
        ApiResponse<SurchargeSettingsResponse> PutSurchargingStatusWithHttpInfo(Guid firmId, string status, PutSurchargingStatusRequest putSurchargingStatusRequest = default(PutSurchargingStatusRequest), int operationIndex = 0);
        /// <summary>
        /// Query metadata to search for Charges, for the given firm
        /// </summary>
        /// <remarks>
        /// Retrieve a firm&#39;s charges that are associated with a specific metadata key-value pair
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="metadataSearch">Metadata search details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ChargeResponse&gt;</returns>
        List<ChargeResponse> SearchChargesByMetadata(Guid firmId, MetadataSearch metadataSearch, int operationIndex = 0);

        /// <summary>
        /// Query metadata to search for Charges, for the given firm
        /// </summary>
        /// <remarks>
        /// Retrieve a firm&#39;s charges that are associated with a specific metadata key-value pair
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="metadataSearch">Metadata search details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ChargeResponse&gt;</returns>
        ApiResponse<List<ChargeResponse>> SearchChargesByMetadataWithHttpInfo(Guid firmId, MetadataSearch metadataSearch, int operationIndex = 0);
        /// <summary>
        /// Set firms default bank account.
        /// </summary>
        /// <remarks>
        /// Set the given account as the default bank account (Trust or Office). The account type will determine if the bank account becomes the default office or trust account.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankAccountResponse</returns>
        BankAccountResponse SetFirmsDefaultBankAccount(Guid firmId, Guid accountId, int operationIndex = 0);

        /// <summary>
        /// Set firms default bank account.
        /// </summary>
        /// <remarks>
        /// Set the given account as the default bank account (Trust or Office). The account type will determine if the bank account becomes the default office or trust account.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankAccountResponse</returns>
        ApiResponse<BankAccountResponse> SetFirmsDefaultBankAccountWithHttpInfo(Guid firmId, Guid accountId, int operationIndex = 0);
        /// <summary>
        /// Sync a firm by the FeeWise Connect ID
        /// </summary>
        /// <remarks>
        /// Given a FeeWise Connect ID return a the firm&#39;s ID and status.  The firm ID can be used for future requests.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirmResponse</returns>
        FirmResponse SyncFirm(string connectId, int operationIndex = 0);

        /// <summary>
        /// Sync a firm by the FeeWise Connect ID
        /// </summary>
        /// <remarks>
        /// Given a FeeWise Connect ID return a the firm&#39;s ID and status.  The firm ID can be used for future requests.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirmResponse</returns>
        ApiResponse<FirmResponse> SyncFirmWithHttpInfo(string connectId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Toggle the optional products that are enabled for a firm.  Can be used to enable or disable optional payment types, such as Klarna and Affirm. The products with &#x60;Enabled&#x60; values will be enabled, products with &#x60;Disabled&#x60; will be disabled, and omitted products will be ignored. All enabled products for the firm will be returned. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="optionalProductSettings">An object of optional products that should be enabled for a firm. Only present values will be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToggleFirmProducts200Response</returns>
        ToggleFirmProducts200Response ToggleFirmProducts(Guid firmId, OptionalProductSettings optionalProductSettings, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Toggle the optional products that are enabled for a firm.  Can be used to enable or disable optional payment types, such as Klarna and Affirm. The products with &#x60;Enabled&#x60; values will be enabled, products with &#x60;Disabled&#x60; will be disabled, and omitted products will be ignored. All enabled products for the firm will be returned. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="optionalProductSettings">An object of optional products that should be enabled for a firm. Only present values will be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToggleFirmProducts200Response</returns>
        ApiResponse<ToggleFirmProducts200Response> ToggleFirmProductsWithHttpInfo(Guid firmId, OptionalProductSettings optionalProductSettings, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFirmApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Associate a firm with an affiliate
        /// </summary>
        /// <remarks>
        /// Enables partners to establish an affiliation with FeeWise-registered firms. Partners must obtain the firm&#39;s unique FeeWise Connect ID from the firm&#39;s dashboard and submit it through this endpoint to create the association. The FeeWise Connect ID can be retrieved by the firm from the settings page.  On association, a &#x60;FirmAffiliationCreated&#x60; webhook event will be emitted. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmConnectId"></param>
        /// <param name="affiliateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociateAsync(string firmConnectId, Guid affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate a firm with an affiliate
        /// </summary>
        /// <remarks>
        /// Enables partners to establish an affiliation with FeeWise-registered firms. Partners must obtain the firm&#39;s unique FeeWise Connect ID from the firm&#39;s dashboard and submit it through this endpoint to create the association. The FeeWise Connect ID can be retrieved by the firm from the settings page.  On association, a &#x60;FirmAffiliationCreated&#x60; webhook event will be emitted. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmConnectId"></param>
        /// <param name="affiliateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateWithHttpInfoAsync(string firmConnectId, Guid affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new firm
        /// </summary>
        /// <remarks>
        /// The createFirm API endpoint facilitates the onboarding of a new firm into the current system. The endpoint allows clients to initiate the onboarding process for their respective firms. Upon a successful http response, the firm&#39;s status will be set to \&quot;pending\&quot; in FeeWise. The onboarding process follows a two-step procedure. Initially, the operational team will review the firm&#39;s details and perform necessary verifications. Once the firm&#39;s information has been validated and approved by the operational team, the firm will be officially onboarded into FeeWise. During the onboarding approval process, a webhook will be triggered for the \&quot;firm.onboarded\&quot; event. The webhook serves as a notification mechanism, enabling integrations and external systems to be updated about the newly onboarded firm. It is important to note that the onboarding process might take some time to complete, as it involves manual verification steps by the operational team. However, clients can track the status of their firm through FeeWise and receive real-time updates through the webhook once the firm onboarding is successfully approved. Please ensure that all necessary information is provided accurately when using this API endpoint to avoid delays in the onboarding process. Additionally, clients should handle the webhook appropriately to capture the \&quot;firm.onboarded\&quot; event and update their internal systems accordingly. Roles must have one and only one representative.  Representative person is an authorised person who represents the firms. The representative must be either an executive or owner. All owners of the firm with greater that 25% must be specified in the roles. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFirm">Firm Details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmDetails</returns>
        System.Threading.Tasks.Task<FirmDetails> CreateFirmAsync(CreateFirm createFirm, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new firm
        /// </summary>
        /// <remarks>
        /// The createFirm API endpoint facilitates the onboarding of a new firm into the current system. The endpoint allows clients to initiate the onboarding process for their respective firms. Upon a successful http response, the firm&#39;s status will be set to \&quot;pending\&quot; in FeeWise. The onboarding process follows a two-step procedure. Initially, the operational team will review the firm&#39;s details and perform necessary verifications. Once the firm&#39;s information has been validated and approved by the operational team, the firm will be officially onboarded into FeeWise. During the onboarding approval process, a webhook will be triggered for the \&quot;firm.onboarded\&quot; event. The webhook serves as a notification mechanism, enabling integrations and external systems to be updated about the newly onboarded firm. It is important to note that the onboarding process might take some time to complete, as it involves manual verification steps by the operational team. However, clients can track the status of their firm through FeeWise and receive real-time updates through the webhook once the firm onboarding is successfully approved. Please ensure that all necessary information is provided accurately when using this API endpoint to avoid delays in the onboarding process. Additionally, clients should handle the webhook appropriately to capture the \&quot;firm.onboarded\&quot; event and update their internal systems accordingly. Roles must have one and only one representative.  Representative person is an authorised person who represents the firms. The representative must be either an executive or owner. All owners of the firm with greater that 25% must be specified in the roles. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFirm">Firm Details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirmDetails>> CreateFirmWithHttpInfoAsync(CreateFirm createFirm, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Firm Account Owner
        /// </summary>
        /// <remarks>
        /// Create a firm account owner, once activated, they can sign into the FeeWise dashboard.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="createFirmAccountOwnerRequest">Firm account owner details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateFirmAccountOwnerAsync(Guid firmId, CreateFirmAccountOwnerRequest createFirmAccountOwnerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Firm Account Owner
        /// </summary>
        /// <remarks>
        /// Create a firm account owner, once activated, they can sign into the FeeWise dashboard.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="createFirmAccountOwnerRequest">Firm account owner details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateFirmAccountOwnerWithHttpInfoAsync(Guid firmId, CreateFirmAccountOwnerRequest createFirmAccountOwnerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a bank account
        /// </summary>
        /// <remarks>
        /// Create an Office or Trust account for a Firm.  If the account doesn&#39;t already exist, the new account will be created in &#x60;Pending&#x60; state. You need to listen for the &#x60;firm.bank-account.updated&#x60; webhook to know when the account is &#x60;Valid&#x60; or &#x60;Invalid&#x60;.  New account validation is subject to [Stripe&#39;s validation rules](https://docs.stripe.com/connect/payouts-bank-accounts?bank-account-collection-integration&#x3D;direct-api&amp;bank-account-collection-method&#x3D;manual-entry&amp;account-country&#x3D;US#collecting-external-accounts), which vary by region. Please refer to these rules if the &#x60;firm.bank-account.updated&#x60; webhook says your account is &#x60;Invalid&#x60;. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="bankAccount">New account details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankAccount</returns>
        System.Threading.Tasks.Task<BankAccount> CreateFirmBankAccountAsync(Guid firmId, BankAccount bankAccount, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a bank account
        /// </summary>
        /// <remarks>
        /// Create an Office or Trust account for a Firm.  If the account doesn&#39;t already exist, the new account will be created in &#x60;Pending&#x60; state. You need to listen for the &#x60;firm.bank-account.updated&#x60; webhook to know when the account is &#x60;Valid&#x60; or &#x60;Invalid&#x60;.  New account validation is subject to [Stripe&#39;s validation rules](https://docs.stripe.com/connect/payouts-bank-accounts?bank-account-collection-integration&#x3D;direct-api&amp;bank-account-collection-method&#x3D;manual-entry&amp;account-country&#x3D;US#collecting-external-accounts), which vary by region. Please refer to these rules if the &#x60;firm.bank-account.updated&#x60; webhook says your account is &#x60;Invalid&#x60;. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="bankAccount">New account details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankAccount>> CreateFirmBankAccountWithHttpInfoAsync(Guid firmId, BankAccount bankAccount, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a payment token for a customer.
        /// </summary>
        /// <remarks>
        /// Create a payment token for a customer to capture their payment method details and later use to charge them via the charge and pay endpoint /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token}.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentTokenBody">Customer and payment method details nb If payment method is not provided, the default will be set to Card. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentTokenResponse</returns>
        System.Threading.Tasks.Task<PaymentTokenResponse> CreatePaymentTokenAsync(Guid firmId, PaymentTokenBody paymentTokenBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a payment token for a customer.
        /// </summary>
        /// <remarks>
        /// Create a payment token for a customer to capture their payment method details and later use to charge them via the charge and pay endpoint /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token}.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentTokenBody">Customer and payment method details nb If payment method is not provided, the default will be set to Card. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentTokenResponse>> CreatePaymentTokenWithHttpInfoAsync(Guid firmId, PaymentTokenBody paymentTokenBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a bank account
        /// </summary>
        /// <remarks>
        /// Delete a bank account for a Firm nb: If a bank account is related to an inflight transaction, payout or similar the bank account deletion will fail. Contact FeeWise support to resolve the issue. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFirmBankAccountAsync(Guid firmId, Guid accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a bank account
        /// </summary>
        /// <remarks>
        /// Delete a bank account for a Firm nb: If a bank account is related to an inflight transaction, payout or similar the bank account deletion will fail. Contact FeeWise support to resolve the issue. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFirmBankAccountWithHttpInfoAsync(Guid firmId, Guid accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a payment token
        /// </summary>
        /// <remarks>
        /// Delete a payment token for given firm
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePaymentTokenAsync(Guid firmId, Guid paymentToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a payment token
        /// </summary>
        /// <remarks>
        /// Delete a payment token for given firm
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaymentTokenWithHttpInfoAsync(Guid firmId, Guid paymentToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a firm
        /// </summary>
        /// <remarks>
        /// Deprecated, prefer /api/v3/partner/firms/firm-details.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmResponse</returns>
        System.Threading.Tasks.Task<FirmResponse> GetFirmAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a firm
        /// </summary>
        /// <remarks>
        /// Deprecated, prefer /api/v3/partner/firms/firm-details.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirmResponse>> GetFirmWithHttpInfoAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a bank account by ID
        /// </summary>
        /// <remarks>
        /// Get a bank account by ID.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankAccount</returns>
        System.Threading.Tasks.Task<BankAccount> GetFirmBankAccountByIDAsync(Guid firmId, Guid accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a bank account by ID
        /// </summary>
        /// <remarks>
        /// Get a bank account by ID.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankAccount>> GetFirmBankAccountByIDWithHttpInfoAsync(Guid firmId, Guid accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List bank accounts
        /// </summary>
        /// <remarks>
        /// Return all bank accounts linked to a firm.  If no accounts are linked an empty array is returned.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankAccountsResponse</returns>
        System.Threading.Tasks.Task<BankAccountsResponse> GetFirmBankAccountsAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List bank accounts
        /// </summary>
        /// <remarks>
        /// Return all bank accounts linked to a firm.  If no accounts are linked an empty array is returned.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankAccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankAccountsResponse>> GetFirmBankAccountsWithHttpInfoAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get firm branding
        /// </summary>
        /// <remarks>
        /// Get firm branding. Nb if branding is not set, an empty model will be returned. nb To avoid overwriting the Firms existing brand settings by mistake, this GET endpoint should be used to retrieve the firms current branding PRIOR to using the POST endpoint.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPartnerBranding200Response</returns>
        System.Threading.Tasks.Task<GetPartnerBranding200Response> GetFirmBrandingAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get firm branding
        /// </summary>
        /// <remarks>
        /// Get firm branding. Nb if branding is not set, an empty model will be returned. nb To avoid overwriting the Firms existing brand settings by mistake, this GET endpoint should be used to retrieve the firms current branding PRIOR to using the POST endpoint.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPartnerBranding200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPartnerBranding200Response>> GetFirmBrandingWithHttpInfoAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all the customers for a firm.
        /// </summary>
        /// <remarks>
        /// Return an array of all customers with their saved payment methods. If no customers, an empty array is returned.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersResponse</returns>
        System.Threading.Tasks.Task<CustomersResponse> GetFirmCustomersAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all the customers for a firm.
        /// </summary>
        /// <remarks>
        /// Return an array of all customers with their saved payment methods. If no customers, an empty array is returned.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersResponse>> GetFirmCustomersWithHttpInfoAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get firm details
        /// </summary>
        /// <remarks>
        /// Get firm details by Firm ID (UUID) - This is the FeeWise unique ID for a firm OR by External ID (string), the partner&#39;s own unique id for a firm. Both will return the same model Firm surcharge settings is defined here. Surcharge price rates can be found as customer variable fee and customer fixed fee per product here: &#39;/api/v3/partner/firms/{firm_id}/pricing&#39;. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID) (optional)</param>
        /// <param name="externalId">External ID (string) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmDetails</returns>
        System.Threading.Tasks.Task<FirmDetails> GetFirmDetailsAsync(Guid? firmId = default(Guid?), string externalId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get firm details
        /// </summary>
        /// <remarks>
        /// Get firm details by Firm ID (UUID) - This is the FeeWise unique ID for a firm OR by External ID (string), the partner&#39;s own unique id for a firm. Both will return the same model Firm surcharge settings is defined here. Surcharge price rates can be found as customer variable fee and customer fixed fee per product here: &#39;/api/v3/partner/firms/{firm_id}/pricing&#39;. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID) (optional)</param>
        /// <param name="externalId">External ID (string) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirmDetails>> GetFirmDetailsWithHttpInfoAsync(Guid? firmId = default(Guid?), string externalId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the pricing products for a firm and their constraints.
        /// </summary>
        /// <remarks>
        /// Returns an array of pricing products for a specific firm. Surcharge price rates are customer variable fee and customer fixed fee.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="amount">An example amount.  When supplied, each payment method in the response will contain an &#x60;example_amount&#x60;, representing the full amount that would be charged including fees, given the amount passed in.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToggleFirmProducts200Response</returns>
        System.Threading.Tasks.Task<ToggleFirmProducts200Response> GetFirmPricingAsync(Guid firmId, string amount = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the pricing products for a firm and their constraints.
        /// </summary>
        /// <remarks>
        /// Returns an array of pricing products for a specific firm. Surcharge price rates are customer variable fee and customer fixed fee.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="amount">An example amount.  When supplied, each payment method in the response will contain an &#x60;example_amount&#x60;, representing the full amount that would be charged including fees, given the amount passed in.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToggleFirmProducts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToggleFirmProducts200Response>> GetFirmPricingWithHttpInfoAsync(Guid firmId, string amount = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get firms
        /// </summary>
        /// <remarks>
        /// get all firms for current channel partner
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmsResponse</returns>
        System.Threading.Tasks.Task<FirmsResponse> GetFirmsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get firms
        /// </summary>
        /// <remarks>
        /// get all firms for current channel partner
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirmsResponse>> GetFirmsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a magic link
        /// </summary>
        /// <remarks>
        /// Create a magic link that, on click, redirects to a defined URL within the dashboard. Defaults to homepage 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="destinationUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMagicLink200Response</returns>
        System.Threading.Tasks.Task<GetMagicLink200Response> GetMagicLinkAsync(Guid firmId, string destinationUrl = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a magic link
        /// </summary>
        /// <remarks>
        /// Create a magic link that, on click, redirects to a defined URL within the dashboard. Defaults to homepage 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="destinationUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMagicLink200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMagicLink200Response>> GetMagicLinkWithHttpInfoAsync(Guid firmId, string destinationUrl = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set firm branding colour for firm dashboard
        /// </summary>
        /// <remarks>
        /// Update firm branding colour
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="postFirmBrandingColourRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostFirmBrandingColourAsync(Guid firmId, PostFirmBrandingColourRequest postFirmBrandingColourRequest = default(PostFirmBrandingColourRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set firm branding colour for firm dashboard
        /// </summary>
        /// <remarks>
        /// Update firm branding colour
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="postFirmBrandingColourRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostFirmBrandingColourWithHttpInfoAsync(Guid firmId, PostFirmBrandingColourRequest postFirmBrandingColourRequest = default(PostFirmBrandingColourRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// Upload files to FeeWise. nb Content-Type header must be multipart/form-data example  curl -X POST -F \&quot;fwUploadFile&#x3D;@/path/to/file.png\&quot; \\     http://localhost:8080/api/v3/partner/firms/&lt;firm_id&gt;/upload?file_purpose&#x3D;identity_document \\       - -header &#39;X-CHANNEL-PARTNER-ID: &lt;channel partner id&gt;&#39;  \\       - -header &#39;X-API-KEY: &lt;api key&gt;&#39; \\       - -header \&quot;Content-Type: multipart/form-data\&quot; 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="filePurpose">Purpose of the uploaded file, must match one of the enum values</param>
        /// <param name="personId">person_id is required when the file_purpose is \&quot;identity_document\&quot;. The person_id can be retrieved from the firm details endpoint.  (optional)</param>
        /// <param name="documentSide">The side of the \&quot;identity_document\&quot; being uploaded. (optional, default to front)</param>
        /// <param name="fwUploadFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostUpload200Response</returns>
        System.Threading.Tasks.Task<PostUpload200Response> PostUploadAsync(Guid firmId, string filePurpose, Guid? personId = default(Guid?), string documentSide = default(string), System.IO.Stream fwUploadFile = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// Upload files to FeeWise. nb Content-Type header must be multipart/form-data example  curl -X POST -F \&quot;fwUploadFile&#x3D;@/path/to/file.png\&quot; \\     http://localhost:8080/api/v3/partner/firms/&lt;firm_id&gt;/upload?file_purpose&#x3D;identity_document \\       - -header &#39;X-CHANNEL-PARTNER-ID: &lt;channel partner id&gt;&#39;  \\       - -header &#39;X-API-KEY: &lt;api key&gt;&#39; \\       - -header \&quot;Content-Type: multipart/form-data\&quot; 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="filePurpose">Purpose of the uploaded file, must match one of the enum values</param>
        /// <param name="personId">person_id is required when the file_purpose is \&quot;identity_document\&quot;. The person_id can be retrieved from the firm details endpoint.  (optional)</param>
        /// <param name="documentSide">The side of the \&quot;identity_document\&quot; being uploaded. (optional, default to front)</param>
        /// <param name="fwUploadFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostUpload200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostUpload200Response>> PostUploadWithHttpInfoAsync(Guid firmId, string filePurpose, Guid? personId = default(Guid?), string documentSide = default(string), System.IO.Stream fwUploadFile = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Toggle surcharging status
        /// </summary>
        /// <remarks>
        /// Allows partners to toggle surcharging on or off for a firm. Surcharge pricing values can be found using the endpoint, firms/{firm_id}/pricing 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID)</param>
        /// <param name="status">enable: The firm would like to enable surcharging disable: The firm would like to disable surcharging ### Region specific rules US environment, there is a 30 day waiting period, for surcharging to be enabled AU environment, surcharging is enabled immediately. * nb: Once surcharging has been enabled a FirmSurchargeStatusChanged webhook will be triggered </param>
        /// <param name="putSurchargingStatusRequest">Optional parameters for surcharging configuration (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SurchargeSettingsResponse</returns>
        System.Threading.Tasks.Task<SurchargeSettingsResponse> PutSurchargingStatusAsync(Guid firmId, string status, PutSurchargingStatusRequest putSurchargingStatusRequest = default(PutSurchargingStatusRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Toggle surcharging status
        /// </summary>
        /// <remarks>
        /// Allows partners to toggle surcharging on or off for a firm. Surcharge pricing values can be found using the endpoint, firms/{firm_id}/pricing 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID)</param>
        /// <param name="status">enable: The firm would like to enable surcharging disable: The firm would like to disable surcharging ### Region specific rules US environment, there is a 30 day waiting period, for surcharging to be enabled AU environment, surcharging is enabled immediately. * nb: Once surcharging has been enabled a FirmSurchargeStatusChanged webhook will be triggered </param>
        /// <param name="putSurchargingStatusRequest">Optional parameters for surcharging configuration (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SurchargeSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SurchargeSettingsResponse>> PutSurchargingStatusWithHttpInfoAsync(Guid firmId, string status, PutSurchargingStatusRequest putSurchargingStatusRequest = default(PutSurchargingStatusRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query metadata to search for Charges, for the given firm
        /// </summary>
        /// <remarks>
        /// Retrieve a firm&#39;s charges that are associated with a specific metadata key-value pair
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="metadataSearch">Metadata search details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChargeResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ChargeResponse>> SearchChargesByMetadataAsync(Guid firmId, MetadataSearch metadataSearch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query metadata to search for Charges, for the given firm
        /// </summary>
        /// <remarks>
        /// Retrieve a firm&#39;s charges that are associated with a specific metadata key-value pair
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="metadataSearch">Metadata search details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChargeResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChargeResponse>>> SearchChargesByMetadataWithHttpInfoAsync(Guid firmId, MetadataSearch metadataSearch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set firms default bank account.
        /// </summary>
        /// <remarks>
        /// Set the given account as the default bank account (Trust or Office). The account type will determine if the bank account becomes the default office or trust account.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankAccountResponse</returns>
        System.Threading.Tasks.Task<BankAccountResponse> SetFirmsDefaultBankAccountAsync(Guid firmId, Guid accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set firms default bank account.
        /// </summary>
        /// <remarks>
        /// Set the given account as the default bank account (Trust or Office). The account type will determine if the bank account becomes the default office or trust account.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankAccountResponse>> SetFirmsDefaultBankAccountWithHttpInfoAsync(Guid firmId, Guid accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sync a firm by the FeeWise Connect ID
        /// </summary>
        /// <remarks>
        /// Given a FeeWise Connect ID return a the firm&#39;s ID and status.  The firm ID can be used for future requests.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmResponse</returns>
        System.Threading.Tasks.Task<FirmResponse> SyncFirmAsync(string connectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sync a firm by the FeeWise Connect ID
        /// </summary>
        /// <remarks>
        /// Given a FeeWise Connect ID return a the firm&#39;s ID and status.  The firm ID can be used for future requests.
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirmResponse>> SyncFirmWithHttpInfoAsync(string connectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Toggle the optional products that are enabled for a firm.  Can be used to enable or disable optional payment types, such as Klarna and Affirm. The products with &#x60;Enabled&#x60; values will be enabled, products with &#x60;Disabled&#x60; will be disabled, and omitted products will be ignored. All enabled products for the firm will be returned. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="optionalProductSettings">An object of optional products that should be enabled for a firm. Only present values will be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToggleFirmProducts200Response</returns>
        System.Threading.Tasks.Task<ToggleFirmProducts200Response> ToggleFirmProductsAsync(Guid firmId, OptionalProductSettings optionalProductSettings, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Toggle the optional products that are enabled for a firm.  Can be used to enable or disable optional payment types, such as Klarna and Affirm. The products with &#x60;Enabled&#x60; values will be enabled, products with &#x60;Disabled&#x60; will be disabled, and omitted products will be ignored. All enabled products for the firm will be returned. 
        /// </remarks>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="optionalProductSettings">An object of optional products that should be enabled for a firm. Only present values will be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToggleFirmProducts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToggleFirmProducts200Response>> ToggleFirmProductsWithHttpInfoAsync(Guid firmId, OptionalProductSettings optionalProductSettings, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFirmApi : IFirmApiSync, IFirmApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FirmApi : IFirmApi
    {
        private FeeWise.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FirmApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FirmApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FirmApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FirmApi(string basePath)
        {
            this.Configuration = FeeWise.Client.Configuration.MergeConfigurations(
                FeeWise.Client.GlobalConfiguration.Instance,
                new FeeWise.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FeeWise.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FirmApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FirmApi(FeeWise.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FeeWise.Client.Configuration.MergeConfigurations(
                FeeWise.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FeeWise.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FeeWise.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FirmApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FirmApi(FeeWise.Client.ISynchronousClient client, FeeWise.Client.IAsynchronousClient asyncClient, FeeWise.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FeeWise.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FeeWise.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FeeWise.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FeeWise.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FeeWise.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Associate a firm with an affiliate Enables partners to establish an affiliation with FeeWise-registered firms. Partners must obtain the firm&#39;s unique FeeWise Connect ID from the firm&#39;s dashboard and submit it through this endpoint to create the association. The FeeWise Connect ID can be retrieved by the firm from the settings page.  On association, a &#x60;FirmAffiliationCreated&#x60; webhook event will be emitted. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmConnectId"></param>
        /// <param name="affiliateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Associate(string firmConnectId, Guid affiliateId, int operationIndex = 0)
        {
            AssociateWithHttpInfo(firmConnectId, affiliateId);
        }

        /// <summary>
        /// Associate a firm with an affiliate Enables partners to establish an affiliation with FeeWise-registered firms. Partners must obtain the firm&#39;s unique FeeWise Connect ID from the firm&#39;s dashboard and submit it through this endpoint to create the association. The FeeWise Connect ID can be retrieved by the firm from the settings page.  On association, a &#x60;FirmAffiliationCreated&#x60; webhook event will be emitted. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmConnectId"></param>
        /// <param name="affiliateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FeeWise.Client.ApiResponse<Object> AssociateWithHttpInfo(string firmConnectId, Guid affiliateId, int operationIndex = 0)
        {
            // verify the required parameter 'firmConnectId' is set
            if (firmConnectId == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'firmConnectId' when calling FirmApi->Associate");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_connect_id", FeeWise.Client.ClientUtils.ParameterToString(firmConnectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("affiliate_id", FeeWise.Client.ClientUtils.ParameterToString(affiliateId)); // header parameter

            localVarRequestOptions.Operation = "FirmApi.Associate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v3/partner/firms/connect/{firm_connect_id}/associate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Associate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a firm with an affiliate Enables partners to establish an affiliation with FeeWise-registered firms. Partners must obtain the firm&#39;s unique FeeWise Connect ID from the firm&#39;s dashboard and submit it through this endpoint to create the association. The FeeWise Connect ID can be retrieved by the firm from the settings page.  On association, a &#x60;FirmAffiliationCreated&#x60; webhook event will be emitted. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmConnectId"></param>
        /// <param name="affiliateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociateAsync(string firmConnectId, Guid affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssociateWithHttpInfoAsync(firmConnectId, affiliateId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Associate a firm with an affiliate Enables partners to establish an affiliation with FeeWise-registered firms. Partners must obtain the firm&#39;s unique FeeWise Connect ID from the firm&#39;s dashboard and submit it through this endpoint to create the association. The FeeWise Connect ID can be retrieved by the firm from the settings page.  On association, a &#x60;FirmAffiliationCreated&#x60; webhook event will be emitted. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmConnectId"></param>
        /// <param name="affiliateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<Object>> AssociateWithHttpInfoAsync(string firmConnectId, Guid affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'firmConnectId' is set
            if (firmConnectId == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'firmConnectId' when calling FirmApi->Associate");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_connect_id", FeeWise.Client.ClientUtils.ParameterToString(firmConnectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("affiliate_id", FeeWise.Client.ClientUtils.ParameterToString(affiliateId)); // header parameter

            localVarRequestOptions.Operation = "FirmApi.Associate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v3/partner/firms/connect/{firm_connect_id}/associate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Associate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new firm The createFirm API endpoint facilitates the onboarding of a new firm into the current system. The endpoint allows clients to initiate the onboarding process for their respective firms. Upon a successful http response, the firm&#39;s status will be set to \&quot;pending\&quot; in FeeWise. The onboarding process follows a two-step procedure. Initially, the operational team will review the firm&#39;s details and perform necessary verifications. Once the firm&#39;s information has been validated and approved by the operational team, the firm will be officially onboarded into FeeWise. During the onboarding approval process, a webhook will be triggered for the \&quot;firm.onboarded\&quot; event. The webhook serves as a notification mechanism, enabling integrations and external systems to be updated about the newly onboarded firm. It is important to note that the onboarding process might take some time to complete, as it involves manual verification steps by the operational team. However, clients can track the status of their firm through FeeWise and receive real-time updates through the webhook once the firm onboarding is successfully approved. Please ensure that all necessary information is provided accurately when using this API endpoint to avoid delays in the onboarding process. Additionally, clients should handle the webhook appropriately to capture the \&quot;firm.onboarded\&quot; event and update their internal systems accordingly. Roles must have one and only one representative.  Representative person is an authorised person who represents the firms. The representative must be either an executive or owner. All owners of the firm with greater that 25% must be specified in the roles. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFirm">Firm Details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirmDetails</returns>
        public FirmDetails CreateFirm(CreateFirm createFirm, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<FirmDetails> localVarResponse = CreateFirmWithHttpInfo(createFirm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new firm The createFirm API endpoint facilitates the onboarding of a new firm into the current system. The endpoint allows clients to initiate the onboarding process for their respective firms. Upon a successful http response, the firm&#39;s status will be set to \&quot;pending\&quot; in FeeWise. The onboarding process follows a two-step procedure. Initially, the operational team will review the firm&#39;s details and perform necessary verifications. Once the firm&#39;s information has been validated and approved by the operational team, the firm will be officially onboarded into FeeWise. During the onboarding approval process, a webhook will be triggered for the \&quot;firm.onboarded\&quot; event. The webhook serves as a notification mechanism, enabling integrations and external systems to be updated about the newly onboarded firm. It is important to note that the onboarding process might take some time to complete, as it involves manual verification steps by the operational team. However, clients can track the status of their firm through FeeWise and receive real-time updates through the webhook once the firm onboarding is successfully approved. Please ensure that all necessary information is provided accurately when using this API endpoint to avoid delays in the onboarding process. Additionally, clients should handle the webhook appropriately to capture the \&quot;firm.onboarded\&quot; event and update their internal systems accordingly. Roles must have one and only one representative.  Representative person is an authorised person who represents the firms. The representative must be either an executive or owner. All owners of the firm with greater that 25% must be specified in the roles. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFirm">Firm Details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirmDetails</returns>
        public FeeWise.Client.ApiResponse<FirmDetails> CreateFirmWithHttpInfo(CreateFirm createFirm, int operationIndex = 0)
        {
            // verify the required parameter 'createFirm' is set
            if (createFirm == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'createFirm' when calling FirmApi->CreateFirm");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFirm;

            localVarRequestOptions.Operation = "FirmApi.CreateFirm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FirmDetails>("/api/v3/partner/firms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFirm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new firm The createFirm API endpoint facilitates the onboarding of a new firm into the current system. The endpoint allows clients to initiate the onboarding process for their respective firms. Upon a successful http response, the firm&#39;s status will be set to \&quot;pending\&quot; in FeeWise. The onboarding process follows a two-step procedure. Initially, the operational team will review the firm&#39;s details and perform necessary verifications. Once the firm&#39;s information has been validated and approved by the operational team, the firm will be officially onboarded into FeeWise. During the onboarding approval process, a webhook will be triggered for the \&quot;firm.onboarded\&quot; event. The webhook serves as a notification mechanism, enabling integrations and external systems to be updated about the newly onboarded firm. It is important to note that the onboarding process might take some time to complete, as it involves manual verification steps by the operational team. However, clients can track the status of their firm through FeeWise and receive real-time updates through the webhook once the firm onboarding is successfully approved. Please ensure that all necessary information is provided accurately when using this API endpoint to avoid delays in the onboarding process. Additionally, clients should handle the webhook appropriately to capture the \&quot;firm.onboarded\&quot; event and update their internal systems accordingly. Roles must have one and only one representative.  Representative person is an authorised person who represents the firms. The representative must be either an executive or owner. All owners of the firm with greater that 25% must be specified in the roles. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFirm">Firm Details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmDetails</returns>
        public async System.Threading.Tasks.Task<FirmDetails> CreateFirmAsync(CreateFirm createFirm, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<FirmDetails> localVarResponse = await CreateFirmWithHttpInfoAsync(createFirm, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new firm The createFirm API endpoint facilitates the onboarding of a new firm into the current system. The endpoint allows clients to initiate the onboarding process for their respective firms. Upon a successful http response, the firm&#39;s status will be set to \&quot;pending\&quot; in FeeWise. The onboarding process follows a two-step procedure. Initially, the operational team will review the firm&#39;s details and perform necessary verifications. Once the firm&#39;s information has been validated and approved by the operational team, the firm will be officially onboarded into FeeWise. During the onboarding approval process, a webhook will be triggered for the \&quot;firm.onboarded\&quot; event. The webhook serves as a notification mechanism, enabling integrations and external systems to be updated about the newly onboarded firm. It is important to note that the onboarding process might take some time to complete, as it involves manual verification steps by the operational team. However, clients can track the status of their firm through FeeWise and receive real-time updates through the webhook once the firm onboarding is successfully approved. Please ensure that all necessary information is provided accurately when using this API endpoint to avoid delays in the onboarding process. Additionally, clients should handle the webhook appropriately to capture the \&quot;firm.onboarded\&quot; event and update their internal systems accordingly. Roles must have one and only one representative.  Representative person is an authorised person who represents the firms. The representative must be either an executive or owner. All owners of the firm with greater that 25% must be specified in the roles. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFirm">Firm Details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmDetails)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<FirmDetails>> CreateFirmWithHttpInfoAsync(CreateFirm createFirm, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createFirm' is set
            if (createFirm == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'createFirm' when calling FirmApi->CreateFirm");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFirm;

            localVarRequestOptions.Operation = "FirmApi.CreateFirm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FirmDetails>("/api/v3/partner/firms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFirm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Firm Account Owner Create a firm account owner, once activated, they can sign into the FeeWise dashboard.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="createFirmAccountOwnerRequest">Firm account owner details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateFirmAccountOwner(Guid firmId, CreateFirmAccountOwnerRequest createFirmAccountOwnerRequest, int operationIndex = 0)
        {
            CreateFirmAccountOwnerWithHttpInfo(firmId, createFirmAccountOwnerRequest);
        }

        /// <summary>
        /// Create Firm Account Owner Create a firm account owner, once activated, they can sign into the FeeWise dashboard.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="createFirmAccountOwnerRequest">Firm account owner details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FeeWise.Client.ApiResponse<Object> CreateFirmAccountOwnerWithHttpInfo(Guid firmId, CreateFirmAccountOwnerRequest createFirmAccountOwnerRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createFirmAccountOwnerRequest' is set
            if (createFirmAccountOwnerRequest == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'createFirmAccountOwnerRequest' when calling FirmApi->CreateFirmAccountOwner");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = createFirmAccountOwnerRequest;

            localVarRequestOptions.Operation = "FirmApi.CreateFirmAccountOwner";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v3/partner/firms/{firm_id}/owner", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFirmAccountOwner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Firm Account Owner Create a firm account owner, once activated, they can sign into the FeeWise dashboard.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="createFirmAccountOwnerRequest">Firm account owner details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateFirmAccountOwnerAsync(Guid firmId, CreateFirmAccountOwnerRequest createFirmAccountOwnerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateFirmAccountOwnerWithHttpInfoAsync(firmId, createFirmAccountOwnerRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Firm Account Owner Create a firm account owner, once activated, they can sign into the FeeWise dashboard.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="createFirmAccountOwnerRequest">Firm account owner details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<Object>> CreateFirmAccountOwnerWithHttpInfoAsync(Guid firmId, CreateFirmAccountOwnerRequest createFirmAccountOwnerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createFirmAccountOwnerRequest' is set
            if (createFirmAccountOwnerRequest == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'createFirmAccountOwnerRequest' when calling FirmApi->CreateFirmAccountOwner");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = createFirmAccountOwnerRequest;

            localVarRequestOptions.Operation = "FirmApi.CreateFirmAccountOwner";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v3/partner/firms/{firm_id}/owner", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFirmAccountOwner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a bank account Create an Office or Trust account for a Firm.  If the account doesn&#39;t already exist, the new account will be created in &#x60;Pending&#x60; state. You need to listen for the &#x60;firm.bank-account.updated&#x60; webhook to know when the account is &#x60;Valid&#x60; or &#x60;Invalid&#x60;.  New account validation is subject to [Stripe&#39;s validation rules](https://docs.stripe.com/connect/payouts-bank-accounts?bank-account-collection-integration&#x3D;direct-api&amp;bank-account-collection-method&#x3D;manual-entry&amp;account-country&#x3D;US#collecting-external-accounts), which vary by region. Please refer to these rules if the &#x60;firm.bank-account.updated&#x60; webhook says your account is &#x60;Invalid&#x60;. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="bankAccount">New account details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankAccount</returns>
        public BankAccount CreateFirmBankAccount(Guid firmId, BankAccount bankAccount, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<BankAccount> localVarResponse = CreateFirmBankAccountWithHttpInfo(firmId, bankAccount);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bank account Create an Office or Trust account for a Firm.  If the account doesn&#39;t already exist, the new account will be created in &#x60;Pending&#x60; state. You need to listen for the &#x60;firm.bank-account.updated&#x60; webhook to know when the account is &#x60;Valid&#x60; or &#x60;Invalid&#x60;.  New account validation is subject to [Stripe&#39;s validation rules](https://docs.stripe.com/connect/payouts-bank-accounts?bank-account-collection-integration&#x3D;direct-api&amp;bank-account-collection-method&#x3D;manual-entry&amp;account-country&#x3D;US#collecting-external-accounts), which vary by region. Please refer to these rules if the &#x60;firm.bank-account.updated&#x60; webhook says your account is &#x60;Invalid&#x60;. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="bankAccount">New account details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankAccount</returns>
        public FeeWise.Client.ApiResponse<BankAccount> CreateFirmBankAccountWithHttpInfo(Guid firmId, BankAccount bankAccount, int operationIndex = 0)
        {
            // verify the required parameter 'bankAccount' is set
            if (bankAccount == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'bankAccount' when calling FirmApi->CreateFirmBankAccount");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = bankAccount;

            localVarRequestOptions.Operation = "FirmApi.CreateFirmBankAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BankAccount>("/api/v3/partner/firms/{firm_id}/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFirmBankAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a bank account Create an Office or Trust account for a Firm.  If the account doesn&#39;t already exist, the new account will be created in &#x60;Pending&#x60; state. You need to listen for the &#x60;firm.bank-account.updated&#x60; webhook to know when the account is &#x60;Valid&#x60; or &#x60;Invalid&#x60;.  New account validation is subject to [Stripe&#39;s validation rules](https://docs.stripe.com/connect/payouts-bank-accounts?bank-account-collection-integration&#x3D;direct-api&amp;bank-account-collection-method&#x3D;manual-entry&amp;account-country&#x3D;US#collecting-external-accounts), which vary by region. Please refer to these rules if the &#x60;firm.bank-account.updated&#x60; webhook says your account is &#x60;Invalid&#x60;. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="bankAccount">New account details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankAccount</returns>
        public async System.Threading.Tasks.Task<BankAccount> CreateFirmBankAccountAsync(Guid firmId, BankAccount bankAccount, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<BankAccount> localVarResponse = await CreateFirmBankAccountWithHttpInfoAsync(firmId, bankAccount, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bank account Create an Office or Trust account for a Firm.  If the account doesn&#39;t already exist, the new account will be created in &#x60;Pending&#x60; state. You need to listen for the &#x60;firm.bank-account.updated&#x60; webhook to know when the account is &#x60;Valid&#x60; or &#x60;Invalid&#x60;.  New account validation is subject to [Stripe&#39;s validation rules](https://docs.stripe.com/connect/payouts-bank-accounts?bank-account-collection-integration&#x3D;direct-api&amp;bank-account-collection-method&#x3D;manual-entry&amp;account-country&#x3D;US#collecting-external-accounts), which vary by region. Please refer to these rules if the &#x60;firm.bank-account.updated&#x60; webhook says your account is &#x60;Invalid&#x60;. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="bankAccount">New account details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankAccount)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<BankAccount>> CreateFirmBankAccountWithHttpInfoAsync(Guid firmId, BankAccount bankAccount, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bankAccount' is set
            if (bankAccount == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'bankAccount' when calling FirmApi->CreateFirmBankAccount");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = bankAccount;

            localVarRequestOptions.Operation = "FirmApi.CreateFirmBankAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BankAccount>("/api/v3/partner/firms/{firm_id}/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFirmBankAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a payment token for a customer. Create a payment token for a customer to capture their payment method details and later use to charge them via the charge and pay endpoint /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token}.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentTokenBody">Customer and payment method details nb If payment method is not provided, the default will be set to Card. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentTokenResponse</returns>
        public PaymentTokenResponse CreatePaymentToken(Guid firmId, PaymentTokenBody paymentTokenBody, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<PaymentTokenResponse> localVarResponse = CreatePaymentTokenWithHttpInfo(firmId, paymentTokenBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a payment token for a customer. Create a payment token for a customer to capture their payment method details and later use to charge them via the charge and pay endpoint /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token}.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentTokenBody">Customer and payment method details nb If payment method is not provided, the default will be set to Card. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentTokenResponse</returns>
        public FeeWise.Client.ApiResponse<PaymentTokenResponse> CreatePaymentTokenWithHttpInfo(Guid firmId, PaymentTokenBody paymentTokenBody, int operationIndex = 0)
        {
            // verify the required parameter 'paymentTokenBody' is set
            if (paymentTokenBody == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'paymentTokenBody' when calling FirmApi->CreatePaymentToken");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = paymentTokenBody;

            localVarRequestOptions.Operation = "FirmApi.CreatePaymentToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentTokenResponse>("/api/v3/partner/firms/{firm_id}/payment_token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a payment token for a customer. Create a payment token for a customer to capture their payment method details and later use to charge them via the charge and pay endpoint /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token}.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentTokenBody">Customer and payment method details nb If payment method is not provided, the default will be set to Card. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentTokenResponse</returns>
        public async System.Threading.Tasks.Task<PaymentTokenResponse> CreatePaymentTokenAsync(Guid firmId, PaymentTokenBody paymentTokenBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<PaymentTokenResponse> localVarResponse = await CreatePaymentTokenWithHttpInfoAsync(firmId, paymentTokenBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a payment token for a customer. Create a payment token for a customer to capture their payment method details and later use to charge them via the charge and pay endpoint /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token}.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentTokenBody">Customer and payment method details nb If payment method is not provided, the default will be set to Card. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentTokenResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<PaymentTokenResponse>> CreatePaymentTokenWithHttpInfoAsync(Guid firmId, PaymentTokenBody paymentTokenBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentTokenBody' is set
            if (paymentTokenBody == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'paymentTokenBody' when calling FirmApi->CreatePaymentToken");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = paymentTokenBody;

            localVarRequestOptions.Operation = "FirmApi.CreatePaymentToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentTokenResponse>("/api/v3/partner/firms/{firm_id}/payment_token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a bank account Delete a bank account for a Firm nb: If a bank account is related to an inflight transaction, payout or similar the bank account deletion will fail. Contact FeeWise support to resolve the issue. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteFirmBankAccount(Guid firmId, Guid accountId, int operationIndex = 0)
        {
            DeleteFirmBankAccountWithHttpInfo(firmId, accountId);
        }

        /// <summary>
        /// Delete a bank account Delete a bank account for a Firm nb: If a bank account is related to an inflight transaction, payout or similar the bank account deletion will fail. Contact FeeWise support to resolve the issue. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FeeWise.Client.ApiResponse<Object> DeleteFirmBankAccountWithHttpInfo(Guid firmId, Guid accountId, int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("account_id", FeeWise.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.DeleteFirmBankAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v3/partner/firms/{firm_id}/accounts/{account_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFirmBankAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a bank account Delete a bank account for a Firm nb: If a bank account is related to an inflight transaction, payout or similar the bank account deletion will fail. Contact FeeWise support to resolve the issue. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFirmBankAccountAsync(Guid firmId, Guid accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFirmBankAccountWithHttpInfoAsync(firmId, accountId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a bank account Delete a bank account for a Firm nb: If a bank account is related to an inflight transaction, payout or similar the bank account deletion will fail. Contact FeeWise support to resolve the issue. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<Object>> DeleteFirmBankAccountWithHttpInfoAsync(Guid firmId, Guid accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("account_id", FeeWise.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.DeleteFirmBankAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v3/partner/firms/{firm_id}/accounts/{account_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFirmBankAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a payment token Delete a payment token for given firm
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePaymentToken(Guid firmId, Guid paymentToken, int operationIndex = 0)
        {
            DeletePaymentTokenWithHttpInfo(firmId, paymentToken);
        }

        /// <summary>
        /// Delete a payment token Delete a payment token for given firm
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FeeWise.Client.ApiResponse<Object> DeletePaymentTokenWithHttpInfo(Guid firmId, Guid paymentToken, int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_token", FeeWise.Client.ClientUtils.ParameterToString(paymentToken)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.DeletePaymentToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v3/partner/firms/{firm_id}/payment_token/{payment_token}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePaymentToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a payment token Delete a payment token for given firm
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePaymentTokenAsync(Guid firmId, Guid paymentToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePaymentTokenWithHttpInfoAsync(firmId, paymentToken, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a payment token Delete a payment token for given firm
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="paymentToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<Object>> DeletePaymentTokenWithHttpInfoAsync(Guid firmId, Guid paymentToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_token", FeeWise.Client.ClientUtils.ParameterToString(paymentToken)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.DeletePaymentToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v3/partner/firms/{firm_id}/payment_token/{payment_token}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePaymentToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a firm Deprecated, prefer /api/v3/partner/firms/firm-details.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirmResponse</returns>
        public FirmResponse GetFirm(Guid firmId, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<FirmResponse> localVarResponse = GetFirmWithHttpInfo(firmId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a firm Deprecated, prefer /api/v3/partner/firms/firm-details.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirmResponse</returns>
        public FeeWise.Client.ApiResponse<FirmResponse> GetFirmWithHttpInfo(Guid firmId, int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.GetFirm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirmResponse>("/api/v3/partner/firms/{firm_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a firm Deprecated, prefer /api/v3/partner/firms/firm-details.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmResponse</returns>
        public async System.Threading.Tasks.Task<FirmResponse> GetFirmAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<FirmResponse> localVarResponse = await GetFirmWithHttpInfoAsync(firmId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a firm Deprecated, prefer /api/v3/partner/firms/firm-details.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<FirmResponse>> GetFirmWithHttpInfoAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.GetFirm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirmResponse>("/api/v3/partner/firms/{firm_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a bank account by ID Get a bank account by ID.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankAccount</returns>
        public BankAccount GetFirmBankAccountByID(Guid firmId, Guid accountId, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<BankAccount> localVarResponse = GetFirmBankAccountByIDWithHttpInfo(firmId, accountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a bank account by ID Get a bank account by ID.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankAccount</returns>
        public FeeWise.Client.ApiResponse<BankAccount> GetFirmBankAccountByIDWithHttpInfo(Guid firmId, Guid accountId, int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("account_id", FeeWise.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.GetFirmBankAccountByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BankAccount>("/api/v3/partner/firms/{firm_id}/accounts/{account_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirmBankAccountByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a bank account by ID Get a bank account by ID.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankAccount</returns>
        public async System.Threading.Tasks.Task<BankAccount> GetFirmBankAccountByIDAsync(Guid firmId, Guid accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<BankAccount> localVarResponse = await GetFirmBankAccountByIDWithHttpInfoAsync(firmId, accountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a bank account by ID Get a bank account by ID.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankAccount)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<BankAccount>> GetFirmBankAccountByIDWithHttpInfoAsync(Guid firmId, Guid accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("account_id", FeeWise.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.GetFirmBankAccountByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BankAccount>("/api/v3/partner/firms/{firm_id}/accounts/{account_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirmBankAccountByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List bank accounts Return all bank accounts linked to a firm.  If no accounts are linked an empty array is returned.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankAccountsResponse</returns>
        public BankAccountsResponse GetFirmBankAccounts(Guid firmId, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<BankAccountsResponse> localVarResponse = GetFirmBankAccountsWithHttpInfo(firmId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List bank accounts Return all bank accounts linked to a firm.  If no accounts are linked an empty array is returned.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankAccountsResponse</returns>
        public FeeWise.Client.ApiResponse<BankAccountsResponse> GetFirmBankAccountsWithHttpInfo(Guid firmId, int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.GetFirmBankAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (FirmAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-FIRM-ID", this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BankAccountsResponse>("/api/v3/partner/firms/{firm_id}/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirmBankAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List bank accounts Return all bank accounts linked to a firm.  If no accounts are linked an empty array is returned.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankAccountsResponse</returns>
        public async System.Threading.Tasks.Task<BankAccountsResponse> GetFirmBankAccountsAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<BankAccountsResponse> localVarResponse = await GetFirmBankAccountsWithHttpInfoAsync(firmId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List bank accounts Return all bank accounts linked to a firm.  If no accounts are linked an empty array is returned.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankAccountsResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<BankAccountsResponse>> GetFirmBankAccountsWithHttpInfoAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.GetFirmBankAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (FirmAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-FIRM-ID", this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BankAccountsResponse>("/api/v3/partner/firms/{firm_id}/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirmBankAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get firm branding Get firm branding. Nb if branding is not set, an empty model will be returned. nb To avoid overwriting the Firms existing brand settings by mistake, this GET endpoint should be used to retrieve the firms current branding PRIOR to using the POST endpoint.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPartnerBranding200Response</returns>
        public GetPartnerBranding200Response GetFirmBranding(Guid firmId, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<GetPartnerBranding200Response> localVarResponse = GetFirmBrandingWithHttpInfo(firmId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get firm branding Get firm branding. Nb if branding is not set, an empty model will be returned. nb To avoid overwriting the Firms existing brand settings by mistake, this GET endpoint should be used to retrieve the firms current branding PRIOR to using the POST endpoint.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPartnerBranding200Response</returns>
        public FeeWise.Client.ApiResponse<GetPartnerBranding200Response> GetFirmBrandingWithHttpInfo(Guid firmId, int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.GetFirmBranding";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPartnerBranding200Response>("/api/v3/partner/firms/{firm_id}/branding", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirmBranding", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get firm branding Get firm branding. Nb if branding is not set, an empty model will be returned. nb To avoid overwriting the Firms existing brand settings by mistake, this GET endpoint should be used to retrieve the firms current branding PRIOR to using the POST endpoint.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPartnerBranding200Response</returns>
        public async System.Threading.Tasks.Task<GetPartnerBranding200Response> GetFirmBrandingAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<GetPartnerBranding200Response> localVarResponse = await GetFirmBrandingWithHttpInfoAsync(firmId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get firm branding Get firm branding. Nb if branding is not set, an empty model will be returned. nb To avoid overwriting the Firms existing brand settings by mistake, this GET endpoint should be used to retrieve the firms current branding PRIOR to using the POST endpoint.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPartnerBranding200Response)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<GetPartnerBranding200Response>> GetFirmBrandingWithHttpInfoAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.GetFirmBranding";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPartnerBranding200Response>("/api/v3/partner/firms/{firm_id}/branding", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirmBranding", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the customers for a firm. Return an array of all customers with their saved payment methods. If no customers, an empty array is returned.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersResponse</returns>
        public CustomersResponse GetFirmCustomers(Guid firmId, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<CustomersResponse> localVarResponse = GetFirmCustomersWithHttpInfo(firmId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all the customers for a firm. Return an array of all customers with their saved payment methods. If no customers, an empty array is returned.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersResponse</returns>
        public FeeWise.Client.ApiResponse<CustomersResponse> GetFirmCustomersWithHttpInfo(Guid firmId, int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.GetFirmCustomers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomersResponse>("/api/v3/partner/firms/{firm_id}/customers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirmCustomers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the customers for a firm. Return an array of all customers with their saved payment methods. If no customers, an empty array is returned.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersResponse</returns>
        public async System.Threading.Tasks.Task<CustomersResponse> GetFirmCustomersAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<CustomersResponse> localVarResponse = await GetFirmCustomersWithHttpInfoAsync(firmId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all the customers for a firm. Return an array of all customers with their saved payment methods. If no customers, an empty array is returned.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<CustomersResponse>> GetFirmCustomersWithHttpInfoAsync(Guid firmId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.GetFirmCustomers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomersResponse>("/api/v3/partner/firms/{firm_id}/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirmCustomers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get firm details Get firm details by Firm ID (UUID) - This is the FeeWise unique ID for a firm OR by External ID (string), the partner&#39;s own unique id for a firm. Both will return the same model Firm surcharge settings is defined here. Surcharge price rates can be found as customer variable fee and customer fixed fee per product here: &#39;/api/v3/partner/firms/{firm_id}/pricing&#39;. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID) (optional)</param>
        /// <param name="externalId">External ID (string) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirmDetails</returns>
        public FirmDetails GetFirmDetails(Guid? firmId = default(Guid?), string externalId = default(string), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<FirmDetails> localVarResponse = GetFirmDetailsWithHttpInfo(firmId, externalId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get firm details Get firm details by Firm ID (UUID) - This is the FeeWise unique ID for a firm OR by External ID (string), the partner&#39;s own unique id for a firm. Both will return the same model Firm surcharge settings is defined here. Surcharge price rates can be found as customer variable fee and customer fixed fee per product here: &#39;/api/v3/partner/firms/{firm_id}/pricing&#39;. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID) (optional)</param>
        /// <param name="externalId">External ID (string) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirmDetails</returns>
        public FeeWise.Client.ApiResponse<FirmDetails> GetFirmDetailsWithHttpInfo(Guid? firmId = default(Guid?), string externalId = default(string), int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (firmId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "firm_id", firmId));
            }
            if (externalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId));
            }

            localVarRequestOptions.Operation = "FirmApi.GetFirmDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirmDetails>("/api/v3/partner/firms/firm-details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirmDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get firm details Get firm details by Firm ID (UUID) - This is the FeeWise unique ID for a firm OR by External ID (string), the partner&#39;s own unique id for a firm. Both will return the same model Firm surcharge settings is defined here. Surcharge price rates can be found as customer variable fee and customer fixed fee per product here: &#39;/api/v3/partner/firms/{firm_id}/pricing&#39;. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID) (optional)</param>
        /// <param name="externalId">External ID (string) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmDetails</returns>
        public async System.Threading.Tasks.Task<FirmDetails> GetFirmDetailsAsync(Guid? firmId = default(Guid?), string externalId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<FirmDetails> localVarResponse = await GetFirmDetailsWithHttpInfoAsync(firmId, externalId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get firm details Get firm details by Firm ID (UUID) - This is the FeeWise unique ID for a firm OR by External ID (string), the partner&#39;s own unique id for a firm. Both will return the same model Firm surcharge settings is defined here. Surcharge price rates can be found as customer variable fee and customer fixed fee per product here: &#39;/api/v3/partner/firms/{firm_id}/pricing&#39;. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID) (optional)</param>
        /// <param name="externalId">External ID (string) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmDetails)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<FirmDetails>> GetFirmDetailsWithHttpInfoAsync(Guid? firmId = default(Guid?), string externalId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (firmId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "firm_id", firmId));
            }
            if (externalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId));
            }

            localVarRequestOptions.Operation = "FirmApi.GetFirmDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirmDetails>("/api/v3/partner/firms/firm-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirmDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the pricing products for a firm and their constraints. Returns an array of pricing products for a specific firm. Surcharge price rates are customer variable fee and customer fixed fee.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="amount">An example amount.  When supplied, each payment method in the response will contain an &#x60;example_amount&#x60;, representing the full amount that would be charged including fees, given the amount passed in.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToggleFirmProducts200Response</returns>
        public ToggleFirmProducts200Response GetFirmPricing(Guid firmId, string amount = default(string), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<ToggleFirmProducts200Response> localVarResponse = GetFirmPricingWithHttpInfo(firmId, amount);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the pricing products for a firm and their constraints. Returns an array of pricing products for a specific firm. Surcharge price rates are customer variable fee and customer fixed fee.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="amount">An example amount.  When supplied, each payment method in the response will contain an &#x60;example_amount&#x60;, representing the full amount that would be charged including fees, given the amount passed in.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToggleFirmProducts200Response</returns>
        public FeeWise.Client.ApiResponse<ToggleFirmProducts200Response> GetFirmPricingWithHttpInfo(Guid firmId, string amount = default(string), int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            if (amount != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "amount", amount));
            }

            localVarRequestOptions.Operation = "FirmApi.GetFirmPricing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ToggleFirmProducts200Response>("/api/v3/partner/firms/{firm_id}/pricing", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirmPricing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the pricing products for a firm and their constraints. Returns an array of pricing products for a specific firm. Surcharge price rates are customer variable fee and customer fixed fee.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="amount">An example amount.  When supplied, each payment method in the response will contain an &#x60;example_amount&#x60;, representing the full amount that would be charged including fees, given the amount passed in.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToggleFirmProducts200Response</returns>
        public async System.Threading.Tasks.Task<ToggleFirmProducts200Response> GetFirmPricingAsync(Guid firmId, string amount = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<ToggleFirmProducts200Response> localVarResponse = await GetFirmPricingWithHttpInfoAsync(firmId, amount, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the pricing products for a firm and their constraints. Returns an array of pricing products for a specific firm. Surcharge price rates are customer variable fee and customer fixed fee.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="amount">An example amount.  When supplied, each payment method in the response will contain an &#x60;example_amount&#x60;, representing the full amount that would be charged including fees, given the amount passed in.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToggleFirmProducts200Response)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<ToggleFirmProducts200Response>> GetFirmPricingWithHttpInfoAsync(Guid firmId, string amount = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            if (amount != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "amount", amount));
            }

            localVarRequestOptions.Operation = "FirmApi.GetFirmPricing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ToggleFirmProducts200Response>("/api/v3/partner/firms/{firm_id}/pricing", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirmPricing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get firms get all firms for current channel partner
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirmsResponse</returns>
        public FirmsResponse GetFirms(int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<FirmsResponse> localVarResponse = GetFirmsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get firms get all firms for current channel partner
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirmsResponse</returns>
        public FeeWise.Client.ApiResponse<FirmsResponse> GetFirmsWithHttpInfo(int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FirmApi.GetFirms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirmsResponse>("/api/v3/partner/firms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get firms get all firms for current channel partner
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmsResponse</returns>
        public async System.Threading.Tasks.Task<FirmsResponse> GetFirmsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<FirmsResponse> localVarResponse = await GetFirmsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get firms get all firms for current channel partner
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmsResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<FirmsResponse>> GetFirmsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FirmApi.GetFirms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirmsResponse>("/api/v3/partner/firms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFirms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a magic link Create a magic link that, on click, redirects to a defined URL within the dashboard. Defaults to homepage 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="destinationUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMagicLink200Response</returns>
        public GetMagicLink200Response GetMagicLink(Guid firmId, string destinationUrl = default(string), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<GetMagicLink200Response> localVarResponse = GetMagicLinkWithHttpInfo(firmId, destinationUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a magic link Create a magic link that, on click, redirects to a defined URL within the dashboard. Defaults to homepage 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="destinationUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMagicLink200Response</returns>
        public FeeWise.Client.ApiResponse<GetMagicLink200Response> GetMagicLinkWithHttpInfo(Guid firmId, string destinationUrl = default(string), int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            if (destinationUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "destination_url", destinationUrl));
            }

            localVarRequestOptions.Operation = "FirmApi.GetMagicLink";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (FirmAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-FIRM-ID", this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetMagicLink200Response>("/api/v3/partner/firms/{firm_id}/magic-link", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMagicLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a magic link Create a magic link that, on click, redirects to a defined URL within the dashboard. Defaults to homepage 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="destinationUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMagicLink200Response</returns>
        public async System.Threading.Tasks.Task<GetMagicLink200Response> GetMagicLinkAsync(Guid firmId, string destinationUrl = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<GetMagicLink200Response> localVarResponse = await GetMagicLinkWithHttpInfoAsync(firmId, destinationUrl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a magic link Create a magic link that, on click, redirects to a defined URL within the dashboard. Defaults to homepage 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="destinationUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMagicLink200Response)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<GetMagicLink200Response>> GetMagicLinkWithHttpInfoAsync(Guid firmId, string destinationUrl = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            if (destinationUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "destination_url", destinationUrl));
            }

            localVarRequestOptions.Operation = "FirmApi.GetMagicLink";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (FirmAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-FIRM-ID", this.Configuration.GetApiKeyWithPrefix("X-FIRM-ID"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetMagicLink200Response>("/api/v3/partner/firms/{firm_id}/magic-link", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMagicLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set firm branding colour for firm dashboard Update firm branding colour
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="postFirmBrandingColourRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PostFirmBrandingColour(Guid firmId, PostFirmBrandingColourRequest postFirmBrandingColourRequest = default(PostFirmBrandingColourRequest), int operationIndex = 0)
        {
            PostFirmBrandingColourWithHttpInfo(firmId, postFirmBrandingColourRequest);
        }

        /// <summary>
        /// Set firm branding colour for firm dashboard Update firm branding colour
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="postFirmBrandingColourRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FeeWise.Client.ApiResponse<Object> PostFirmBrandingColourWithHttpInfo(Guid firmId, PostFirmBrandingColourRequest postFirmBrandingColourRequest = default(PostFirmBrandingColourRequest), int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = postFirmBrandingColourRequest;

            localVarRequestOptions.Operation = "FirmApi.PostFirmBrandingColour";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v3/partner/firms/{firm_id}/branding/colour", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFirmBrandingColour", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set firm branding colour for firm dashboard Update firm branding colour
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="postFirmBrandingColourRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostFirmBrandingColourAsync(Guid firmId, PostFirmBrandingColourRequest postFirmBrandingColourRequest = default(PostFirmBrandingColourRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostFirmBrandingColourWithHttpInfoAsync(firmId, postFirmBrandingColourRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set firm branding colour for firm dashboard Update firm branding colour
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="postFirmBrandingColourRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<Object>> PostFirmBrandingColourWithHttpInfoAsync(Guid firmId, PostFirmBrandingColourRequest postFirmBrandingColourRequest = default(PostFirmBrandingColourRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = postFirmBrandingColourRequest;

            localVarRequestOptions.Operation = "FirmApi.PostFirmBrandingColour";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v3/partner/firms/{firm_id}/branding/colour", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFirmBrandingColour", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload file Upload files to FeeWise. nb Content-Type header must be multipart/form-data example  curl -X POST -F \&quot;fwUploadFile&#x3D;@/path/to/file.png\&quot; \\     http://localhost:8080/api/v3/partner/firms/&lt;firm_id&gt;/upload?file_purpose&#x3D;identity_document \\       - -header &#39;X-CHANNEL-PARTNER-ID: &lt;channel partner id&gt;&#39;  \\       - -header &#39;X-API-KEY: &lt;api key&gt;&#39; \\       - -header \&quot;Content-Type: multipart/form-data\&quot; 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="filePurpose">Purpose of the uploaded file, must match one of the enum values</param>
        /// <param name="personId">person_id is required when the file_purpose is \&quot;identity_document\&quot;. The person_id can be retrieved from the firm details endpoint.  (optional)</param>
        /// <param name="documentSide">The side of the \&quot;identity_document\&quot; being uploaded. (optional, default to front)</param>
        /// <param name="fwUploadFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostUpload200Response</returns>
        public PostUpload200Response PostUpload(Guid firmId, string filePurpose, Guid? personId = default(Guid?), string documentSide = default(string), System.IO.Stream fwUploadFile = default(System.IO.Stream), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<PostUpload200Response> localVarResponse = PostUploadWithHttpInfo(firmId, filePurpose, personId, documentSide, fwUploadFile);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload file Upload files to FeeWise. nb Content-Type header must be multipart/form-data example  curl -X POST -F \&quot;fwUploadFile&#x3D;@/path/to/file.png\&quot; \\     http://localhost:8080/api/v3/partner/firms/&lt;firm_id&gt;/upload?file_purpose&#x3D;identity_document \\       - -header &#39;X-CHANNEL-PARTNER-ID: &lt;channel partner id&gt;&#39;  \\       - -header &#39;X-API-KEY: &lt;api key&gt;&#39; \\       - -header \&quot;Content-Type: multipart/form-data\&quot; 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="filePurpose">Purpose of the uploaded file, must match one of the enum values</param>
        /// <param name="personId">person_id is required when the file_purpose is \&quot;identity_document\&quot;. The person_id can be retrieved from the firm details endpoint.  (optional)</param>
        /// <param name="documentSide">The side of the \&quot;identity_document\&quot; being uploaded. (optional, default to front)</param>
        /// <param name="fwUploadFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostUpload200Response</returns>
        public FeeWise.Client.ApiResponse<PostUpload200Response> PostUploadWithHttpInfo(Guid firmId, string filePurpose, Guid? personId = default(Guid?), string documentSide = default(string), System.IO.Stream fwUploadFile = default(System.IO.Stream), int operationIndex = 0)
        {
            // verify the required parameter 'filePurpose' is set
            if (filePurpose == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'filePurpose' when calling FirmApi->PostUpload");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            if (personId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "person_id", personId));
            }
            localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "file_purpose", filePurpose));
            if (documentSide != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "document_side", documentSide));
            }
            if (fwUploadFile != null)
            {
                localVarRequestOptions.FileParameters.Add("fwUploadFile", fwUploadFile);
            }

            localVarRequestOptions.Operation = "FirmApi.PostUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostUpload200Response>("/api/v3/partner/firms/{firm_id}/upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload file Upload files to FeeWise. nb Content-Type header must be multipart/form-data example  curl -X POST -F \&quot;fwUploadFile&#x3D;@/path/to/file.png\&quot; \\     http://localhost:8080/api/v3/partner/firms/&lt;firm_id&gt;/upload?file_purpose&#x3D;identity_document \\       - -header &#39;X-CHANNEL-PARTNER-ID: &lt;channel partner id&gt;&#39;  \\       - -header &#39;X-API-KEY: &lt;api key&gt;&#39; \\       - -header \&quot;Content-Type: multipart/form-data\&quot; 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="filePurpose">Purpose of the uploaded file, must match one of the enum values</param>
        /// <param name="personId">person_id is required when the file_purpose is \&quot;identity_document\&quot;. The person_id can be retrieved from the firm details endpoint.  (optional)</param>
        /// <param name="documentSide">The side of the \&quot;identity_document\&quot; being uploaded. (optional, default to front)</param>
        /// <param name="fwUploadFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostUpload200Response</returns>
        public async System.Threading.Tasks.Task<PostUpload200Response> PostUploadAsync(Guid firmId, string filePurpose, Guid? personId = default(Guid?), string documentSide = default(string), System.IO.Stream fwUploadFile = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<PostUpload200Response> localVarResponse = await PostUploadWithHttpInfoAsync(firmId, filePurpose, personId, documentSide, fwUploadFile, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload file Upload files to FeeWise. nb Content-Type header must be multipart/form-data example  curl -X POST -F \&quot;fwUploadFile&#x3D;@/path/to/file.png\&quot; \\     http://localhost:8080/api/v3/partner/firms/&lt;firm_id&gt;/upload?file_purpose&#x3D;identity_document \\       - -header &#39;X-CHANNEL-PARTNER-ID: &lt;channel partner id&gt;&#39;  \\       - -header &#39;X-API-KEY: &lt;api key&gt;&#39; \\       - -header \&quot;Content-Type: multipart/form-data\&quot; 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="filePurpose">Purpose of the uploaded file, must match one of the enum values</param>
        /// <param name="personId">person_id is required when the file_purpose is \&quot;identity_document\&quot;. The person_id can be retrieved from the firm details endpoint.  (optional)</param>
        /// <param name="documentSide">The side of the \&quot;identity_document\&quot; being uploaded. (optional, default to front)</param>
        /// <param name="fwUploadFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostUpload200Response)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<PostUpload200Response>> PostUploadWithHttpInfoAsync(Guid firmId, string filePurpose, Guid? personId = default(Guid?), string documentSide = default(string), System.IO.Stream fwUploadFile = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'filePurpose' is set
            if (filePurpose == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'filePurpose' when calling FirmApi->PostUpload");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            if (personId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "person_id", personId));
            }
            localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "file_purpose", filePurpose));
            if (documentSide != null)
            {
                localVarRequestOptions.QueryParameters.Add(FeeWise.Client.ClientUtils.ParameterToMultiMap("", "document_side", documentSide));
            }
            if (fwUploadFile != null)
            {
                localVarRequestOptions.FileParameters.Add("fwUploadFile", fwUploadFile);
            }

            localVarRequestOptions.Operation = "FirmApi.PostUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostUpload200Response>("/api/v3/partner/firms/{firm_id}/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Toggle surcharging status Allows partners to toggle surcharging on or off for a firm. Surcharge pricing values can be found using the endpoint, firms/{firm_id}/pricing 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID)</param>
        /// <param name="status">enable: The firm would like to enable surcharging disable: The firm would like to disable surcharging ### Region specific rules US environment, there is a 30 day waiting period, for surcharging to be enabled AU environment, surcharging is enabled immediately. * nb: Once surcharging has been enabled a FirmSurchargeStatusChanged webhook will be triggered </param>
        /// <param name="putSurchargingStatusRequest">Optional parameters for surcharging configuration (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SurchargeSettingsResponse</returns>
        public SurchargeSettingsResponse PutSurchargingStatus(Guid firmId, string status, PutSurchargingStatusRequest putSurchargingStatusRequest = default(PutSurchargingStatusRequest), int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<SurchargeSettingsResponse> localVarResponse = PutSurchargingStatusWithHttpInfo(firmId, status, putSurchargingStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Toggle surcharging status Allows partners to toggle surcharging on or off for a firm. Surcharge pricing values can be found using the endpoint, firms/{firm_id}/pricing 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID)</param>
        /// <param name="status">enable: The firm would like to enable surcharging disable: The firm would like to disable surcharging ### Region specific rules US environment, there is a 30 day waiting period, for surcharging to be enabled AU environment, surcharging is enabled immediately. * nb: Once surcharging has been enabled a FirmSurchargeStatusChanged webhook will be triggered </param>
        /// <param name="putSurchargingStatusRequest">Optional parameters for surcharging configuration (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SurchargeSettingsResponse</returns>
        public FeeWise.Client.ApiResponse<SurchargeSettingsResponse> PutSurchargingStatusWithHttpInfo(Guid firmId, string status, PutSurchargingStatusRequest putSurchargingStatusRequest = default(PutSurchargingStatusRequest), int operationIndex = 0)
        {
            // verify the required parameter 'status' is set
            if (status == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'status' when calling FirmApi->PutSurchargingStatus");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("status", FeeWise.Client.ClientUtils.ParameterToString(status)); // path parameter
            localVarRequestOptions.Data = putSurchargingStatusRequest;

            localVarRequestOptions.Operation = "FirmApi.PutSurchargingStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SurchargeSettingsResponse>("/api/v3/partner/firms/{firm_id}/surcharging/status/{status}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSurchargingStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Toggle surcharging status Allows partners to toggle surcharging on or off for a firm. Surcharge pricing values can be found using the endpoint, firms/{firm_id}/pricing 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID)</param>
        /// <param name="status">enable: The firm would like to enable surcharging disable: The firm would like to disable surcharging ### Region specific rules US environment, there is a 30 day waiting period, for surcharging to be enabled AU environment, surcharging is enabled immediately. * nb: Once surcharging has been enabled a FirmSurchargeStatusChanged webhook will be triggered </param>
        /// <param name="putSurchargingStatusRequest">Optional parameters for surcharging configuration (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SurchargeSettingsResponse</returns>
        public async System.Threading.Tasks.Task<SurchargeSettingsResponse> PutSurchargingStatusAsync(Guid firmId, string status, PutSurchargingStatusRequest putSurchargingStatusRequest = default(PutSurchargingStatusRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<SurchargeSettingsResponse> localVarResponse = await PutSurchargingStatusWithHttpInfoAsync(firmId, status, putSurchargingStatusRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Toggle surcharging status Allows partners to toggle surcharging on or off for a firm. Surcharge pricing values can be found using the endpoint, firms/{firm_id}/pricing 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId">Firm ID (UUID)</param>
        /// <param name="status">enable: The firm would like to enable surcharging disable: The firm would like to disable surcharging ### Region specific rules US environment, there is a 30 day waiting period, for surcharging to be enabled AU environment, surcharging is enabled immediately. * nb: Once surcharging has been enabled a FirmSurchargeStatusChanged webhook will be triggered </param>
        /// <param name="putSurchargingStatusRequest">Optional parameters for surcharging configuration (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SurchargeSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<SurchargeSettingsResponse>> PutSurchargingStatusWithHttpInfoAsync(Guid firmId, string status, PutSurchargingStatusRequest putSurchargingStatusRequest = default(PutSurchargingStatusRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'status' is set
            if (status == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'status' when calling FirmApi->PutSurchargingStatus");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("status", FeeWise.Client.ClientUtils.ParameterToString(status)); // path parameter
            localVarRequestOptions.Data = putSurchargingStatusRequest;

            localVarRequestOptions.Operation = "FirmApi.PutSurchargingStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SurchargeSettingsResponse>("/api/v3/partner/firms/{firm_id}/surcharging/status/{status}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSurchargingStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query metadata to search for Charges, for the given firm Retrieve a firm&#39;s charges that are associated with a specific metadata key-value pair
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="metadataSearch">Metadata search details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ChargeResponse&gt;</returns>
        public List<ChargeResponse> SearchChargesByMetadata(Guid firmId, MetadataSearch metadataSearch, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<List<ChargeResponse>> localVarResponse = SearchChargesByMetadataWithHttpInfo(firmId, metadataSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query metadata to search for Charges, for the given firm Retrieve a firm&#39;s charges that are associated with a specific metadata key-value pair
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="metadataSearch">Metadata search details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ChargeResponse&gt;</returns>
        public FeeWise.Client.ApiResponse<List<ChargeResponse>> SearchChargesByMetadataWithHttpInfo(Guid firmId, MetadataSearch metadataSearch, int operationIndex = 0)
        {
            // verify the required parameter 'metadataSearch' is set
            if (metadataSearch == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'metadataSearch' when calling FirmApi->SearchChargesByMetadata");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = metadataSearch;

            localVarRequestOptions.Operation = "FirmApi.SearchChargesByMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ChargeResponse>>("/api/v3/partner/firms/{firm_id}/charges/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchChargesByMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query metadata to search for Charges, for the given firm Retrieve a firm&#39;s charges that are associated with a specific metadata key-value pair
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="metadataSearch">Metadata search details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChargeResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChargeResponse>> SearchChargesByMetadataAsync(Guid firmId, MetadataSearch metadataSearch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<List<ChargeResponse>> localVarResponse = await SearchChargesByMetadataWithHttpInfoAsync(firmId, metadataSearch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query metadata to search for Charges, for the given firm Retrieve a firm&#39;s charges that are associated with a specific metadata key-value pair
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="metadataSearch">Metadata search details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChargeResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<List<ChargeResponse>>> SearchChargesByMetadataWithHttpInfoAsync(Guid firmId, MetadataSearch metadataSearch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'metadataSearch' is set
            if (metadataSearch == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'metadataSearch' when calling FirmApi->SearchChargesByMetadata");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = metadataSearch;

            localVarRequestOptions.Operation = "FirmApi.SearchChargesByMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ChargeResponse>>("/api/v3/partner/firms/{firm_id}/charges/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchChargesByMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set firms default bank account. Set the given account as the default bank account (Trust or Office). The account type will determine if the bank account becomes the default office or trust account.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankAccountResponse</returns>
        public BankAccountResponse SetFirmsDefaultBankAccount(Guid firmId, Guid accountId, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<BankAccountResponse> localVarResponse = SetFirmsDefaultBankAccountWithHttpInfo(firmId, accountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set firms default bank account. Set the given account as the default bank account (Trust or Office). The account type will determine if the bank account becomes the default office or trust account.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankAccountResponse</returns>
        public FeeWise.Client.ApiResponse<BankAccountResponse> SetFirmsDefaultBankAccountWithHttpInfo(Guid firmId, Guid accountId, int operationIndex = 0)
        {
            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("account_id", FeeWise.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.SetFirmsDefaultBankAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BankAccountResponse>("/api/v3/partner/firms/{firm_id}/accounts/{account_id}/default", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetFirmsDefaultBankAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set firms default bank account. Set the given account as the default bank account (Trust or Office). The account type will determine if the bank account becomes the default office or trust account.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankAccountResponse</returns>
        public async System.Threading.Tasks.Task<BankAccountResponse> SetFirmsDefaultBankAccountAsync(Guid firmId, Guid accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<BankAccountResponse> localVarResponse = await SetFirmsDefaultBankAccountWithHttpInfoAsync(firmId, accountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set firms default bank account. Set the given account as the default bank account (Trust or Office). The account type will determine if the bank account becomes the default office or trust account.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankAccountResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<BankAccountResponse>> SetFirmsDefaultBankAccountWithHttpInfoAsync(Guid firmId, Guid accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("account_id", FeeWise.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.SetFirmsDefaultBankAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BankAccountResponse>("/api/v3/partner/firms/{firm_id}/accounts/{account_id}/default", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetFirmsDefaultBankAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync a firm by the FeeWise Connect ID Given a FeeWise Connect ID return a the firm&#39;s ID and status.  The firm ID can be used for future requests.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirmResponse</returns>
        public FirmResponse SyncFirm(string connectId, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<FirmResponse> localVarResponse = SyncFirmWithHttpInfo(connectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync a firm by the FeeWise Connect ID Given a FeeWise Connect ID return a the firm&#39;s ID and status.  The firm ID can be used for future requests.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirmResponse</returns>
        public FeeWise.Client.ApiResponse<FirmResponse> SyncFirmWithHttpInfo(string connectId, int operationIndex = 0)
        {
            // verify the required parameter 'connectId' is set
            if (connectId == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'connectId' when calling FirmApi->SyncFirm");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("connect_id", FeeWise.Client.ClientUtils.ParameterToString(connectId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.SyncFirm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FirmResponse>("/api/v3/partner/firms/sync/{connect_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncFirm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync a firm by the FeeWise Connect ID Given a FeeWise Connect ID return a the firm&#39;s ID and status.  The firm ID can be used for future requests.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmResponse</returns>
        public async System.Threading.Tasks.Task<FirmResponse> SyncFirmAsync(string connectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<FirmResponse> localVarResponse = await SyncFirmWithHttpInfoAsync(connectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync a firm by the FeeWise Connect ID Given a FeeWise Connect ID return a the firm&#39;s ID and status.  The firm ID can be used for future requests.
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmResponse)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<FirmResponse>> SyncFirmWithHttpInfoAsync(string connectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'connectId' is set
            if (connectId == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'connectId' when calling FirmApi->SyncFirm");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("connect_id", FeeWise.Client.ClientUtils.ParameterToString(connectId)); // path parameter

            localVarRequestOptions.Operation = "FirmApi.SyncFirm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FirmResponse>("/api/v3/partner/firms/sync/{connect_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncFirm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Toggle the optional products that are enabled for a firm.  Can be used to enable or disable optional payment types, such as Klarna and Affirm. The products with &#x60;Enabled&#x60; values will be enabled, products with &#x60;Disabled&#x60; will be disabled, and omitted products will be ignored. All enabled products for the firm will be returned. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="optionalProductSettings">An object of optional products that should be enabled for a firm. Only present values will be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToggleFirmProducts200Response</returns>
        public ToggleFirmProducts200Response ToggleFirmProducts(Guid firmId, OptionalProductSettings optionalProductSettings, int operationIndex = 0)
        {
            FeeWise.Client.ApiResponse<ToggleFirmProducts200Response> localVarResponse = ToggleFirmProductsWithHttpInfo(firmId, optionalProductSettings);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Toggle the optional products that are enabled for a firm.  Can be used to enable or disable optional payment types, such as Klarna and Affirm. The products with &#x60;Enabled&#x60; values will be enabled, products with &#x60;Disabled&#x60; will be disabled, and omitted products will be ignored. All enabled products for the firm will be returned. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="optionalProductSettings">An object of optional products that should be enabled for a firm. Only present values will be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToggleFirmProducts200Response</returns>
        public FeeWise.Client.ApiResponse<ToggleFirmProducts200Response> ToggleFirmProductsWithHttpInfo(Guid firmId, OptionalProductSettings optionalProductSettings, int operationIndex = 0)
        {
            // verify the required parameter 'optionalProductSettings' is set
            if (optionalProductSettings == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'optionalProductSettings' when calling FirmApi->ToggleFirmProducts");
            }

            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = optionalProductSettings;

            localVarRequestOptions.Operation = "FirmApi.ToggleFirmProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToggleFirmProducts200Response>("/api/v3/partner/firms/{firm_id}/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToggleFirmProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Toggle the optional products that are enabled for a firm.  Can be used to enable or disable optional payment types, such as Klarna and Affirm. The products with &#x60;Enabled&#x60; values will be enabled, products with &#x60;Disabled&#x60; will be disabled, and omitted products will be ignored. All enabled products for the firm will be returned. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="optionalProductSettings">An object of optional products that should be enabled for a firm. Only present values will be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToggleFirmProducts200Response</returns>
        public async System.Threading.Tasks.Task<ToggleFirmProducts200Response> ToggleFirmProductsAsync(Guid firmId, OptionalProductSettings optionalProductSettings, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FeeWise.Client.ApiResponse<ToggleFirmProducts200Response> localVarResponse = await ToggleFirmProductsWithHttpInfoAsync(firmId, optionalProductSettings, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Toggle the optional products that are enabled for a firm.  Can be used to enable or disable optional payment types, such as Klarna and Affirm. The products with &#x60;Enabled&#x60; values will be enabled, products with &#x60;Disabled&#x60; will be disabled, and omitted products will be ignored. All enabled products for the firm will be returned. 
        /// </summary>
        /// <exception cref="FeeWise.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firmId"></param>
        /// <param name="optionalProductSettings">An object of optional products that should be enabled for a firm. Only present values will be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToggleFirmProducts200Response)</returns>
        public async System.Threading.Tasks.Task<FeeWise.Client.ApiResponse<ToggleFirmProducts200Response>> ToggleFirmProductsWithHttpInfoAsync(Guid firmId, OptionalProductSettings optionalProductSettings, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'optionalProductSettings' is set
            if (optionalProductSettings == null)
            {
                throw new FeeWise.Client.ApiException(400, "Missing required parameter 'optionalProductSettings' when calling FirmApi->ToggleFirmProducts");
            }


            FeeWise.Client.RequestOptions localVarRequestOptions = new FeeWise.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FeeWise.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FeeWise.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firm_id", FeeWise.Client.ClientUtils.ParameterToString(firmId)); // path parameter
            localVarRequestOptions.Data = optionalProductSettings;

            localVarRequestOptions.Operation = "FirmApi.ToggleFirmProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }
            // authentication (PartnerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-CHANNEL-PARTNER-ID", this.Configuration.GetApiKeyWithPrefix("X-CHANNEL-PARTNER-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToggleFirmProducts200Response>("/api/v3/partner/firms/{firm_id}/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToggleFirmProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
