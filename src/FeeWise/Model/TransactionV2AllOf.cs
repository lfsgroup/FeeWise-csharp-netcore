/*
 * FeeWise Partner API
 *
 * API for partners
 *
 * The version of the OpenAPI document: 0.0.164
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FeeWise.Client.OpenAPIDateConverter;

namespace FeeWise.Model
{
    /// <summary>
    /// TransactionV2AllOf
    /// </summary>
    [DataContract(Name = "TransactionV2_allOf")]
    public partial class TransactionV2AllOf : IEquatable<TransactionV2AllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionV2AllOf" /> class.
        /// </summary>
        /// <param name="transactionUri">A direct URL to view this transaction in the FeeWise dashboard.  Integration note: When embedding this link in your Practice Management System (PMS),   prefix it with your magic link URL to maintain authentication context. Refer to the \&quot;Magic Links\&quot; documentation section for implementation details. .</param>
        /// <param name="fundingType">The funding type for card payments e.g Credit, Debit.</param>
        /// <param name="surcharged">Indicates if the transaction was surcharged.</param>
        /// <param name="surchargedAmount">Surcharge amount the customer paid for this transaction.</param>
        /// <param name="refundable">Indicates if this transaction can be refunded.</param>
        /// <param name="refund">refund.</param>
        public TransactionV2AllOf(string transactionUri = default(string), string fundingType = default(string), bool surcharged = default(bool), string surchargedAmount = default(string), bool refundable = default(bool), Refund refund = default(Refund))
        {
            this.TransactionUri = transactionUri;
            this.FundingType = fundingType;
            this.Surcharged = surcharged;
            this.SurchargedAmount = surchargedAmount;
            this.Refundable = refundable;
            this.Refund = refund;
        }

        /// <summary>
        /// A direct URL to view this transaction in the FeeWise dashboard.  Integration note: When embedding this link in your Practice Management System (PMS),   prefix it with your magic link URL to maintain authentication context. Refer to the \&quot;Magic Links\&quot; documentation section for implementation details. 
        /// </summary>
        /// <value>A direct URL to view this transaction in the FeeWise dashboard.  Integration note: When embedding this link in your Practice Management System (PMS),   prefix it with your magic link URL to maintain authentication context. Refer to the \&quot;Magic Links\&quot; documentation section for implementation details. </value>
        [DataMember(Name = "transaction_uri", EmitDefaultValue = false)]
        public string TransactionUri { get; set; }

        /// <summary>
        /// The funding type for card payments e.g Credit, Debit
        /// </summary>
        /// <value>The funding type for card payments e.g Credit, Debit</value>
        [DataMember(Name = "funding_type", EmitDefaultValue = false)]
        public string FundingType { get; set; }

        /// <summary>
        /// Indicates if the transaction was surcharged
        /// </summary>
        /// <value>Indicates if the transaction was surcharged</value>
        [DataMember(Name = "surcharged", EmitDefaultValue = true)]
        public bool Surcharged { get; set; }

        /// <summary>
        /// Surcharge amount the customer paid for this transaction
        /// </summary>
        /// <value>Surcharge amount the customer paid for this transaction</value>
        [DataMember(Name = "surcharged_amount", EmitDefaultValue = false)]
        public string SurchargedAmount { get; set; }

        /// <summary>
        /// Indicates if this transaction can be refunded
        /// </summary>
        /// <value>Indicates if this transaction can be refunded</value>
        [DataMember(Name = "refundable", EmitDefaultValue = true)]
        public bool Refundable { get; set; }

        /// <summary>
        /// Gets or Sets Refund
        /// </summary>
        [DataMember(Name = "refund", EmitDefaultValue = false)]
        public Refund Refund { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionV2AllOf {\n");
            sb.Append("  TransactionUri: ").Append(TransactionUri).Append("\n");
            sb.Append("  FundingType: ").Append(FundingType).Append("\n");
            sb.Append("  Surcharged: ").Append(Surcharged).Append("\n");
            sb.Append("  SurchargedAmount: ").Append(SurchargedAmount).Append("\n");
            sb.Append("  Refundable: ").Append(Refundable).Append("\n");
            sb.Append("  Refund: ").Append(Refund).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionV2AllOf);
        }

        /// <summary>
        /// Returns true if TransactionV2AllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionV2AllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionV2AllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TransactionUri == input.TransactionUri ||
                    (this.TransactionUri != null &&
                    this.TransactionUri.Equals(input.TransactionUri))
                ) && 
                (
                    this.FundingType == input.FundingType ||
                    (this.FundingType != null &&
                    this.FundingType.Equals(input.FundingType))
                ) && 
                (
                    this.Surcharged == input.Surcharged ||
                    this.Surcharged.Equals(input.Surcharged)
                ) && 
                (
                    this.SurchargedAmount == input.SurchargedAmount ||
                    (this.SurchargedAmount != null &&
                    this.SurchargedAmount.Equals(input.SurchargedAmount))
                ) && 
                (
                    this.Refundable == input.Refundable ||
                    this.Refundable.Equals(input.Refundable)
                ) && 
                (
                    this.Refund == input.Refund ||
                    (this.Refund != null &&
                    this.Refund.Equals(input.Refund))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionUri != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionUri.GetHashCode();
                }
                if (this.FundingType != null)
                {
                    hashCode = (hashCode * 59) + this.FundingType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Surcharged.GetHashCode();
                if (this.SurchargedAmount != null)
                {
                    hashCode = (hashCode * 59) + this.SurchargedAmount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Refundable.GetHashCode();
                if (this.Refund != null)
                {
                    hashCode = (hashCode * 59) + this.Refund.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
