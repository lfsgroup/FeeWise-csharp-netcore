/*
 * FeeWise Partner API
 *
 * API for partners
 *
 * The version of the OpenAPI document: 0.0.164
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FeeWise.Client.OpenAPIDateConverter;

namespace FeeWise.Model
{
    /// <summary>
    /// Refund
    /// </summary>
    [DataContract(Name = "Refund")]
    public partial class Refund : IEquatable<Refund>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public RefundStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Refund" /> class.
        /// </summary>
        /// <param name="refundId">refundId.</param>
        /// <param name="paymentId">paymentId.</param>
        /// <param name="artifactId">artifactId.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="status">status.</param>
        /// <param name="refundAmount">refundAmount.</param>
        /// <param name="surchargeAmount">surchargeAmount.</param>
        /// <param name="refundReason">The reason for the refund being requested.</param>
        /// <param name="firmNotes">Additional notes about this refund request from the firm.</param>
        public Refund(Guid refundId = default(Guid), Guid paymentId = default(Guid), Guid artifactId = default(Guid), DateTime createdAt = default(DateTime), RefundStatus? status = default(RefundStatus?), string refundAmount = default(string), string surchargeAmount = default(string), string refundReason = default(string), string firmNotes = default(string))
        {
            this.RefundId = refundId;
            this.PaymentId = paymentId;
            this.ArtifactId = artifactId;
            this.CreatedAt = createdAt;
            this.Status = status;
            this.RefundAmount = refundAmount;
            this.SurchargeAmount = surchargeAmount;
            this.RefundReason = refundReason;
            this.FirmNotes = firmNotes;
        }

        /// <summary>
        /// Gets or Sets RefundId
        /// </summary>
        [DataMember(Name = "refund_id", EmitDefaultValue = false)]
        public Guid RefundId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentId
        /// </summary>
        [DataMember(Name = "payment_id", EmitDefaultValue = false)]
        public Guid PaymentId { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactId
        /// </summary>
        [DataMember(Name = "artifact_id", EmitDefaultValue = false)]
        public Guid ArtifactId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets RefundAmount
        /// </summary>
        [DataMember(Name = "refund_amount", EmitDefaultValue = false)]
        public string RefundAmount { get; set; }

        /// <summary>
        /// Gets or Sets SurchargeAmount
        /// </summary>
        [DataMember(Name = "surcharge_amount", EmitDefaultValue = false)]
        public string SurchargeAmount { get; set; }

        /// <summary>
        /// The reason for the refund being requested
        /// </summary>
        /// <value>The reason for the refund being requested</value>
        [DataMember(Name = "refund_reason", EmitDefaultValue = false)]
        public string RefundReason { get; set; }

        /// <summary>
        /// Additional notes about this refund request from the firm
        /// </summary>
        /// <value>Additional notes about this refund request from the firm</value>
        [DataMember(Name = "firm_notes", EmitDefaultValue = false)]
        public string FirmNotes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Refund {\n");
            sb.Append("  RefundId: ").Append(RefundId).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  ArtifactId: ").Append(ArtifactId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  SurchargeAmount: ").Append(SurchargeAmount).Append("\n");
            sb.Append("  RefundReason: ").Append(RefundReason).Append("\n");
            sb.Append("  FirmNotes: ").Append(FirmNotes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Refund);
        }

        /// <summary>
        /// Returns true if Refund instances are equal
        /// </summary>
        /// <param name="input">Instance of Refund to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Refund input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RefundId == input.RefundId ||
                    (this.RefundId != null &&
                    this.RefundId.Equals(input.RefundId))
                ) && 
                (
                    this.PaymentId == input.PaymentId ||
                    (this.PaymentId != null &&
                    this.PaymentId.Equals(input.PaymentId))
                ) && 
                (
                    this.ArtifactId == input.ArtifactId ||
                    (this.ArtifactId != null &&
                    this.ArtifactId.Equals(input.ArtifactId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.RefundAmount == input.RefundAmount ||
                    (this.RefundAmount != null &&
                    this.RefundAmount.Equals(input.RefundAmount))
                ) && 
                (
                    this.SurchargeAmount == input.SurchargeAmount ||
                    (this.SurchargeAmount != null &&
                    this.SurchargeAmount.Equals(input.SurchargeAmount))
                ) && 
                (
                    this.RefundReason == input.RefundReason ||
                    (this.RefundReason != null &&
                    this.RefundReason.Equals(input.RefundReason))
                ) && 
                (
                    this.FirmNotes == input.FirmNotes ||
                    (this.FirmNotes != null &&
                    this.FirmNotes.Equals(input.FirmNotes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RefundId != null)
                {
                    hashCode = (hashCode * 59) + this.RefundId.GetHashCode();
                }
                if (this.PaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentId.GetHashCode();
                }
                if (this.ArtifactId != null)
                {
                    hashCode = (hashCode * 59) + this.ArtifactId.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.RefundAmount != null)
                {
                    hashCode = (hashCode * 59) + this.RefundAmount.GetHashCode();
                }
                if (this.SurchargeAmount != null)
                {
                    hashCode = (hashCode * 59) + this.SurchargeAmount.GetHashCode();
                }
                if (this.RefundReason != null)
                {
                    hashCode = (hashCode * 59) + this.RefundReason.GetHashCode();
                }
                if (this.FirmNotes != null)
                {
                    hashCode = (hashCode * 59) + this.FirmNotes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
