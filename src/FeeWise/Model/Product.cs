/*
 * FeeWise Partner API
 *
 * API for partners
 *
 * The version of the OpenAPI document: 0.0.163
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FeeWise.Client.OpenAPIDateConverter;

namespace FeeWise.Model
{
    /// <summary>
    /// Payment Products, used in the partner api
    /// </summary>
    [DataContract(Name = "Product")]
    public partial class Product : IEquatable<Product>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public ProductType Type { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "payment_method", IsRequired = true, EmitDefaultValue = true)]
        public PaymentMethod PaymentMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Product() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="paymentMethod">paymentMethod (required).</param>
        /// <param name="brands">brands (required).</param>
        /// <param name="lowerBound">The minimum pricing amount. (required).</param>
        /// <param name="upperBound">The maximum pricing amount. (required).</param>
        /// <param name="customerVariableFee">customerVariableFee (required).</param>
        /// <param name="customerFixedFee">customerFixedFee (required).</param>
        /// <param name="examplePrice">examplePrice.</param>
        public Product(ProductType type = default(ProductType), PaymentMethod paymentMethod = default(PaymentMethod), List<string> brands = default(List<string>), string lowerBound = default(string), string upperBound = default(string), string customerVariableFee = default(string), string customerFixedFee = default(string), ExamplePrice examplePrice = default(ExamplePrice))
        {
            this.Type = type;
            this.PaymentMethod = paymentMethod;
            // to ensure "brands" is required (not null)
            if (brands == null)
            {
                throw new ArgumentNullException("brands is a required property for Product and cannot be null");
            }
            this.Brands = brands;
            // to ensure "lowerBound" is required (not null)
            if (lowerBound == null)
            {
                throw new ArgumentNullException("lowerBound is a required property for Product and cannot be null");
            }
            this.LowerBound = lowerBound;
            // to ensure "upperBound" is required (not null)
            if (upperBound == null)
            {
                throw new ArgumentNullException("upperBound is a required property for Product and cannot be null");
            }
            this.UpperBound = upperBound;
            // to ensure "customerVariableFee" is required (not null)
            if (customerVariableFee == null)
            {
                throw new ArgumentNullException("customerVariableFee is a required property for Product and cannot be null");
            }
            this.CustomerVariableFee = customerVariableFee;
            // to ensure "customerFixedFee" is required (not null)
            if (customerFixedFee == null)
            {
                throw new ArgumentNullException("customerFixedFee is a required property for Product and cannot be null");
            }
            this.CustomerFixedFee = customerFixedFee;
            this.ExamplePrice = examplePrice;
        }

        /// <summary>
        /// Gets or Sets Brands
        /// </summary>
        [DataMember(Name = "brands", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Brands { get; set; }

        /// <summary>
        /// The minimum pricing amount.
        /// </summary>
        /// <value>The minimum pricing amount.</value>
        [DataMember(Name = "lower_bound", IsRequired = true, EmitDefaultValue = true)]
        public string LowerBound { get; set; }

        /// <summary>
        /// The maximum pricing amount.
        /// </summary>
        /// <value>The maximum pricing amount.</value>
        [DataMember(Name = "upper_bound", IsRequired = true, EmitDefaultValue = true)]
        public string UpperBound { get; set; }

        /// <summary>
        /// Gets or Sets CustomerVariableFee
        /// </summary>
        [DataMember(Name = "customer_variable_fee", IsRequired = true, EmitDefaultValue = true)]
        public string CustomerVariableFee { get; set; }

        /// <summary>
        /// Gets or Sets CustomerFixedFee
        /// </summary>
        [DataMember(Name = "customer_fixed_fee", IsRequired = true, EmitDefaultValue = true)]
        public string CustomerFixedFee { get; set; }

        /// <summary>
        /// Gets or Sets ExamplePrice
        /// </summary>
        [DataMember(Name = "example_price", EmitDefaultValue = false)]
        public ExamplePrice ExamplePrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Brands: ").Append(Brands).Append("\n");
            sb.Append("  LowerBound: ").Append(LowerBound).Append("\n");
            sb.Append("  UpperBound: ").Append(UpperBound).Append("\n");
            sb.Append("  CustomerVariableFee: ").Append(CustomerVariableFee).Append("\n");
            sb.Append("  CustomerFixedFee: ").Append(CustomerFixedFee).Append("\n");
            sb.Append("  ExamplePrice: ").Append(ExamplePrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    this.PaymentMethod.Equals(input.PaymentMethod)
                ) && 
                (
                    this.Brands == input.Brands ||
                    this.Brands != null &&
                    input.Brands != null &&
                    this.Brands.SequenceEqual(input.Brands)
                ) && 
                (
                    this.LowerBound == input.LowerBound ||
                    (this.LowerBound != null &&
                    this.LowerBound.Equals(input.LowerBound))
                ) && 
                (
                    this.UpperBound == input.UpperBound ||
                    (this.UpperBound != null &&
                    this.UpperBound.Equals(input.UpperBound))
                ) && 
                (
                    this.CustomerVariableFee == input.CustomerVariableFee ||
                    (this.CustomerVariableFee != null &&
                    this.CustomerVariableFee.Equals(input.CustomerVariableFee))
                ) && 
                (
                    this.CustomerFixedFee == input.CustomerFixedFee ||
                    (this.CustomerFixedFee != null &&
                    this.CustomerFixedFee.Equals(input.CustomerFixedFee))
                ) && 
                (
                    this.ExamplePrice == input.ExamplePrice ||
                    (this.ExamplePrice != null &&
                    this.ExamplePrice.Equals(input.ExamplePrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                if (this.Brands != null)
                {
                    hashCode = (hashCode * 59) + this.Brands.GetHashCode();
                }
                if (this.LowerBound != null)
                {
                    hashCode = (hashCode * 59) + this.LowerBound.GetHashCode();
                }
                if (this.UpperBound != null)
                {
                    hashCode = (hashCode * 59) + this.UpperBound.GetHashCode();
                }
                if (this.CustomerVariableFee != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerVariableFee.GetHashCode();
                }
                if (this.CustomerFixedFee != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerFixedFee.GetHashCode();
                }
                if (this.ExamplePrice != null)
                {
                    hashCode = (hashCode * 59) + this.ExamplePrice.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
