/*
 * FeeWise Partner API
 *
 * API for partners
 *
 * The version of the OpenAPI document: 0.0.122
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FeeWise.Client.OpenAPIDateConverter;

namespace FeeWise.Model
{
    /// <summary>
    /// PostPartnerBrandingColourRequest
    /// </summary>
    [DataContract(Name = "postPartnerBrandingColour_request")]
    public partial class PostPartnerBrandingColourRequest : IEquatable<PostPartnerBrandingColourRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostPartnerBrandingColourRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostPartnerBrandingColourRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostPartnerBrandingColourRequest" /> class.
        /// </summary>
        /// <param name="colour">RGB hex colour code. Alpha channel not supported The branding colour will be used in the FeeWise dashboard as firm&#39;s default colour  (required).</param>
        public PostPartnerBrandingColourRequest(string colour = default(string))
        {
            // to ensure "colour" is required (not null)
            if (colour == null)
            {
                throw new ArgumentNullException("colour is a required property for PostPartnerBrandingColourRequest and cannot be null");
            }
            this.Colour = colour;
        }

        /// <summary>
        /// RGB hex colour code. Alpha channel not supported The branding colour will be used in the FeeWise dashboard as firm&#39;s default colour 
        /// </summary>
        /// <value>RGB hex colour code. Alpha channel not supported The branding colour will be used in the FeeWise dashboard as firm&#39;s default colour </value>
        [DataMember(Name = "colour", IsRequired = true, EmitDefaultValue = true)]
        public string Colour { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostPartnerBrandingColourRequest {\n");
            sb.Append("  Colour: ").Append(Colour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostPartnerBrandingColourRequest);
        }

        /// <summary>
        /// Returns true if PostPartnerBrandingColourRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostPartnerBrandingColourRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostPartnerBrandingColourRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Colour == input.Colour ||
                    (this.Colour != null &&
                    this.Colour.Equals(input.Colour))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Colour != null)
                {
                    hashCode = (hashCode * 59) + this.Colour.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Colour (string) pattern
            Regex regexColour = new Regex(@"^#([a-fA-F0-9]{6})$", RegexOptions.CultureInvariant);
            if (false == regexColour.Match(this.Colour).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Colour, must match a pattern of " + regexColour, new [] { "Colour" });
            }

            yield break;
        }
    }

}
