/*
 * FeeWise Partner API
 *
 * API for partners
 *
 * The version of the OpenAPI document: 0.0.164
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FeeWise.Client.OpenAPIDateConverter;

namespace FeeWise.Model
{
    /// <summary>
    /// Controls surcharging configuration and availability for a firm  ## Surcharging availability  &#x60;SurchargingStatus&#x60; &#x60;Enabled&#x60;:   * &#x60;start_date&#x60; is in the future, Surcharging will become available on the specified date  * &#x60;start_date&#x60; is in the past,   Surcharging is immediately available  &#x60;SurchargingStatus&#x60; &#x60;Disabled&#x60;, Surcharging is not available (regardless of the &#x60;start_date&#x60;)   ## Access Information is available in both:   * &#x60;FirmSurchargeSettingsEvent&#x60; webhooks   * The firm details endpoint (in the &#x60;surcharge_settings&#x60; field)  ## Webhooks  Any change to the &#x60;SurchargingStatus&#x60; field will trigger a &#x60;FirmSurchargeSettingsEvent&#x60; webhook to all subscribers. 
    /// </summary>
    [DataContract(Name = "SurchargeSettings")]
    public partial class SurchargeSettings : IEquatable<SurchargeSettings>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public SurchargingStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SurchargeSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SurchargeSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SurchargeSettings" /> class.
        /// </summary>
        /// <param name="surchargedArtifacts">Specifies which types of artifacts can have surcharges applied (required).</param>
        /// <param name="surchargeTrustPayments">Determines whether Trust payments are subject to surcharging. (required).</param>
        /// <param name="startDate">The date and time when surcharging becomes active (when status is Enabled)..</param>
        /// <param name="status">status (required).</param>
        public SurchargeSettings(List<ArtifactType> surchargedArtifacts = default(List<ArtifactType>), bool surchargeTrustPayments = default(bool), DateTime startDate = default(DateTime), SurchargingStatus status = default(SurchargingStatus))
        {
            // to ensure "surchargedArtifacts" is required (not null)
            if (surchargedArtifacts == null)
            {
                throw new ArgumentNullException("surchargedArtifacts is a required property for SurchargeSettings and cannot be null");
            }
            this.SurchargedArtifacts = surchargedArtifacts;
            this.SurchargeTrustPayments = surchargeTrustPayments;
            this.Status = status;
            this.StartDate = startDate;
        }

        /// <summary>
        /// Specifies which types of artifacts can have surcharges applied
        /// </summary>
        /// <value>Specifies which types of artifacts can have surcharges applied</value>
        [DataMember(Name = "surcharged_artifacts", IsRequired = true, EmitDefaultValue = true)]
        public List<ArtifactType> SurchargedArtifacts { get; set; }

        /// <summary>
        /// Determines whether Trust payments are subject to surcharging.
        /// </summary>
        /// <value>Determines whether Trust payments are subject to surcharging.</value>
        [DataMember(Name = "surcharge_trust_payments", IsRequired = true, EmitDefaultValue = true)]
        public bool SurchargeTrustPayments { get; set; }

        /// <summary>
        /// The date and time when surcharging becomes active (when status is Enabled).
        /// </summary>
        /// <value>The date and time when surcharging becomes active (when status is Enabled).</value>
        [DataMember(Name = "start_date", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SurchargeSettings {\n");
            sb.Append("  SurchargedArtifacts: ").Append(SurchargedArtifacts).Append("\n");
            sb.Append("  SurchargeTrustPayments: ").Append(SurchargeTrustPayments).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SurchargeSettings);
        }

        /// <summary>
        /// Returns true if SurchargeSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of SurchargeSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SurchargeSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SurchargedArtifacts == input.SurchargedArtifacts ||
                    this.SurchargedArtifacts != null &&
                    input.SurchargedArtifacts != null &&
                    this.SurchargedArtifacts.SequenceEqual(input.SurchargedArtifacts)
                ) && 
                (
                    this.SurchargeTrustPayments == input.SurchargeTrustPayments ||
                    this.SurchargeTrustPayments.Equals(input.SurchargeTrustPayments)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SurchargedArtifacts != null)
                {
                    hashCode = (hashCode * 59) + this.SurchargedArtifacts.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SurchargeTrustPayments.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
