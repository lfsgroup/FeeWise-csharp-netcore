/*
 * FeeWise Partner API
 *
 * API for partners
 *
 * The version of the OpenAPI document: 0.0.163
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FeeWise.Client.OpenAPIDateConverter;

namespace FeeWise.Model
{
    /// <summary>
    /// CreateChargePaymentRequest
    /// </summary>
    [DataContract(Name = "createChargePayment_request")]
    public partial class CreateChargePaymentRequest : IEquatable<CreateChargePaymentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateChargePaymentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateChargePaymentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateChargePaymentRequest" /> class.
        /// </summary>
        /// <param name="charge">charge (required).</param>
        /// <param name="reviewPayment">When set to true, the endpoint will always return a &#39;402 - Payment requires a review&#39; error response, this can be used to enforce a 2-step payment. When set to false or not present, the &#39;402&#39; will only be returned if there is a surcharge greater than $0 for the payment..</param>
        /// <param name="sessionId">sessionId.</param>
        public CreateChargePaymentRequest(Charge charge = default(Charge), bool reviewPayment = default(bool), Guid sessionId = default(Guid))
        {
            // to ensure "charge" is required (not null)
            if (charge == null)
            {
                throw new ArgumentNullException("charge is a required property for CreateChargePaymentRequest and cannot be null");
            }
            this.Charge = charge;
            this.ReviewPayment = reviewPayment;
            this.SessionId = sessionId;
        }

        /// <summary>
        /// Gets or Sets Charge
        /// </summary>
        [DataMember(Name = "charge", IsRequired = true, EmitDefaultValue = true)]
        public Charge Charge { get; set; }

        /// <summary>
        /// When set to true, the endpoint will always return a &#39;402 - Payment requires a review&#39; error response, this can be used to enforce a 2-step payment. When set to false or not present, the &#39;402&#39; will only be returned if there is a surcharge greater than $0 for the payment.
        /// </summary>
        /// <value>When set to true, the endpoint will always return a &#39;402 - Payment requires a review&#39; error response, this can be used to enforce a 2-step payment. When set to false or not present, the &#39;402&#39; will only be returned if there is a surcharge greater than $0 for the payment.</value>
        [DataMember(Name = "review_payment", EmitDefaultValue = true)]
        public bool ReviewPayment { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name = "session_id", EmitDefaultValue = false)]
        public Guid SessionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateChargePaymentRequest {\n");
            sb.Append("  Charge: ").Append(Charge).Append("\n");
            sb.Append("  ReviewPayment: ").Append(ReviewPayment).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateChargePaymentRequest);
        }

        /// <summary>
        /// Returns true if CreateChargePaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateChargePaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateChargePaymentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Charge == input.Charge ||
                    (this.Charge != null &&
                    this.Charge.Equals(input.Charge))
                ) && 
                (
                    this.ReviewPayment == input.ReviewPayment ||
                    this.ReviewPayment.Equals(input.ReviewPayment)
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Charge != null)
                {
                    hashCode = (hashCode * 59) + this.Charge.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReviewPayment.GetHashCode();
                if (this.SessionId != null)
                {
                    hashCode = (hashCode * 59) + this.SessionId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
