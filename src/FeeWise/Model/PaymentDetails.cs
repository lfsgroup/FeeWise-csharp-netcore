/*
 * FeeWise Partner API
 *
 * API for partners
 *
 * The version of the OpenAPI document: 0.0.164
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FeeWise.Client.OpenAPIDateConverter;

namespace FeeWise.Model
{
    /// <summary>
    /// PaymentDetails
    /// </summary>
    [DataContract(Name = "PaymentDetails")]
    public partial class PaymentDetails : IEquatable<PaymentDetails>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "payment_method", EmitDefaultValue = false)]
        public PaymentMethod? PaymentMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDetails" /> class.
        /// </summary>
        /// <param name="paymentId">paymentId.</param>
        /// <param name="artifactId">artifactId.</param>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="amount">amount.</param>
        /// <param name="subtotal">subtotal.</param>
        /// <param name="date">date.</param>
        /// <param name="customerFeeAmount">customerFeeAmount.</param>
        /// <param name="customerFeePricing">the pricing of the customer fee e.g. 2.9% + $0.2.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="payerDetails">payerDetails.</param>
        /// <param name="cardDetails">cardDetails.</param>
        /// <param name="directDebitDetails">directDebitDetails.</param>
        public PaymentDetails(Guid paymentId = default(Guid), Guid artifactId = default(Guid), Guid sessionId = default(Guid), string amount = default(string), string subtotal = default(string), DateTime date = default(DateTime), string customerFeeAmount = default(string), string customerFeePricing = default(string), PaymentMethod? paymentMethod = default(PaymentMethod?), Payer payerDetails = default(Payer), CardPayment cardDetails = default(CardPayment), DebitPayment directDebitDetails = default(DebitPayment))
        {
            this.PaymentId = paymentId;
            this.ArtifactId = artifactId;
            this.SessionId = sessionId;
            this.Amount = amount;
            this.Subtotal = subtotal;
            this.Date = date;
            this.CustomerFeeAmount = customerFeeAmount;
            this.CustomerFeePricing = customerFeePricing;
            this.PaymentMethod = paymentMethod;
            this.PayerDetails = payerDetails;
            this.CardDetails = cardDetails;
            this.DirectDebitDetails = directDebitDetails;
        }

        /// <summary>
        /// Gets or Sets PaymentId
        /// </summary>
        [DataMember(Name = "payment_id", EmitDefaultValue = false)]
        public Guid PaymentId { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactId
        /// </summary>
        [DataMember(Name = "artifact_id", EmitDefaultValue = false)]
        public Guid ArtifactId { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name = "session_id", EmitDefaultValue = false)]
        public Guid SessionId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets Subtotal
        /// </summary>
        [DataMember(Name = "subtotal", EmitDefaultValue = false)]
        public string Subtotal { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets CustomerFeeAmount
        /// </summary>
        [DataMember(Name = "customer_fee_amount", EmitDefaultValue = false)]
        public string CustomerFeeAmount { get; set; }

        /// <summary>
        /// the pricing of the customer fee e.g. 2.9% + $0.2
        /// </summary>
        /// <value>the pricing of the customer fee e.g. 2.9% + $0.2</value>
        [DataMember(Name = "customer_fee_pricing", EmitDefaultValue = false)]
        public string CustomerFeePricing { get; set; }

        /// <summary>
        /// Gets or Sets PayerDetails
        /// </summary>
        [DataMember(Name = "payer_details", EmitDefaultValue = false)]
        public Payer PayerDetails { get; set; }

        /// <summary>
        /// Gets or Sets CardDetails
        /// </summary>
        [DataMember(Name = "card_details", EmitDefaultValue = false)]
        public CardPayment CardDetails { get; set; }

        /// <summary>
        /// Gets or Sets DirectDebitDetails
        /// </summary>
        [DataMember(Name = "direct_debit_details", EmitDefaultValue = false)]
        public DebitPayment DirectDebitDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentDetails {\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  ArtifactId: ").Append(ArtifactId).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Subtotal: ").Append(Subtotal).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  CustomerFeeAmount: ").Append(CustomerFeeAmount).Append("\n");
            sb.Append("  CustomerFeePricing: ").Append(CustomerFeePricing).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PayerDetails: ").Append(PayerDetails).Append("\n");
            sb.Append("  CardDetails: ").Append(CardDetails).Append("\n");
            sb.Append("  DirectDebitDetails: ").Append(DirectDebitDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentDetails);
        }

        /// <summary>
        /// Returns true if PaymentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentId == input.PaymentId ||
                    (this.PaymentId != null &&
                    this.PaymentId.Equals(input.PaymentId))
                ) && 
                (
                    this.ArtifactId == input.ArtifactId ||
                    (this.ArtifactId != null &&
                    this.ArtifactId.Equals(input.ArtifactId))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Subtotal == input.Subtotal ||
                    (this.Subtotal != null &&
                    this.Subtotal.Equals(input.Subtotal))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.CustomerFeeAmount == input.CustomerFeeAmount ||
                    (this.CustomerFeeAmount != null &&
                    this.CustomerFeeAmount.Equals(input.CustomerFeeAmount))
                ) && 
                (
                    this.CustomerFeePricing == input.CustomerFeePricing ||
                    (this.CustomerFeePricing != null &&
                    this.CustomerFeePricing.Equals(input.CustomerFeePricing))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    this.PaymentMethod.Equals(input.PaymentMethod)
                ) && 
                (
                    this.PayerDetails == input.PayerDetails ||
                    (this.PayerDetails != null &&
                    this.PayerDetails.Equals(input.PayerDetails))
                ) && 
                (
                    this.CardDetails == input.CardDetails ||
                    (this.CardDetails != null &&
                    this.CardDetails.Equals(input.CardDetails))
                ) && 
                (
                    this.DirectDebitDetails == input.DirectDebitDetails ||
                    (this.DirectDebitDetails != null &&
                    this.DirectDebitDetails.Equals(input.DirectDebitDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentId.GetHashCode();
                }
                if (this.ArtifactId != null)
                {
                    hashCode = (hashCode * 59) + this.ArtifactId.GetHashCode();
                }
                if (this.SessionId != null)
                {
                    hashCode = (hashCode * 59) + this.SessionId.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.Subtotal != null)
                {
                    hashCode = (hashCode * 59) + this.Subtotal.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.CustomerFeeAmount != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerFeeAmount.GetHashCode();
                }
                if (this.CustomerFeePricing != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerFeePricing.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                if (this.PayerDetails != null)
                {
                    hashCode = (hashCode * 59) + this.PayerDetails.GetHashCode();
                }
                if (this.CardDetails != null)
                {
                    hashCode = (hashCode * 59) + this.CardDetails.GetHashCode();
                }
                if (this.DirectDebitDetails != null)
                {
                    hashCode = (hashCode * 59) + this.DirectDebitDetails.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
